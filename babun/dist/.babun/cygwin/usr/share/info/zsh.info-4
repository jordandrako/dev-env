This is zsh.info, produced by makeinfo version 5.2 from tzsh.texi.

INFO-DIR-SECTION Utilities
START-INFO-DIR-ENTRY
* ZSH: (zsh).                     The Z Shell Manual.
END-INFO-DIR-ENTRY



File: zsh.info,  Node: The zsh/mathfunc Module,  Next: The zsh/newuser Module,  Prev: The zsh/mapfile Module,  Up: Zsh Modules

22.16 The zsh/mathfunc Module
=============================

The zsh/mathfunc module provides standard mathematical functions for use
when evaluating mathematical formulae.  The syntax agrees with normal C
and FORTRAN conventions, for example,

     (( f = sin(0.3) ))

assigns the sine of 0.3 to the parameter f.

Most functions take floating point arguments and return a floating point
value.  However, any necessary conversions from or to integer type will
be performed automatically by the shell.  Apart from atan with a second
argument and the abs, int and float functions, all functions behave as
noted in the manual page for the corresponding C function, except that
any arguments out of range for the function in question will be detected
by the shell and an error reported.

The following functions take a single floating point argument: acos,
acosh, asin, asinh, atan, atanh, cbrt, ceil, cos, cosh, erf, erfc, exp,
expm1, fabs, floor, gamma, j0, j1, lgamma, log, log10, log1p, logb, sin,
sinh, sqrt, tan, tanh, y0, y1.  The atan function can optionally take a
second argument, in which case it behaves like the C function atan2.
The ilogb function takes a single floating point argument, but returns
an integer.

The function signgam takes no arguments, and returns an integer, which
is the C variable of the same name, as described in man page gamma(3).
Note that it is therefore only useful immediately after a call to gamma
or lgamma.  Note also that 'signgam()' and 'signgam' are distinct
expressions.

The following functions take two floating point arguments: copysign,
fmod, hypot, nextafter.

The following take an integer first argument and a floating point second
argument: jn, yn.

The following take a floating point first argument and an integer second
argument: ldexp, scalb.

The function abs does not convert the type of its single argument; it
returns the absolute value of either a floating point number or an
integer.  The functions float and int convert their arguments into a
floating point or integer value (by truncation) respectively.

Note that the C pow function is available in ordinary math evaluation as
the '**' operator and is not provided here.

The function rand48 is available if your system's mathematical library
has the function erand48(3).  It returns a pseudo-random floating point
number between 0 and 1.  It takes a single string optional argument.

If the argument is not present, the random number seed is initialised by
three calls to the rand(3) function -- this produces the same random
numbers as the next three values of $RANDOM.

If the argument is present, it gives the name of a scalar parameter
where the current random number seed will be stored.  On the first call,
the value must contain at least twelve hexadecimal digits (the remainder
of the string is ignored), or the seed will be initialised in the same
manner as for a call to rand48 with no argument.  Subsequent calls to
rand48(PARAM) will then maintain the seed in the parameter PARAM as a
string of twelve hexadecimal digits, with no base signifier.  The random
number sequences for different parameters are completely independent,
and are also independent from that used by calls to rand48 with no
argument.

For example, consider

     print $(( rand48(seed) ))
     print $(( rand48() ))
     print $(( rand48(seed) ))

Assuming $seed does not exist, it will be initialised by the first call.
In the second call, the default seed is initialised; note, however, that
because of the properties of rand() there is a correlation between the
seeds used for the two initialisations, so for more secure uses, you
should generate your own 12-byte seed.  The third call returns to the
same sequence of random numbers used in the first call, unaffected by
the intervening rand48().


File: zsh.info,  Node: The zsh/newuser Module,  Next: The zsh/parameter Module,  Prev: The zsh/mathfunc Module,  Up: Zsh Modules

22.17 The zsh/newuser Module
============================

The zsh/newuser module is loaded at boot if it is available, the RCS
option is set, and the PRIVILEGED option is not set (all three are true
by default).  This takes place immediately after commands in the global
zshenv file (typically /etc/zshenv), if any, have been executed.  If the
module is not available it is silently ignored by the shell; the module
may safely be removed from $MODULE_PATH by the administrator if it is
not required.

On loading, the module tests if any of the start-up files .zshenv,
.zprofile, .zshrc or .zlogin exist in the directory given by the
environment variable ZDOTDIR, or the user's home directory if that is
not set.  The test is not performed and the module halts processing if
the shell was in an emulation mode (i.e.  had been invoked as some other
shell than zsh).

If none of the start-up files were found, the module then looks for the
file newuser first in a sitewide directory, usually the parent directory
of the site-functions directory, and if that is not found the module
searches in a version-specific directory, usually the parent of the
functions directory containing version-specific functions.  (These
directories can be configured when zsh is built using the
--enable-site-scriptdir=DIR and --enable-scriptdir=DIR flags to
configure, respectively; the defaults are PREFIX/share/zsh and
PREFIX/share/zsh/$ZSH_VERSION where the default PREFIX is /usr/local.)

If the file newuser is found, it is then sourced in the same manner as a
start-up file.  The file is expected to contain code to install start-up
files for the user, however any valid shell code will be executed.

The zsh/newuser module is then unconditionally unloaded.

Note that it is possible to achieve exactly the same effect as the
zsh/newuser module by adding code to /etc/zshenv.  The module exists
simply to allow the shell to make arrangements for new users without the
need for intervention by package maintainers and system administrators.

The script supplied with the module invokes the shell function
zsh-newuser-install.  This may be invoked directly by the user even if
the zsh/newuser module is disabled.  Note, however, that if the module
is not installed the function will not be installed either.  The
function is documented in *note User Configuration Functions::.


File: zsh.info,  Node: The zsh/parameter Module,  Next: The zsh/pcre Module,  Prev: The zsh/newuser Module,  Up: Zsh Modules

22.18 The zsh/parameter Module
==============================

The zsh/parameter module gives access to some of the internal hash
tables used by the shell by defining some special parameters.

options
     The keys for this associative array are the names of the options
     that can be set and unset using the setopt and unsetopt builtins.
     The value of each key is either the string on if the option is
     currently set, or the string off if the option is unset.  Setting a
     key to one of these strings is like setting or unsetting the
     option, respectively.  Unsetting a key in this array is like
     setting it to the value off.

commands
     This array gives access to the command hash table.  The keys are
     the names of external commands, the values are the pathnames of the
     files that would be executed when the command would be invoked.
     Setting a key in this array defines a new entry in this table in
     the same way as with the hash builtin.  Unsetting a key as in
     'unset "commands[foo]"' removes the entry for the given key from
     the command hash table.

functions
     This associative array maps names of enabled functions to their
     definitions.  Setting a key in it is like defining a function with
     the name given by the key and the body given by the value.
     Unsetting a key removes the definition for the function named by
     the key.

dis_functions
     Like functions but for disabled functions.

builtins
     This associative array gives information about the builtin commands
     currently enabled.  The keys are the names of the builtin commands
     and the values are either 'undefined' for builtin commands that
     will automatically be loaded from a module if invoked or 'defined'
     for builtin commands that are already loaded.

dis_builtins
     Like builtins but for disabled builtin commands.

reswords
     This array contains the enabled reserved words.

dis_reswords
     Like reswords but for disabled reserved words.

patchars
     This array contains the enabled pattern characters.

dis_patchars
     Like patchars but for disabled pattern characters.

aliases
     This maps the names of the regular aliases currently enabled to
     their expansions.

dis_aliases
     Like aliases but for disabled regular aliases.

galiases
     Like aliases, but for global aliases.

dis_galiases
     Like galiases but for disabled global aliases.

saliases
     Like raliases, but for suffix aliases.

dis_saliases
     Like saliases but for disabled suffix aliases.

parameters
     The keys in this associative array are the names of the parameters
     currently defined.  The values are strings describing the type of
     the parameter, in the same format used by the t parameter flag, see
     *note Parameter Expansion:: .  Setting or unsetting keys in this
     array is not possible.

modules
     An associative array giving information about modules.  The keys
     are the names of the modules loaded, registered to be autoloaded,
     or aliased.  The value says which state the named module is in and
     is one of the strings 'loaded', 'autoloaded', or 'alias:NAME',
     where NAME is the name the module is aliased to.

     Setting or unsetting keys in this array is not possible.

dirstack
     A normal array holding the elements of the directory stack.  Note
     that the output of the dirs builtin command includes one more
     directory, the current working directory.

history
     This associative array maps history event numbers to the full
     history lines.

historywords
     A special array containing the words stored in the history.

jobdirs
     This associative array maps job numbers to the directories from
     which the job was started (which may not be the current directory
     of the job).

     The keys of the associative arrays are usually valid job numbers,
     and these are the values output with, for example, ${(k)jobdirs}.
     Non-numeric job references may be used when looking up a value; for
     example, ${jobdirs[%+]} refers to the current job.

jobtexts
     This associative array maps job numbers to the texts of the command
     lines that were used to start the jobs.

     Handling of the keys of the associative array is as described for
     jobdirs above.

jobstates
     This associative array gives information about the states of the
     jobs currently known.  The keys are the job numbers and the values
     are strings of the form 'JOB-STATE:MARK:PID=STATE...'.  The
     JOB-STATE gives the state the whole job is currently in, one of
     'running', 'suspended', or 'done'.  The MARK is '+' for the current
     job, '-' for the previous job and empty otherwise.  This is
     followed by one 'PID=STATE' for every process in the job.  The PIDs
     are, of course, the process IDs and the STATE describes the state
     of that process.

     Handling of the keys of the associative array is as described for
     jobdirs above.

nameddirs
     This associative array maps the names of named directories to the
     pathnames they stand for.

userdirs
     This associative array maps user names to the pathnames of their
     home directories.

usergroups
     This associative array maps names of system groups of which the
     current user is a member to the corresponding group identifiers.
     The contents are the same as the groups output by the id command.

funcfiletrace
     This array contains the absolute line numbers and corresponding
     file names for the point where the current function, sourced file,
     or (if EVAL_LINENO is set) eval command was called.  The array is
     of the same length as funcsourcetrace and functrace, but differs
     from funcsourcetrace in that the line and file are the point of
     call, not the point of definition, and differs from functrace in
     that all values are absolute line numbers in files, rather than
     relative to the start of a function, if any.

funcsourcetrace
     This array contains the file names and line numbers of the points
     where the functions, sourced files, and (if EVAL_LINENO is set)
     eval commands currently being executed were defined.  The line
     number is the line where the 'function NAME' or 'NAME ()' started.
     In the case of an autoloaded function the line number is reported
     as zero.  The format of each element is FILENAME:LINENO.  For
     functions autoloaded from a file in native zsh format, where only
     the body of the function occurs in the file, or for files that have
     been executed by the source or '.' builtins, the trace information
     is shown as FILENAME:0, since the entire file is the definition.

     Most users will be interested in the information in the
     funcfiletrace array instead.

funcstack
     This array contains the names of the functions, sourced files, and
     (if EVAL_LINENO is set) eval commands.  currently being executed.
     The first element is the name of the function using the parameter.

functrace
     This array contains the names and line numbers of the callers
     corresponding to the functions currently being executed.  The
     format of each element is NAME:LINENO.  Callers are also shown for
     sourced files; the caller is the point where the source or '.'
     command was executed.


File: zsh.info,  Node: The zsh/pcre Module,  Next: The zsh/regex Module,  Prev: The zsh/parameter Module,  Up: Zsh Modules

22.19 The zsh/pcre Module
=========================

The zsh/pcre module makes some commands available as builtins:

pcre_compile [ -aimxs ] PCRE
     Compiles a perl-compatible regular expression.

     Option -a will force the pattern to be anchored.  Option -i will
     compile a case-insensitive pattern.  Option -m will compile a
     multi-line pattern; that is, ^ and $ will match newlines within the
     pattern.  Option -x will compile an extended pattern, wherein
     whitespace and # comments are ignored.  Option -s makes the dot
     metacharacter match all characters, including those that indicate
     newline.

pcre_study
     Studies the previously-compiled PCRE which may result in faster
     matching.

pcre_match [ -v VAR ] [ -a ARR ] [ -n OFFSET ] [ -b ] STRING
     Returns successfully if string matches the previously-compiled
     PCRE.

     Upon successful match, if the expression captures substrings within
     parentheses, pcre_match will set the array $MATCH to those
     substrings, unless the -a option is given, in which case it will
     set the array ARR.  Similarly, the variable MATCH will be set to
     the entire matched portion of the string, unless the -v option is
     given, in which case the variable VAR will be set.  No variables
     are altered if there is no successful match.  A -n option starts
     searching for a match from the byte OFFSET position in STRING.  If
     the -b option is given, the variable ZPCRE_OP will be set to an
     offset pair string, representing the byte offset positions of the
     entire matched portion within the STRING.  For example, a ZPCRE_OP
     set to "32 45" indicates that the matched portion began on byte
     offset 32 and ended on byte offset 44.  Here, byte offset position
     45 is the position directly after the matched portion.  Keep in
     mind that the byte position isn't necessarily the same as the
     character position when UTF-8 characters are involved.
     Consequently, the byte offset positions are only to be relied on in
     the context of using them for subsequent searches on STRING, using
     an offset position as an argument to the -n option.  This is mostly
     used to implement the "find all non-overlapping matches"
     functionality.

     A simple example of "find all non-overlapping matches":


          string="The following zip codes: 78884 90210 99513"
          pcre_compile -m "\d{5}"
          accum=()
          pcre_match -b -- $string
          while [[ $? -eq 0 ]] do
              b=($=ZPCRE_OP)
              accum+=$MATCH
              pcre_match -b -n $b[2] -- $string
          done
          print -l $accum



The zsh/pcre module makes available the following test condition:

expr -pcre-match pcre
     Matches a string against a perl-compatible regular expression.

     For example,

          [[ "$text" -pcre-match ^d+$ ]] &&
          print text variable contains only "d's".

     If the REMATCH_PCRE option is set, the =~ operator is equivalent to
     -pcre-match, and the NO_CASE_MATCH option may be used.  Note that
     NO_CASE_MATCH never applies to the pcre_match builtin, instead use
     the -i switch of pcre_compile.


File: zsh.info,  Node: The zsh/regex Module,  Next: The zsh/sched Module,  Prev: The zsh/pcre Module,  Up: Zsh Modules

22.20 The zsh/regex Module
==========================

The zsh/regex module makes available the following test condition:

EXPR -regex-match REGEX
     Matches a string against a POSIX extended regular expression.  On
     successful match, matched portion of the string will normally be
     placed in the MATCH variable.  If there are any capturing
     parentheses within the regex, then the match array variable will
     contain those.  If the match is not successful, then the variables
     will not be altered.

     For example,

          [[ alphabetical -regex-match ^a([^a]+)a([^a]+)a ]] &&
          print -l $MATCH X $match

     If the option REMATCH_PCRE is not set, then the =~ operator will
     automatically load this module as needed and will invoke the
     -regex-match operator.

     If BASH_REMATCH is set, then the array BASH_REMATCH will be set
     instead of MATCH and match.


File: zsh.info,  Node: The zsh/sched Module,  Next: The zsh/net/socket Module,  Prev: The zsh/regex Module,  Up: Zsh Modules

22.21 The zsh/sched Module
==========================

The zsh/sched module makes available one builtin command and one
parameter.

sched [-o] [+]HH:MM[:SS] COMMAND ...
sched [-o] [+]SECONDS COMMAND ...
sched [ -ITEM ]
     Make an entry in the scheduled list of commands to execute.  The
     time may be specified in either absolute or relative time, and
     either as hours, minutes and (optionally) seconds separated by a
     colon, or seconds alone.  An absolute number of seconds indicates
     the time since the epoch (1970/01/01 00:00); this is useful in
     combination with the features in the zsh/datetime module, see *note
     The zsh/datetime Module::.

     With no arguments, prints the list of scheduled commands.  If the
     scheduled command has the -o flag set, this is shown at the start
     of the command.

     With the argument '-ITEM', removes the given item from the list.
     The numbering of the list is continuous and entries are in time
     order, so the numbering can change when entries are added or
     deleted.

     Commands are executed either immediately before a prompt, or while
     the shell's line editor is waiting for input.  In the latter case
     it is useful to be able to produce output that does not interfere
     with the line being edited.  Providing the option -o causes the
     shell to clear the command line before the event and redraw it
     afterwards.  This should be used with any scheduled event that
     produces visible output to the terminal; it is not needed, for
     example, with output that updates a terminal emulator's title bar.

     The sched builtin is not made available by default when the shell
     starts in a mode emulating another shell.  It can be made available
     with the command 'zmodload -F zsh/sched b:sched'.

zsh_scheduled_events
     A readonly array corresponding to the events scheduled by the sched
     builtin.  The indices of the array correspond to the numbers shown
     when sched is run with no arguments (provided that the KSH_ARRAYS
     option is not set).  The value of the array consists of the
     scheduled time in seconds since the epoch (see The zsh/datetime
     Module for facilities for using this number), followed by a colon,
     followed by any options (which may be empty but will be preceded by
     a '-' otherwise), followed by a colon, followed by the command to
     be executed.

     The sched builtin should be used for manipulating the events.  Note
     that this will have an immediate effect on the contents of the
     array, so that indices may become invalid.


File: zsh.info,  Node: The zsh/net/socket Module,  Next: The zsh/stat Module,  Prev: The zsh/sched Module,  Up: Zsh Modules

22.22 The zsh/net/socket Module
===============================

The zsh/net/socket module makes available one builtin command:

zsocket [ -altv ] [ -d FD ] [ ARGS ]
     zsocket is implemented as a builtin to allow full use of shell
     command line editing, file I/O, and job control mechanisms.

22.22.1 Outbound Connections
----------------------------

zsocket [ -v ] [ -d FD ] FILENAME
     Open a new Unix domain connection to FILENAME.  The shell parameter
     REPLY will be set to the file descriptor associated with that
     connection.  Currently, only stream connections are supported.

     If -d is specified, its argument will be taken as the target file
     descriptor for the connection.

     In order to elicit more verbose output, use -v.

22.22.2 Inbound Connections
---------------------------

zsocket -l [ -v ] [ -d FD ] FILENAME
     zsocket -l will open a socket listening on FILENAME.  The shell
     parameter REPLY will be set to the file descriptor associated with
     that listener.

     If -d is specified, its argument will be taken as the target file
     descriptor for the connection.

     In order to elicit more verbose output, use -v.

zsocket -a [ -tv ] [ -d TARGETFD ] LISTENFD
     zsocket -a will accept an incoming connection to the socket
     associated with LISTENFD.  The shell parameter REPLY will be set to
     the file descriptor associated with the inbound connection.

     If -d is specified, its argument will be taken as the target file
     descriptor for the connection.

     If -t is specified, zsocket will return if no incoming connection
     is pending.  Otherwise it will wait for one.

     In order to elicit more verbose output, use -v.


File: zsh.info,  Node: The zsh/stat Module,  Next: The zsh/system Module,  Prev: The zsh/net/socket Module,  Up: Zsh Modules

22.23 The zsh/stat Module
=========================

The zsh/stat module makes available one builtin command under two
possible names:

zstat [ -gnNolLtTrs ] [ -f FD ] [ -H HASH ] [ -A ARRAY ] [ -F FMT ] [ +ELEMENT ] [ FILE ... ]
stat ...
     The command acts as a front end to the stat system call (see man
     page stat(2)).  The same command is provided with two names; as the
     name stat is often used by an external command it is recommended
     that only the zstat form of the command is used.  This can be
     arranged by loading the module with the command 'zmodload -F
     zsh/stat b:zstat'.

     If the stat call fails, the appropriate system error message
     printed and status 1 is returned.  The fields of struct stat give
     information about the files provided as arguments to the command.
     In addition to those available from the stat call, an extra element
     'link' is provided.  These elements are:

     device
          The number of the device on which the file resides.

     inode
          The unique number of the file on this device ('_inode_'
          number).

     mode
          The mode of the file; that is, the file's type and access
          permissions.  With the -s option, this will be returned as a
          string corresponding to the first column in the display of the
          ls -l command.

     nlink
          The number of hard links to the file.

     uid
          The user ID of the owner of the file.  With the -s option,
          this is displayed as a user name.

     gid
          The group ID of the file.  With the -s option, this is
          displayed as a group name.

     rdev
          The raw device number.  This is only useful for special
          devices.

     size
          The size of the file in bytes.

     atime
     mtime
     ctime
          The last access, modification and inode change times of the
          file, respectively, as the number of seconds since midnight
          GMT on 1st January, 1970.  With the -s option, these are
          printed as strings for the local time zone; the format can be
          altered with the -F option, and with the -g option the times
          are in GMT.

     blksize
          The number of bytes in one allocation block on the device on
          which the file resides.

     block
          The number of disk blocks used by the file.

     link
          If the file is a link and the -L option is in effect, this
          contains the name of the file linked to, otherwise it is
          empty.  Note that if this element is selected (''zstat
          +link'') then the -L option is automatically used.

     A particular element may be selected by including its name preceded
     by a '+' in the option list; only one element is allowed.  The
     element may be shortened to any unique set of leading characters.
     Otherwise, all elements will be shown for all files.

     Options:

     -A ARRAY
          Instead of displaying the results on standard output, assign
          them to an ARRAY, one struct stat element per array element
          for each file in order.  In this case neither the name of the
          element nor the name of the files appears in ARRAY unless the
          -t or -n options were given, respectively.  If -t is given,
          the element name appears as a prefix to the appropriate array
          element; if -n is given, the file name appears as a separate
          array element preceding all the others.  Other formatting
          options are respected.

     -H HASH
          Similar to -A, but instead assign the values to HASH.  The
          keys are the elements listed above.  If the -n option is
          provided then the name of the file is included in the hash
          with key name.

     -f FD
          Use the file on file descriptor FD instead of named files; no
          list of file names is allowed in this case.

     -F FMT
          Supplies a strftime (see man page strftime(3)) string for the
          formatting of the time elements.  The -s option is implied.

     -g
          Show the time elements in the GMT time zone.  The -s option is
          implied.

     -l
          List the names of the type elements (to standard output or an
          array as appropriate) and return immediately; options other
          than -A and arguments are ignored.

     -L
          Perform an lstat (see man page lstat(2)) rather than a stat
          system call.  In this case, if the file is a link, information
          about the link itself rather than the target file is returned.
          This option is required to make the link element useful.  It's
          important to note that this is the exact opposite from man
          page ls(1), etc.

     -n
          Always show the names of files.  Usually these are only shown
          when output is to standard output and there is more than one
          file in the list.

     -N
          Never show the names of files.

     -o
          If a raw file mode is printed, show it in octal, which is more
          useful for human consumption than the default of decimal.  A
          leading zero will be printed in this case.  Note that this
          does not affect whether a raw or formatted file mode is shown,
          which is controlled by the -r and -s options, nor whether a
          mode is shown at all.

     -r
          Print raw data (the default format) alongside string data (the
          -s format); the string data appears in parentheses after the
          raw data.

     -s
          Print mode, uid, gid and the three time elements as strings
          instead of numbers.  In each case the format is like that of
          ls -l.

     -t
          Always show the type names for the elements of struct stat.
          Usually these are only shown when output is to standard output
          and no individual element has been selected.

     -T
          Never show the type names of the struct stat elements.


File: zsh.info,  Node: The zsh/system Module,  Next: The zsh/net/tcp Module,  Prev: The zsh/stat Module,  Up: Zsh Modules

22.24 The zsh/system Module
===========================

The zsh/system module makes available various builtin commands and
parameters.

22.24.1 Builtins
----------------

syserror [ -e ERRVAR ] [ -p PREFIX ] [ ERRNO | ERRNAME ]
     This command prints out the error message associated with ERRNO, a
     system error number, followed by a newline to standard error.

     Instead of the error number, a name ERRNAME, for example ENOENT,
     may be used.  The set of names is the same as the contents of the
     array errnos, see below.

     If the string PREFIX is given, it is printed in front of the error
     message, with no intervening space.

     If ERRVAR is supplied, the entire message, without a newline, is
     assigned to the parameter names ERRVAR and nothing is output.

     A return status of 0 indicates the message was successfully printed
     (although it may not be useful if the error number was out of the
     system's range), a return status of 1 indicates an error in the
     parameters, and a return status of 2 indicates the error name was
     not recognised (no message is printed for this).

sysread [ -c COUNTVAR ] [ -i INFD ] [ -o OUTFD ]
[ -s BUFSIZE ] [ -t TIMEOUT ] [ PARAM ]
     Perform a single system read from file descriptor INFD, or zero if
     that is not given.  The result of the read is stored in PARAM or
     REPLY if that is not given.  If COUNTVAR is given, the number of
     bytes read is assigned to the parameter named by COUNTVAR.

     The maximum number of bytes read is BUFSIZE or 8192 if that is not
     given, however the command returns as soon as any number of bytes
     was successfully read.

     If TIMEOUT is given, it specifies a timeout in seconds, which may
     be zero to poll the file descriptor.  This is handled by the poll
     system call if available, otherwise the select system call if
     available.

     If OUTFD is given, an attempt is made to write all the bytes just
     read to the file descriptor OUTFD.  If this fails, because of a
     system error other than EINTR or because of an internal zsh error
     during an interrupt, the bytes read but not written are stored in
     the parameter named by PARAM if supplied (no default is used in
     this case), and the number of bytes read but not written is stored
     in the parameter named by COUNTVAR if that is supplied.  If it was
     successful, COUNTVAR contains the full number of bytes transferred,
     as usual, and PARAM is not set.

     The error EINTR (interrupted system call) is handled internally so
     that shell interrupts are transparent to the caller.  Any other
     error causes a return.

     The possible return statuses are
     0
          At least one byte of data was successfully read and, if
          appropriate, written.

     1
          There was an error in the parameters to the command.  This is
          the only error for which a message is printed to standard
          error.

     2
          There was an error on the read, or on polling the input file
          descriptor for a timeout.  The parameter ERRNO gives the
          error.

     3
          Data were successfully read, but there was an error writing
          them to OUTFD.  The parameter ERRNO gives the error.

     4
          The attempt to read timed out.  Note this does not set ERRNO
          as this is not a system error.

     5
          No system error occurred, but zero bytes were read.  This
          usually indicates end of file.  The parameters are set
          according to the usual rules; no write to OUTFD is attempted.

syswrite [ -c COUNTVAR ] [ -o OUTFD ] DATA
     The data (a single string of bytes) are written to the file
     descriptor OUTFD, or 1 if that is not given, using the write system
     call.  Multiple write operations may be used if the first does not
     write all the data.

     If COUNTVAR is given, the number of byte written is stored in the
     parameter named by COUNTVAR; this may not be the full length of
     DATA if an error occurred.

     The error EINTR (interrupted system call) is handled internally by
     retrying; otherwise an error causes the command to return.  For
     example, if the file descriptor is set to non-blocking output, an
     error EAGAIN (on some systems, EWOULDBLOCK) may result in the
     command returning early.

     The return status may be 0 for success, 1 for an error in the
     parameters to the command, or 2 for an error on the write; no error
     message is printed in the last case, but the parameter ERRNO will
     reflect the error that occurred.

zsystem flock [ -t TIMEOUT ] [ -f VAR ] [-er] FILE
zsystem flock -u FD_EXPR
     The builtin zsystem's subcommand flock performs advisory file
     locking (via the man page fcntl(2) system call) over the entire
     contents of the given file.  This form of locking requires the
     processes accessing the file to cooperate; its most obvious use is
     between two instances of the shell itself.

     In the first form the named FILE, which must already exist, is
     locked by opening a file descriptor to the file and applying a lock
     to the file descriptor.  The lock terminates when the shell process
     that created the lock exits; it is therefore often convenient to
     create file locks within subshells, since the lock is automatically
     released when the subshell exits.  Status 0 is returned if the lock
     succeeds, else status 1.

     In the second form the file descriptor given by the arithmetic
     expression fd_expr is closed, releasing a lock.  The file
     descriptor can be queried by using the '-f VAR' form during the
     lock; on a successful lock, the shell variable VAR is set to the
     file descriptor used for locking.  The lock will be released if the
     file descriptor is closed by any other means, for example using
     'exec {VAR}>&-'; however, the form described here performs a safety
     check that the file descriptor is in use for file locking.

     By default the shell waits indefinitely for the lock to succeed.
     The option -t TIMEOUT specifies a timeout for the lock in seconds;
     currently this must be an integer.  The shell will attempt to lock
     the file once a second during this period.  If the attempt times
     out, status 2 is returned.

     If the option -e is given, the file descriptor for the lock is
     preserved when the shell uses exec to start a new process;
     otherwise it is closed at that point and the lock released.

     If the option -r is given, the lock is only for reading, otherwise
     it is for reading and writing.  The file descriptor is opened
     accordingly.

zsystem supports SUBCOMMAND
     The builtin zsystem's subcommand supports tests whether a given
     subcommand is supported.  It returns status 0 if so, else status 1.
     It operates silently unless there was a syntax error (i.e.  the
     wrong number of arguments), in which case status 255 is returned.
     Status 1 can indicate one of two things: SUBCOMMAND is known but
     not supported by the current operating system, or SUBCOMMAND is not
     known (possibly because this is an older version of the shell
     before it was implemented).

22.24.2 Parameters
------------------

errnos
     A readonly array of the names of errors defined on the system.
     These are typically macros defined in C by including the system
     header file errno.h.  The index of each name (assuming the option
     KSH_ARRAYS is unset) corresponds to the error number.  Error
     numbers NUM before the last known error which have no name are
     given the name ENUM in the array.

     Note that aliases for errors are not handled; only the canonical
     name is used.

sysparams
     A readonly associative array.  The keys are:
     pid
          Returns the process ID of the current process, even in
          subshells.  Compare $$, which returns the process ID of the
          main shell process.

     ppid
          Returns the process ID of the parent of the current process,
          even in subshells.  Compare $PPID, which returns the process
          ID of the parent of the main shell process.


File: zsh.info,  Node: The zsh/net/tcp Module,  Next: The zsh/termcap Module,  Prev: The zsh/system Module,  Up: Zsh Modules

22.25 The zsh/net/tcp Module
============================

The zsh/net/tcp module makes available one builtin command:

ztcp [ -acflLtv ] [ -d FD ] [ ARGS ]
     ztcp is implemented as a builtin to allow full use of shell command
     line editing, file I/O, and job control mechanisms.

     If ztcp is run with no options, it will output the contents of its
     session table.

     If it is run with only the option -L, it will output the contents
     of the session table in a format suitable for automatic parsing.
     The option is ignored if given with a command to open or close a
     session.  The output consists of a set of lines, one per session,
     each containing the following elements separated by spaces:

     File descriptor
          The file descriptor in use for the connection.  For normal
          inbound (I) and outbound (O) connections this may be read and
          written by the usual shell mechanisms.  However, it should
          only be close with 'ztcp -c'.

     Connection type
          A letter indicating how the session was created:

          Z
               A session created with the zftp command.

          L
               A connection opened for listening with 'ztcp -l'.

          I
               An inbound connection accepted with 'ztcp -a'.

          O
               An outbound connection created with 'ztcp HOST ...'.

     The local host
          This is usually set to an all-zero IP address as the address
          of the localhost is irrelevant.

     The local port
          This is likely to be zero unless the connection is for
          listening.

     The remote host
          This is the fully qualified domain name of the peer, if
          available, else an IP address.  It is an all-zero IP address
          for a session opened for listening.

     The remote port
          This is zero for a connection opened for listening.

22.25.1 Outbound Connections
----------------------------

ztcp [ -v ] [ -d FD ] HOST [ PORT ]
     Open a new TCP connection to HOST.  If the PORT is omitted, it will
     default to port 23.  The connection will be added to the session
     table and the shell parameter REPLY will be set to the file
     descriptor associated with that connection.

     If -d is specified, its argument will be taken as the target file
     descriptor for the connection.

     In order to elicit more verbose output, use -v.

22.25.2 Inbound Connections
---------------------------

ztcp -l [ -v ] [ -d FD ] PORT
     ztcp -l will open a socket listening on TCP PORT.  The socket will
     be added to the session table and the shell parameter REPLY will be
     set to the file descriptor associated with that listener.

     If -d is specified, its argument will be taken as the target file
     descriptor for the connection.

     In order to elicit more verbose output, use -v.

ztcp -a [ -tv ] [ -d TARGETFD ] LISTENFD
     ztcp -a will accept an incoming connection to the port associated
     with LISTENFD.  The connection will be added to the session table
     and the shell parameter REPLY will be set to the file descriptor
     associated with the inbound connection.

     If -d is specified, its argument will be taken as the target file
     descriptor for the connection.

     If -t is specified, ztcp will return if no incoming connection is
     pending.  Otherwise it will wait for one.

     In order to elicit more verbose output, use -v.

22.25.3 Closing Connections
---------------------------

ztcp -cf [ -v ] [ FD ]
ztcp -c [ -v ] [ FD ]
     ztcp -c will close the socket associated with FD.  The socket will
     be removed from the session table.  If FD is not specified, ztcp
     will close everything in the session table.

     Normally, sockets registered by zftp (see *note The zsh/zftp
     Module:: ) cannot be closed this way.  In order to force such a
     socket closed, use -f.

     In order to elicit more verbose output, use -v.

22.25.4 Example
---------------

Here is how to create a TCP connection between two instances of zsh.  We
need to pick an unassigned port; here we use the randomly chosen 5123.

On host1,
     zmodload zsh/net/tcp
     ztcp -l 5123
     listenfd=$REPLY
     ztcp -a $listenfd
     fd=$REPLY
   The second from last command blocks until there is an incoming
connection.

Now create a connection from host2 (which may, of course, be the same
machine):
     zmodload zsh/net/tcp
     ztcp host1 5123
     fd=$REPLY

Now on each host, $fd contains a file descriptor for talking to the
other.  For example, on host1:
     print This is a message >&$fd
   and on host2:
     read -r line <&$fd; print -r - $line
   prints 'This is a message'.

To tidy up, on host1:
     ztcp -c $listenfd
     ztcp -c $fd
   and on host2
     ztcp -c $fd


File: zsh.info,  Node: The zsh/termcap Module,  Next: The zsh/terminfo Module,  Prev: The zsh/net/tcp Module,  Up: Zsh Modules

22.26 The zsh/termcap Module
============================

The zsh/termcap module makes available one builtin command:

echotc CAP [ ARG ... ]
     Output the termcap value corresponding to the capability CAP, with
     optional arguments.

The zsh/termcap module makes available one parameter:

termcap
     An associative array that maps termcap capability codes to their
     values.


File: zsh.info,  Node: The zsh/terminfo Module,  Next: The zsh/zftp Module,  Prev: The zsh/termcap Module,  Up: Zsh Modules

22.27 The zsh/terminfo Module
=============================

The zsh/terminfo module makes available one builtin command:

echoti CAP [ ARG ]
     Output the terminfo value corresponding to the capability CAP,
     instantiated with ARG if applicable.

The zsh/terminfo module makes available one parameter:

terminfo
     An associative array that maps terminfo capability names to their
     values.


File: zsh.info,  Node: The zsh/zftp Module,  Next: The zsh/zle Module,  Prev: The zsh/terminfo Module,  Up: Zsh Modules

22.28 The zsh/zftp Module
=========================

The zsh/zftp module makes available one builtin command:

zftp SUBCOMMAND [ ARGS ]
     The zsh/zftp module is a client for FTP (file transfer protocol).
     It is implemented as a builtin to allow full use of shell command
     line editing, file I/O, and job control mechanisms.  Often, users
     will access it via shell functions providing a more powerful
     interface; a set is provided with the zsh distribution and is
     described in *note Zftp Function System::.  However, the zftp
     command is entirely usable in its own right.

     All commands consist of the command name zftp followed by the name
     of a subcommand.  These are listed below.  The return status of
     each subcommand is supposed to reflect the success or failure of
     the remote operation.  See a description of the variable
     ZFTP_VERBOSE for more information on how responses from the server
     may be printed.

22.28.1 Subcommands
-------------------

open HOST[:PORT] [ USER [ PASSWORD [ ACCOUNT ] ] ]
     Open a new FTP session to HOST, which may be the name of a TCP/IP
     connected host or an IP number in the standard dot notation.  If
     the argument is in the form HOST:PORT, open a connection to TCP
     port PORT instead of the standard FTP port 21.  This may be the
     name of a TCP service or a number: see the description of ZFTP_PORT
     below for more information.

     If IPv6 addresses in colon format are used, the HOST should be
     surrounded by quoted square brackets to distinguish it from the
     PORT, for example '[fe80::203:baff:fe02:8b56]'.  For consistency
     this is allowed with all forms of HOST.

     Remaining arguments are passed to the login subcommand.  Note that
     if no arguments beyond HOST are supplied, open will _not_
     automatically call login.  If no arguments at all are supplied,
     open will use the parameters set by the params subcommand.

     After a successful open, the shell variables ZFTP_HOST, ZFTP_PORT,
     ZFTP_IP and ZFTP_SYSTEM are available; see 'Variables' below.

login [ NAME [ PASSWORD [ ACCOUNT ] ] ]
user [ NAME [ PASSWORD [ ACCOUNT ] ] ]
     Login the user NAME with parameters PASSWORD and ACCOUNT.  Any of
     the parameters can be omitted, and will be read from standard input
     if needed (NAME is always needed).  If standard input is a
     terminal, a prompt for each one will be printed on standard error
     and PASSWORD will not be echoed.  If any of the parameters are not
     used, a warning message is printed.

     After a successful login, the shell variables ZFTP_USER,
     ZFTP_ACCOUNT and ZFTP_PWD are available; see 'Variables' below.

     This command may be re-issued when a user is already logged in, and
     the server will first be reinitialized for a new user.

params [ HOST [ USER [ PASSWORD [ ACCOUNT ] ] ] ]
params -
     Store the given parameters for a later open command with no
     arguments.  Only those given on the command line will be
     remembered.  If no arguments are given, the parameters currently
     set are printed, although the password will appear as a line of
     stars; the return status is one if no parameters were set, zero
     otherwise.

     Any of the parameters may be specified as a '?', which may need to
     be quoted to protect it from shell expansion.  In this case, the
     appropriate parameter will be read from stdin as with the login
     subcommand, including special handling of PASSWORD.  If the '?' is
     followed by a string, that is used as the prompt for reading the
     parameter instead of the default message (any necessary punctuation
     and whitespace should be included at the end of the prompt).  The
     first letter of the parameter (only) may be quoted with a '\';
     hence an argument "\\$word" guarantees that the string from the
     shell parameter $word will be treated literally, whether or not it
     begins with a '?'.

     If instead a single '-' is given, the existing parameters, if any,
     are deleted.  In that case, calling open with no arguments will
     cause an error.

     The list of parameters is not deleted after a close, however it
     will be deleted if the zsh/zftp module is unloaded.

     For example,

          zftp params ftp.elsewhere.xx juser '?Password for juser: '

     will store the host ftp.elsewhere.xx and the user juser and then
     prompt the user for the corresponding password with the given
     prompt.

test
     Test the connection; if the server has reported that it has closed
     the connection (maybe due to a timeout), return status 2; if no
     connection was open anyway, return status 1; else return status 0.
     The test subcommand is silent, apart from messages printed by the
     $ZFTP_VERBOSE mechanism, or error messages if the connection
     closes.  There is no network overhead for this test.

     The test is only supported on systems with either the select(2) or
     poll(2) system calls; otherwise the message 'not supported on this
     system' is printed instead.

     The test subcommand will automatically be called at the start of
     any other subcommand for the current session when a connection is
     open.

cd DIRECTORY
     Change the remote directory to DIRECTORY.  Also alters the shell
     variable ZFTP_PWD.

cdup
     Change the remote directory to the one higher in the directory
     tree.  Note that cd .. will also work correctly on non-UNIX
     systems.

dir [ ARGS... ]
     Give a (verbose) listing of the remote directory.  The ARGS are
     passed directly to the server.  The command's behaviour is
     implementation dependent, but a UNIX server will typically
     interpret ARGS as arguments to the ls command and with no arguments
     return the result of 'ls -l'.  The directory is listed to standard
     output.

ls [ ARGS ]
     Give a (short) listing of the remote directory.  With no ARGS,
     produces a raw list of the files in the directory, one per line.
     Otherwise, up to vagaries of the server implementation, behaves
     similar to dir.

type [ TYPE ]
     Change the type for the transfer to TYPE, or print the current type
     if TYPE is absent.  The allowed values are 'A' (ASCII), 'I' (Image,
     i.e.  binary), or 'B' (a synonym for 'I').

     The FTP default for a transfer is ASCII. However, if zftp finds
     that the remote host is a UNIX machine with 8-bit byes, it will
     automatically switch to using binary for file transfers upon open.
     This can subsequently be overridden.

     The transfer type is only passed to the remote host when a data
     connection is established; this command involves no network
     overhead.

ascii
     The same as type A.

binary
     The same as type I.

mode [ S | B ]
     Set the mode type to stream (S) or block (B).  Stream mode is the
     default; block mode is not widely supported.

remote FILES...
local [ FILES... ]
     Print the size and last modification time of the remote or local
     files.  If there is more than one item on the list, the name of the
     file is printed first.  The first number is the file size, the
     second is the last modification time of the file in the format
     CCYYMMDDhhmmSS consisting of year, month, date, hour, minutes and
     seconds in GMT. Note that this format, including the length, is
     guaranteed, so that time strings can be directly compared via the
     [[ builtin's < and > operators, even if they are too long to be
     represented as integers.

     Not all servers support the commands for retrieving this
     information.  In that case, the remote command will print nothing
     and return status 2, compared with status 1 for a file not found.

     The local command (but not remote) may be used with no arguments,
     in which case the information comes from examining file descriptor
     zero.  This is the same file as seen by a put command with no
     further redirection.

get FILE [...]
     Retrieve all FILEs from the server, concatenating them and sending
     them to standard output.

put FILE [...]
     For each FILE, read a file from standard input and send that to the
     remote host with the given name.

append FILE [...]
     As put, but if the remote FILE already exists, data is appended to
     it instead of overwriting it.

getat FILE POINT
putat FILE POINT
appendat FILE POINT
     Versions of get, put and append which will start the transfer at
     the given POINT in the remote FILE.  This is useful for appending
     to an incomplete local file.  However, note that this ability is
     not universally supported by servers (and is not quite the
     behaviour specified by the standard).

delete FILE [...]
     Delete the list of files on the server.

mkdir DIRECTORY
     Create a new directory DIRECTORY on the server.

rmdir DIRECTORY
     Delete the directory DIRECTORY on the server.

rename OLD-NAME NEW-NAME
     Rename file OLD-NAME to NEW-NAME on the server.

site ARGS...
     Send a host-specific command to the server.  You will probably only
     need this if instructed by the server to use it.

quote ARGS...
     Send the raw FTP command sequence to the server.  You should be
     familiar with the FTP command set as defined in RFC959 before doing
     this.  Useful commands may include STAT and HELP.  Note also the
     mechanism for returning messages as described for the variable
     ZFTP_VERBOSE below, in particular that all messages from the
     control connection are sent to standard error.

close
quit
     Close the current data connection.  This unsets the shell
     parameters ZFTP_HOST, ZFTP_PORT, ZFTP_IP, ZFTP_SYSTEM, ZFTP_USER,
     ZFTP_ACCOUNT, ZFTP_PWD, ZFTP_TYPE and ZFTP_MODE.

session [ SESSNAME ]
     Allows multiple FTP sessions to be used at once.  The name of the
     session is an arbitrary string of characters; the default session
     is called 'default'.  If this command is called without an
     argument, it will list all the current sessions; with an argument,
     it will either switch to the existing session called SESSNAME, or
     create a new session of that name.

     Each session remembers the status of the connection, the set of
     connection-specific shell parameters (the same set as are unset
     when a connection closes, as given in the description of close),
     and any user parameters specified with the params subcommand.
     Changing to a previous session restores those values; changing to a
     new session initialises them in the same way as if zftp had just
     been loaded.  The name of the current session is given by the
     parameter ZFTP_SESSION.

rmsession [ SESSNAME ]
     Delete a session; if a name is not given, the current session is
     deleted.  If the current session is deleted, the earliest existing
     session becomes the new current session, otherwise the current
     session is not changed.  If the session being deleted is the only
     one, a new session called 'default' is created and becomes the
     current session; note that this is a new session even if the
     session being deleted is also called 'default'.  It is recommended
     that sessions not be deleted while background commands which use
     zftp are still active.

22.28.2 Parameters
------------------

The following shell parameters are used by zftp.  Currently none of them
are special.

ZFTP_TMOUT
     Integer.  The time in seconds to wait for a network operation to
     complete before returning an error.  If this is not set when the
     module is loaded, it will be given the default value 60.  A value
     of zero turns off timeouts.  If a timeout occurs on the control
     connection it will be closed.  Use a larger value if this occurs
     too frequently.

ZFTP_IP
     Readonly.  The IP address of the current connection in dot
     notation.

ZFTP_HOST
     Readonly.  The hostname of the current remote server.  If the host
     was opened as an IP number, ZFTP_HOST contains that instead; this
     saves the overhead for a name lookup, as IP numbers are most
     commonly used when a nameserver is unavailable.

ZFTP_PORT
     Readonly.  The number of the remote TCP port to which the
     connection is open (even if the port was originally specified as a
     named service).  Usually this is the standard FTP port, 21.

     In the unlikely event that your system does not have the
     appropriate conversion functions, this appears in network byte
     order.  If your system is little-endian, the port then consists of
     two swapped bytes and the standard port will be reported as 5376.
     In that case, numeric ports passed to zftp open will also need to
     be in this format.

ZFTP_SYSTEM
     Readonly.  The system type string returned by the server in
     response to an FTP SYST request.  The most interesting case is a
     string beginning "UNIX Type: L8", which ensures maximum
     compatibility with a local UNIX host.

ZFTP_TYPE
     Readonly.  The type to be used for data transfers , either 'A' or
     'I'.  Use the type subcommand to change this.

ZFTP_USER
     Readonly.  The username currently logged in, if any.

ZFTP_ACCOUNT
     Readonly.  The account name of the current user, if any.  Most
     servers do not require an account name.

ZFTP_PWD
     Readonly.  The current directory on the server.

ZFTP_CODE
     Readonly.  The three digit code of the last FTP reply from the
     server as a string.  This can still be read after the connection is
     closed, and is not changed when the current session changes.

ZFTP_REPLY
     Readonly.  The last line of the last reply sent by the server.
     This can still be read after the connection is closed, and is not
     changed when the current session changes.

ZFTP_SESSION
     Readonly.  The name of the current FTP session; see the description
     of the session subcommand.

ZFTP_PREFS
     A string of preferences for altering aspects of zftp's behaviour.
     Each preference is a single character.  The following are defined:

     P
          Passive: attempt to make the remote server initiate data
          transfers.  This is slightly more efficient than sendport
          mode.  If the letter S occurs later in the string, zftp will
          use sendport mode if passive mode is not available.

     S
          Sendport: initiate transfers by the FTP PORT command.  If this
          occurs before any P in the string, passive mode will never be
          attempted.

     D
          Dumb: use only the bare minimum of FTP commands.  This
          prevents the variables ZFTP_SYSTEM and ZFTP_PWD from being
          set, and will mean all connections default to ASCII type.  It
          may prevent ZFTP_SIZE from being set during a transfer if the
          server does not send it anyway (many servers do).

     If ZFTP_PREFS is not set when zftp is loaded, it will be set to a
     default of 'PS', i.e.  use passive mode if available, otherwise
     fall back to sendport mode.

ZFTP_VERBOSE
     A string of digits between 0 and 5 inclusive, specifying which
     responses from the server should be printed.  All responses go to
     standard error.  If any of the numbers 1 to 5 appear in the string,
     raw responses from the server with reply codes beginning with that
     digit will be printed to standard error.  The first digit of the
     three digit reply code is defined by RFC959 to correspond to:

     1.
          A positive preliminary reply.

     2.
          A positive completion reply.

     3.
          A positive intermediate reply.

     4.
          A transient negative completion reply.

     5.
          A permanent negative completion reply.

     It should be noted that, for unknown reasons, the reply 'Service
     not available', which forces termination of a connection, is
     classified as 421, i.e.  'transient negative', an interesting
     interpretation of the word 'transient'.

     The code 0 is special: it indicates that all but the last line of
     multiline replies read from the server will be printed to standard
     error in a processed format.  By convention, servers use this
     mechanism for sending information for the user to read.  The
     appropriate reply code, if it matches the same response, takes
     priority.

     If ZFTP_VERBOSE is not set when zftp is loaded, it will be set to
     the default value 450, i.e., messages destined for the user and all
     errors will be printed.  A null string is valid and specifies that
     no messages should be printed.

22.28.3 Functions
-----------------

zftp_chpwd
     If this function is set by the user, it is called every time the
     directory changes on the server, including when a user is logged
     in, or when a connection is closed.  In the last case, $ZFTP_PWD
     will be unset; otherwise it will reflect the new directory.

zftp_progress
     If this function is set by the user, it will be called during a
     get, put or append operation each time sufficient data has been
     received from the host.  During a get, the data is sent to standard
     output, so it is vital that this function should write to standard
     error or directly to the terminal, _not_ to standard output.

     When it is called with a transfer in progress, the following
     additional shell parameters are set:

     ZFTP_FILE
          The name of the remote file being transferred from or to.

     ZFTP_TRANSFER
          A G for a get operation and a P for a put operation.

     ZFTP_SIZE
          The total size of the complete file being transferred: the
          same as the first value provided by the remote and local
          subcommands for a particular file.  If the server cannot
          supply this value for a remote file being retrieved, it will
          not be set.  If input is from a pipe the value may be
          incorrect and correspond simply to a full pipe buffer.

     ZFTP_COUNT
          The amount of data so far transferred; a number between zero
          and $ZFTP_SIZE, if that is set.  This number is always
          available.

     The function is initially called with ZFTP_TRANSFER set
     appropriately and ZFTP_COUNT set to zero.  After the transfer is
     finished, the function will be called one more time with
     ZFTP_TRANSFER set to GF or PF, in case it wishes to tidy up.  It is
     otherwise never called twice with the same value of ZFTP_COUNT.

     Sometimes the progress meter may cause disruption.  It is up to the
     user to decide whether the function should be defined and to use
     unfunction when necessary.

22.28.4 Problems
----------------

A connection may not be opened in the left hand side of a pipe as this
occurs in a subshell and the file information is not updated in the main
shell.  In the case of type or mode changes or closing the connection in
a subshell, the information is returned but variables are not updated
until the next call to zftp.  Other status changes in subshells will not
be reflected by changes to the variables (but should be otherwise
harmless).

Deleting sessions while a zftp command is active in the background can
have unexpected effects, even if it does not use the session being
deleted.  This is because all shell subprocesses share information on
the state of all connections, and deleting a session changes the
ordering of that information.

On some operating systems, the control connection is not valid after a
fork(), so that operations in subshells, on the left hand side of a
pipeline, or in the background are not possible, as they should be.
This is presumably a bug in the operating system.


File: zsh.info,  Node: The zsh/zle Module,  Next: The zsh/zleparameter Module,  Prev: The zsh/zftp Module,  Up: Zsh Modules

22.29 The zsh/zle Module
========================

The zsh/zle module contains the Zsh Line Editor.  See *note Zsh Line
Editor::.


File: zsh.info,  Node: The zsh/zleparameter Module,  Next: The zsh/zprof Module,  Prev: The zsh/zle Module,  Up: Zsh Modules

22.30 The zsh/zleparameter Module
=================================

The zsh/zleparameter module defines two special parameters that can be
used to access internal information of the Zsh Line Editor (see *note
Zsh Line Editor::).

keymaps
     This array contains the names of the keymaps currently defined.

widgets
     This associative array contains one entry per widget defined.  The
     name of the widget is the key and the value gives information about
     the widget.  It is either the string 'builtin' for builtin widgets,
     a string of the form 'user:NAME' for user-defined widgets, where
     NAME is the name of the shell function implementing the widget, or
     it is a string of the form 'completion:TYPE:NAME', for completion
     widgets.  In the last case TYPE is the name of the builtin widgets
     the completion widget imitates in its behavior and NAME is the name
     of the shell function implementing the completion widget.


File: zsh.info,  Node: The zsh/zprof Module,  Next: The zsh/zpty Module,  Prev: The zsh/zleparameter Module,  Up: Zsh Modules

22.31 The zsh/zprof Module
==========================

When loaded, the zsh/zprof causes shell functions to be profiled.  The
profiling results can be obtained with the zprof builtin command made
available by this module.  There is no way to turn profiling off other
than unloading the module.

zprof [ -c ]
     Without the -c option, zprof lists profiling results to standard
     output.  The format is comparable to that of commands like gprof.

     At the top there is a summary listing all functions that were
     called at least once.  This summary is sorted in decreasing order
     of the amount of time spent in each.  The lines contain the number
     of the function in order, which is used in other parts of the list
     in suffixes of the form '[NUM]', then the number of calls made to
     the function.  The next three columns list the time in milliseconds
     spent in the function and its descendants, the average time in
     milliseconds spent in the function and its descendants per call and
     the percentage of time spent in all shell functions used in this
     function and its descendants.  The following three columns give the
     same information, but counting only the time spent in the function
     itself.  The final column shows the name of the function.

     After the summary, detailed information about every function that
     was invoked is listed, sorted in decreasing order of the amount of
     time spent in each function and its descendants.  Each of these
     entries consists of descriptions for the functions that called the
     function described, the function itself, and the functions that
     were called from it.  The description for the function itself has
     the same format as in the summary (and shows the same information).
     The other lines don't show the number of the function at the
     beginning and have their function named indented to make it easier
     to distinguish the line showing the function described in the
     section from the surrounding lines.

     The information shown in this case is almost the same as in the
     summary, but only refers to the call hierarchy being displayed.
     For example, for a calling function the column showing the total
     running time lists the time spent in the described function and its
     descendants only for the times when it was called from that
     particular calling function.  Likewise, for a called function, this
     columns lists the total time spent in the called function and its
     descendants only for the times when it was called from the function
     described.

     Also in this case, the column showing the number of calls to a
     function also shows a slash and then the total number of
     invocations made to the called function.

     As long as the zsh/zprof module is loaded, profiling will be done
     and multiple invocations of the zprof builtin command will show the
     times and numbers of calls since the module was loaded.  With the
     -c option, the zprof builtin command will reset its internal
     counters and will not show the listing.


File: zsh.info,  Node: The zsh/zpty Module,  Next: The zsh/zselect Module,  Prev: The zsh/zprof Module,  Up: Zsh Modules

22.32 The zsh/zpty Module
=========================

The zsh/zpty module offers one builtin:

zpty [ -e ] [ -b ] NAME [ ARG ... ]
     The arguments following NAME are concatenated with spaces between,
     then executed as a command, as if passed to the eval builtin.  The
     command runs under a newly assigned pseudo-terminal; this is useful
     for running commands non-interactively which expect an interactive
     environment.  The NAME is not part of the command, but is used to
     refer to this command in later calls to zpty.

     With the -e option, the pseudo-terminal is set up so that input
     characters are echoed.

     With the -b option, input to and output from the pseudo-terminal
     are made non-blocking.

zpty -d [ NAMES ... ]
     The second form, with the -d option, is used to delete commands
     previously started, by supplying a list of their NAMEs.  If no
     NAMES are given, all commands are deleted.  Deleting a command
     causes the HUP signal to be sent to the corresponding process.

zpty -w [ -n ] NAME [ STRINGS ... ]
     The -w option can be used to send the to command NAME the given
     STRINGS as input (separated by spaces).  If the -n option is _not_
     given, a newline is added at the end.

     If no STRINGS are provided, the standard input is copied to the
     pseudo-terminal; this may stop before copying the full input if the
     pseudo-terminal is non-blocking.

     Note that the command under the pseudo-terminal sees this input as
     if it were typed, so beware when sending special tty driver
     characters such as word-erase, line-kill, and end-of-file.

zpty -r [ -mt ] NAME [ PARAM [ PATTERN ] ]
     The -r option can be used to read the output of the command NAME.
     With only a NAME argument, the output read is copied to the
     standard output.  Unless the pseudo-terminal is non-blocking,
     copying continues until the command under the pseudo-terminal
     exits; when non-blocking, only as much output as is immediately
     available is copied.  The return status is zero if any output is
     copied.

     When also given a PARAM argument, at most one line is read and
     stored in the parameter named PARAM.  Less than a full line may be
     read if the pseudo-terminal is non-blocking.  The return status is
     zero if at least one character is stored in PARAM.

     If a PATTERN is given as well, output is read until the whole
     string read matches the PATTERN, even in the non-blocking case.
     The return status is zero if the string read matches the pattern,
     or if the command has exited but at least one character could still
     be read.  If the option -m is present, the return status is zero
     only if the pattern matches.  As of this writing, a maximum of one
     megabyte of output can be consumed this way; if a full megabyte is
     read without matching the pattern, the return status is non-zero.

     In all cases, the return status is non-zero if nothing could be
     read, and is 2 if this is because the command has finished.

     If the -r option is combined with the -t option, zpty tests whether
     output is available before trying to read.  If no output is
     available, zpty immediately returns the status 1.  When used with a
     PATTERN, the behaviour on a failed poll is similar to when the
     command has exited: the return value is zero if at least one
     character could still be read even if the pattern failed to match.

zpty -t NAME
     The -t option without the -r option can be used to test whether the
     command NAME is still running.  It returns a zero status if the
     command is running and a non-zero value otherwise.

zpty [ -L ]
     The last form, without any arguments, is used to list the commands
     currently defined.  If the -L option is given, this is done in the
     form of calls to the zpty builtin.


File: zsh.info,  Node: The zsh/zselect Module,  Next: The zsh/zutil Module,  Prev: The zsh/zpty Module,  Up: Zsh Modules

22.33 The zsh/zselect Module
============================

The zsh/zselect module makes available one builtin command:

zselect [ -rwe -t TIMEOUT -a ARRAY ] [ FD ... ]
     The zselect builtin is a front-end to the 'select' system call,
     which blocks until a file descriptor is ready for reading or
     writing, or has an error condition, with an optional timeout.  If
     this is not available on your system, the command prints an error
     message and returns status 2 (normal errors return status 1).  For
     more information, see your systems documentation for man page
     select(3).  Note there is no connection with the shell builtin of
     the same name.

     Arguments and options may be intermingled in any order.  Non-option
     arguments are file descriptors, which must be decimal integers.  By
     default, file descriptors are to be tested for reading, i.e.
     zselect will return when data is available to be read from the file
     descriptor, or more precisely, when a read operation from the file
     descriptor will not block.  After a -r, -w and -e, the given file
     descriptors are to be tested for reading, writing, or error
     conditions.  These options and an arbitrary list of file
     descriptors may be given in any order.

     (The presence of an 'error condition' is not well defined in the
     documentation for many implementations of the select system call.
     According to recent versions of the POSIX specification, it is
     really an _exception_ condition, of which the only standard example
     is out-of-band data received on a socket.  So zsh users are
     unlikely to find the -e option useful.)

     The option '-t TIMEOUT' specifies a timeout in hundredths of a
     second.  This may be zero, in which case the file descriptors will
     simply be polled and zselect will return immediately.  It is
     possible to call zselect with no file descriptors and a non-zero
     timeout for use as a finer-grained replacement for 'sleep'; note,
     however, the return status is always 1 for a timeout.

     The option '-a ARRAY' indicates that array should be set to
     indicate the file descriptor(s) which are ready.  If the option is
     not given, the array reply will be used for this purpose.  The
     array will contain a string similar to the arguments for zselect.
     For example,

          zselect -t 0 -r 0 -w 1

     might return immediately with status 0 and $reply containing '-r 0
     -w 1' to show that both file descriptors are ready for the
     requested operations.

     The option '-A ASSOC' indicates that the associative array assoc
     should be set to indicate the file descriptor(s( which are ready.
     This option overrides the option -a, nor will reply be modified.
     The keys of assoc are the file descriptors, and the corresponding
     values are any of the characters 'rwe' to indicate the condition.

     The command returns status 0 if some file descriptors are ready for
     reading.  If the operation timed out, or a timeout of 0 was given
     and no file descriptors were ready, or there was an error, it
     returns status 1 and the array will not be set (nor modified in any
     way).  If there was an error in the select operation the
     appropriate error message is printed.


File: zsh.info,  Node: The zsh/zutil Module,  Prev: The zsh/zselect Module,  Up: Zsh Modules

22.34 The zsh/zutil Module
==========================

The zsh/zutil module only adds some builtins:

zstyle [ -L [ PATTERN [ STYLE ] ] ]
zstyle [ -e | - | -- ] PATTERN STYLE STRINGS ...
zstyle -d [ PATTERN [ STYLES ... ] ]
zstyle -g NAME [ PATTERN [ STYLE ] ]
zstyle -abs CONTEXT STYLE NAME [ SEP ]
zstyle -Tt CONTEXT STYLE [ STRINGS ...]
zstyle -m CONTEXT STYLE PATTERN
     This builtin command is used to define and lookup styles.  Styles
     are pairs of names and values, where the values consist of any
     number of strings.  They are stored together with patterns and
     lookup is done by giving a string, called the 'context', which is
     compared to the patterns.  The definition stored for the first
     matching pattern will be returned.

     For ordering of comparisons, patterns are searched from most
     specific to least specific, and patterns that are equally specific
     keep the order in which they were defined.  A pattern is considered
     to be more specific than another if it contains more components
     (substrings separated by colons) or if the patterns for the
     components are more specific, where simple strings are considered
     to be more specific than patterns and complex patterns are
     considered to be more specific than the pattern '*'.

     The first form (without arguments) lists the definitions.  Styles
     are shown in alphabetic order and patterns are shown in the order
     zstyle will test them.

     If the -L option is given, listing is done in the form of calls to
     zstyle.  The optional first argument is a pattern which will be
     matched against the string supplied as the pattern for the context;
     note that this means, for example, 'zstyle -L ":completion:*"' will
     match any supplied pattern beginning ':completion:', not just
     ":completion:*": use ":completion:\*" to match that.  The optional
     second argument limits the output to a specific style (not a
     pattern).  -L is not compatible with any other options.

     The other forms are the following:

     zstyle [ - | -- | -e ] PATTERN STYLE STRINGS ...
          Defines the given STYLE for the PATTERN with the STRINGS as
          the value.  If the -e option is given, the STRINGS will be
          concatenated (separated by spaces) and the resulting string
          will be evaluated (in the same way as it is done by the eval
          builtin command) when the style is looked up.  In this case
          the parameter 'reply' must be assigned to set the strings
          returned after the evaluation.  Before evaluating the value,
          reply is unset, and if it is still unset after the evaluation,
          the style is treated as if it were not set.

     zstyle -d [ PATTERN [ STYLES ... ] ]
          Delete style definitions.  Without arguments all definitions
          are deleted, with a PATTERN all definitions for that pattern
          are deleted and if any STYLES are given, then only those
          styles are deleted for the PATTERN.

     zstyle -g NAME [ PATTERN [ STYLE ] ]
          Retrieve a style definition.  The NAME is used as the name of
          an array in which the results are stored.  Without any further
          arguments, all PATTERNS defined are returned.  With a PATTERN
          the styles defined for that pattern are returned and with both
          a PATTERN and a STYLE, the value strings of that combination
          is returned.

     The other forms can be used to look up or test patterns.

     zstyle -s CONTEXT STYLE NAME [ SEP ]
          The parameter NAME is set to the value of the style
          interpreted as a string.  If the value contains several
          strings they are concatenated with spaces (or with the SEP
          string if that is given) between them.

     zstyle -b CONTEXT STYLE NAME
          The value is stored in NAME as a boolean, i.e.  as the string
          'yes' if the value has only one string and that string is
          equal to one of 'yes', 'true', 'on', or '1'.  If the value is
          any other string or has more than one string, the parameter is
          set to 'no'.

     zstyle -a CONTEXT STYLE NAME
          The value is stored in NAME as an array.  If NAME is declared
          as an associative array, the first, third, etc.  strings are
          used as the keys and the other strings are used as the values.

     zstyle -t CONTEXT STYLE [ STRINGS ...]
     zstyle -T CONTEXT STYLE [ STRINGS ...]
          Test the value of a style, i.e.  the -t option only returns a
          status (sets $?).  Without any STRINGS the return status is
          zero if the style is defined for at least one matching
          pattern, has only one string in its value, and that is equal
          to one of 'true', 'yes', 'on' or '1'.  If any STRINGS are
          given the status is zero if and only if at least one of the
          STRINGS is equal to at least one of the strings in the value.
          If the style is defined but doesn't match, the return status
          is 1.  If the style is not defined, the status is 2.

          The -T option tests the values of the style like -t, but it
          returns status zero (rather than 2) if the style is not
          defined for any matching pattern.

     zstyle -m CONTEXT STYLE PATTERN
          Match a value.  Returns status zero if the PATTERN matches at
          least one of the strings in the value.

zformat -f PARAM FORMAT SPECS ...
zformat -a ARRAY SEP SPECS ...
     This builtin provides two different forms of formatting.  The first
     form is selected with the -f option.  In this case the FORMAT
     string will be modified by replacing sequences starting with a
     percent sign in it with strings from the SPECS.  Each SPEC should
     be of the form 'CHAR:STRING' which will cause every appearance of
     the sequence '%CHAR' in FORMAT to be replaced by the STRING.  The
     '%' sequence may also contain optional minimum and maximum field
     width specifications between the '%' and the 'CHAR' in the form
     '%MIN.MAXc', i.e.  the minimum field width is given first and if
     the maximum field width is used, it has to be preceded by a dot.
     Specifying a minimum field width makes the result be padded with
     spaces to the right if the STRING is shorter than the requested
     width.  Padding to the left can be achieved by giving a negative
     minimum field width.  If a maximum field width is specified, the
     STRING will be truncated after that many characters.  After all '%'
     sequences for the given SPECS have been processed, the resulting
     string is stored in the parameter PARAM.

     The %-escapes also understand ternary expressions in the form used
     by prompts.  The % is followed by a '(' and then an ordinary format
     specifier character as described above.  There may be a set of
     digits either before or after the '('; these specify a test number,
     which defaults to zero.  Negative numbers are also allowed.  An
     arbitrary delimiter character follows the format specifier, which
     is followed by a piece of 'true' text, the delimiter character
     again, a piece of 'false' text, and a closing parenthesis.  The
     complete expression (without the digits) thus looks like
     '%(X.TEXT1.TEXT2)', except that the '.' character is arbitrary.
     The value given for the format specifier in the CHAR:STRING
     expressions is evaluated as a mathematical expression, and compared
     with the test number.  If they are the same, TEXT1 is output, else
     TEXT2 is output.  A parenthesis may be escaped in TEXT2 as %).
     Either of TEXT1 or TEXT2 may contain nested %-escapes.

     For example:

          zformat -f REPLY "The answer is '%3(c.yes.no)'." c:3

     outputs "The answer is 'yes'."  to REPLY since the value for the
     format specifier c is 3, agreeing with the digit argument to the
     ternary expression.

     The second form, using the -a option, can be used for aligning
     strings.  Here, the SPECS are of the form 'LEFT:RIGHT' where 'LEFT'
     and 'RIGHT' are arbitrary strings.  These strings are modified by
     replacing the colons by the SEP string and padding the LEFT strings
     with spaces to the right so that the SEP strings in the result (and
     hence the RIGHT strings after them) are all aligned if the strings
     are printed below each other.  All strings without a colon are left
     unchanged and all strings with an empty RIGHT string have the
     trailing colon removed.  In both cases the lengths of the strings
     are not used to determine how the other strings are to be aligned.
     The resulting strings are stored in the ARRAY.

zregexparse
     This implements some internals of the _regex_arguments function.

zparseopts [ -D ] [ -K ] [ -M ] [ -E ] [ -a ARRAY ] [ -A ASSOC ] SPECS
     This builtin simplifies the parsing of options in positional
     parameters, i.e.  the set of arguments given by $*.  Each SPEC
     describes one option and must be of the form 'OPT[=ARRAY]'.  If an
     option described by OPT is found in the positional parameters it is
     copied into the ARRAY specified with the -a option; if the optional
     '=ARRAY' is given, it is instead copied into that array.

     Note that it is an error to give any SPEC without an '=ARRAY'
     unless one of the -a or -A options is used.

     Unless the -E option is given, parsing stops at the first string
     that isn't described by one of the SPECS.  Even with -E, parsing
     always stops at a positional parameter equal to '-' or '--'.

     The OPT description must be one of the following.  Any of the
     special characters can appear in the option name provided it is
     preceded by a backslash.

     NAME
     NAME+
          The NAME is the name of the option without the leading '-'.
          To specify a GNU-style long option, one of the usual two
          leading '-' must be included in NAME; for example, a '--file'
          option is represented by a NAME of '-file'.

          If a '+' appears after NAME, the option is appended to ARRAY
          each time it is found in the positional parameters; without
          the '+' only the _last_ occurrence of the option is preserved.

          If one of these forms is used, the option takes no argument,
          so parsing stops if the next positional parameter does not
          also begin with '-' (unless the -E option is used).

     NAME:
     NAME:-
     NAME::
          If one or two colons are given, the option takes an argument;
          with one colon, the argument is mandatory and with two colons
          it is optional.  The argument is appended to the ARRAY after
          the option itself.

          An optional argument is put into the same array element as the
          option name (note that this makes empty strings as arguments
          indistinguishable).  A mandatory argument is added as a
          separate element unless the ':-' form is used, in which case
          the argument is put into the same element.

          A '+' as described above may appear between the NAME and the
          first colon.

     The options of zparseopts itself are:

     -a ARRAY
          As described above, this names the default array in which to
          store the recognised options.

     -A ASSOC
          If this is given, the options and their values are also put
          into an associative array with the option names as keys and
          the arguments (if any) as the values.

     -D
          If this option is given, all options found are removed from
          the positional parameters of the calling shell or shell
          function, up to but not including any not described by the
          SPECS.  This is similar to using the shift builtin.

     -K
          With this option, the arrays specified with the -a option and
          with the '=ARRAY' forms are kept unchanged when none of the
          SPECS for them is used.  Otherwise the entire array is
          replaced when any of the SPECS is used.  Individual elements
          of associative arrays specified with the -A option are
          preserved by -K.  This allows assignment of default values to
          arrays before calling zparseopts.

     -M
          This changes the assignment rules to implement a map among
          equivalent option names.  If any SPEC uses the '=ARRAY' form,
          the string ARRAY is interpreted as the name of another SPEC,
          which is used to choose where to store the values.  If no
          other SPEC is found, the values are stored as usual.  This
          changes only the way the values are stored, not the way $* is
          parsed, so results may be unpredicable if the 'NAME+'
          specifier is used inconsistently.

     -E
          This changes the parsing rules to _not_ stop at the first
          string that isn't described by one of the SPECs.  It can be
          used to test for or (if used together with -D) extract options
          and their arguments, ignoring all other options and arguments
          that may be in the positional parameters.

     For example,

          set -- -a -bx -c y -cz baz -cend
          zparseopts a=foo b:=bar c+:=bar

     will have the effect of

          foo=(-a)
          bar=(-b x -c y -c z)

     The arguments from 'baz' on will not be used.

     As an example for the -E option, consider:

          set -- -a x -b y -c z arg1 arg2
          zparseopts -E -D b:=bar

     will have the effect of

          bar=(-b y)
          set -- -a x -c z arg1 arg2

     I.e., the option -b and its arguments are taken from the positional
     parameters and put into the array bar.

     The -M option can be used like this:

          set -- -a -bx -c y -cz baz -cend
          zparseopts -A bar -M a=foo b+: c:=b

     to have the effect of

          foo=(-a)
          bar=(-a '' -b xyz)


File: zsh.info,  Node: Calendar Function System,  Next: TCP Function System,  Prev: Zsh Modules,  Up: Top

23 Calendar Function System
***************************

23.1 Description
================

The shell is supplied with a series of functions to replace and enhance
the traditional Unix calendar programme, which warns the user of
imminent or future events, details of which are stored in a text file
(typically calendar in the user's home directory).  The version provided
here includes a mechanism for alerting the user when an event is due.

In addition a function age is provided that can be used in a glob
qualifier; it allows files to be selected based on their modification
times.

The format of the calendar file and the dates used there in and in the
age function are described first, then the functions that can be called
to examine and modify the calendar file.

The functions here depend on the availability of the zsh/datetime module
which is usually installed with the shell.  The library function
strptime() must be available; it is present on most recent operating
systems.

* Menu:

* Calendar File and Date Formats::
* Calendar System User Functions::
* Calendar Styles::
* Calendar Utility Functions::
* Calendar Bugs::


File: zsh.info,  Node: Calendar File and Date Formats,  Next: Calendar System User Functions,  Up: Calendar Function System

23.2 File and Date Formats
==========================

23.2.1 Calendar File Format
---------------------------

The calendar file is by default ~/calendar.  This can be configured by
the calendar-file style, see *note Calendar Styles::.  The basic format
consists of a series of separate lines, with no indentation, each
including a date and time specification followed by a description of the
event.

Various enhancements to this format are supported, based on the syntax
of Emacs calendar mode.  An indented line indicates a continuation line
that continues the description of the event from the preceding line
(note the date may not be continued in this way).  An initial ampersand
(&) is ignored for compatibility.

An indented line on which the first non-whitespace character is # is not
displayed with the calendar entry, but is still scanned for information.
This can be used to hide information useful to the calendar system but
not to the user, such as the unique identifier used by calendar_add.

The Emacs extension that a date with no description may refer to a
number of succeeding events at different times is not supported.

Unless the done-file style has been altered, any events which have been
processed are appended to the file with the same name as the calendar
file with the suffix .done, hence ~/calendar.done by default.

An example is shown below.

23.2.2 Date Format
------------------

The format of the date and time is designed to allow flexibility without
admitting ambiguity.  (The words 'date' and 'time' are both used in the
documentation below; except where specifically noted this implies a
string that may include both a date and a time specification.)  Note
that there is no localization support; month and day names must be in
English and separator characters are fixed.  Matching is case
insensitive, and only the first three letters of the names are
significant, although as a special case a form beginning "month" does
not match "Monday".  Furthermore, time zones are not handled; all times
are assumed to be local.

It is recommended that, rather than exploring the intricacies of the
system, users find a date format that is natural to them and stick to
it.  This will avoid unexpected effects.  Various key facts should be
noted.

   * In particular, note the confusion between MONTH/DAY/YEAR and
     DAY/MONTH/YEAR when the month is numeric; these formats should be
     avoided if at all possible.  Many alternatives are available.
   * The year must be given in full to avoid confusion, and only years
     from 1900 to 2099 inclusive are matched.

The following give some obvious examples; users finding here a format
they like and not subject to vagaries of style may skip the full
description.  As dates and times are matched separately (even though the
time may be embedded in the date), any date format may be mixed with any
format for the time of day provide the separators are clear (whitespace,
colons, commas).

     2007/04/03 13:13
     2007/04/03:13:13
     2007/04/03 1:13 pm
     3rd April 2007, 13:13
     April 3rd 2007 1:13 p.m.
     Apr 3, 2007 13:13
     Tue Apr 03 13:13:00 2007
     13:13 2007/apr/3

More detailed rules follow.

Times are parsed and extracted before dates.  They must use colons to
separate hours and minutes, though a dot is allowed before seconds if
they are present.  This limits time formats to the following:

   * HH:MM[:SS[.FFFFF]] [am|pm|a.m.|p.m.]
   * HH:MM.SS[.FFFFF] [am|pm|a.m.|p.m.]

Here, square brackets indicate optional elements, possibly with
alternatives.  Fractions of a second are recognised but ignored.  For
absolute times (the normal format require by the calendar file and the
age function) a date is mandatory but a time of day is not; the time
returned is at the start of the date.  One variation is allowed: if a.m.
or p.m. or one of their variants is present, an hour without a minute is
allowed, e.g.  3 p.m..

Time zones are not handled, though if one is matched following a time
specification it will be removed to allow a surrounding date to be
parsed.  This only happens if the format of the timezone is not too
unusual.  The following are examples of forms that are understood:

     +0100
     GMT
     GMT-7
     CET+1CDT

Any part of the timezone that is not numeric must have exactly three
capital letters in the name.

Dates suffer from the ambiguity between DD/MM/YYYY and MM/DD/YYYY.  It
is recommended this form is avoided with purely numeric dates, but use
of ordinals, eg.  3rd/04/2007, will resolve the ambiguity as the ordinal
is always parsed as the day of the month.  Years must be four digits
(and the first two must be 19 or 20); 03/04/08 is not recognised.  Other
numbers may have leading zeroes, but they are not required.  The
following are handled:

   * YYYY/MM/DD
   * YYYY-MM-DD
   * YYYY/MNM/DD
   * YYYY-MNM-DD
   * DD[th|st|rd] MNM[,] [ YYYY ]
   * MNM DD[th|st|rd][,] [ YYYY ]
   * DD[th|st|rd]/MM[,] YYYY
   * DD[th|st|rd]/MM/YYYY
   * MM/DD[th|st|rd][,] YYYY
   * MM/DD[th|st|rd]/YYYY

Here, MNM is at least the first three letters of a month name, matched
case-insensitively.  The remainder of the month name may appear but its
contents are irrelevant, so janissary, febrile, martial, apricot, maybe,
junta, etc.  are happily handled.

Where the year is shown as optional, the current year is assumed.  There
are only two such cases, the form Jun 20 or 14 September (the only two
commonly occurring forms, apart from a "the" in some forms of English,
which isn't currently supported).  Such dates will of course become
ambiguous in the future, so should ideally be avoided.

Times may follow dates with a colon, e.g.  1965/07/12:09:45; this is in
order to provide a format with no whitespace.  A comma and whitespace
are allowed, e.g.  1965/07/12, 09:45.  Currently the order of these
separators is not checked, so illogical formats such as 1965/07/12, :
,09:45 will also be matched.  For simplicity such variations are not
shown in the list above.  Otherwise, a time is only recognised as being
associated with a date if there is only whitespace in between, or if the
time was embedded in the date.

Days of the week are not normally scanned, but will be ignored if they
occur at the start of the date pattern only.  However, in contexts where
it is useful to specify dates relative to today, days of the week with
no other date specification may be given.  The day is assumed to be
either today or within the past week.  Likewise, the words yesterday,
today and tomorrow are handled.  All matches are case-insensitive.
Hence if today is Monday, then Sunday is equivalent to yesterday, Monday
is equivalent to today, but Tuesday gives a date six days ago.  This is
not generally useful within the calendar file.  Dates in this format may
be combined with a time specification; for example Tomorrow, 8 p.m..

For example, the standard date format:

     Fri Aug 18 17:00:48 BST 2006

is handled by matching HH:MM:SS and removing it together with the
matched (but unused) time zone.  This leaves the following:

     Fri Aug 18 2006

Fri is ignored and the rest is matched according to the standard rules.

23.2.3 Relative Time Format
---------------------------

In certain places relative times are handled.  Here, a date is not
allowed; instead a combination of various supported periods are allowed,
together with an optional time.  The periods must be in order from most
to least significant.

In some cases, a more accurate calculation is possible when there is an
anchor date: offsets of months or years pick the correct day, rather
than being rounded, and it is possible to pick a particular day in a
month as '(1st Friday)', etc., as described in more detail below.

Anchors are available in the following cases.  If one or two times are
passed to the function calendar, the start time acts an anchor for the
end time when the end time is relative (even if the start time is
implicit).  When examining calendar files, the scheduled event being
examined anchors the warning time when it is given explicitly by means
of the WARN keyword; likewise, the scheduled event anchors a repetition
period when given by the RPT keyword, so that specifications such as RPT
2 months, 3rd Thursday are handled properly.  Finally, the -R argument
to calendar_scandate directly provides an anchor for relative
calculations.

The periods handled, with possible abbreviations are:

Years
     years, yrs, ys, year, yr, y, yearly.  A year is 365.25 days unless
     there is an anchor.

Months
     months, mons, mnths, mths, month, mon, mnth, mth, monthly.  Note
     that m, ms, mn, mns are ambiguous and are _not_ handled.  A month
     is a period of 30 days rather than a calendar month unless there is
     an anchor.

Weeks
     weeks, wks, ws, week, wk, w, weekly

Days
     days, dys, ds, day, dy, d, daily

Hours
     hours, hrs, hs, hour, hr, h, hourly

Minutes
     minutes, mins, minute, min, but _not_ m, ms, mn or mns

Seconds
     seconds, secs, ss, second, sec, s

Spaces between the numbers are optional, but are required between items,
although a comma may be used (with or without spaces).

The forms yearly to hourly allow the number to be omitted; it is assumed
to be 1.  For example, 1 d and daily are equivalent.  Note that using
those forms with plurals is confusing; 2 yearly is the same as 2 years,
_not_ twice yearly, so it is recommended they only be used without
numbers.

When an anchor time is present, there is an extension to handle regular
events in the form of the Nth SOMEday of the month.  Such a
specification must occur immediately after any year and month
specification, but before any time of day, and must be in the form
N(th|st|rd) DAY, for example 1st Tuesday or 3rd Monday.  As in other
places, days are matched case insensitively, must be in English, and
only the first three letters are significant except that a form
beginning 'month' does not match 'Monday'.  No attempt is made to
sanitize the resulting date; attempts to squeeze too many occurrences
into a month will push the day into the next month (but in the obvious
fashion, retaining the correct day of the week).

Here are some examples:

     30 years 3 months 4 days 3:42:41
     14 days 5 hours
     Monthly, 3rd Thursday
     4d,10hr

23.2.4 Example
--------------

Here is an example calendar file.  It uses a consistent date format, as
recommended above.

     Feb 1, 2006 14:30 Pointless bureaucratic meeting
     Mar 27, 2006 11:00 Mutual recrimination and finger pointing
       Bring water pistol and waterproofs
     Mar 31, 2006 14:00 Very serious managerial pontification
       # UID 12C7878A9A50
     Apr 10, 2006 13:30 Even more pointless blame assignment exercise WARN 30 mins
     May 18, 2006 16:00 Regular moaning session RPT monthly, 3rd Thursday

The second entry has a continuation line.  The third entry has a
continuation line that will not be shown when the entry is displayed,
but the unique identifier will be used by the calendar_add function when
updating the event.  The fourth entry will produce a warning 30 minutes
before the event (to allow you to equip yourself appropriately).  The
fifth entry repeats after a month on the 3rd Thursday, i.e.  June 15,
2006, at the same time.


File: zsh.info,  Node: Calendar System User Functions,  Next: Calendar Styles,  Prev: Calendar File and Date Formats,  Up: Calendar Function System

23.3 User Functions
===================

This section describes functions that are designed to be called directly
by the user.  The first part describes those functions associated with
the user's calendar; the second part describes the use in glob
qualifiers.

23.3.1 Calendar system functions
--------------------------------

calendar [ -abdDsv ] [ -C CALFILE ] [ -n NUM ] [ -S SHOWPROG ] [ [ START ] END ](
calendar -r [ -abdDrsv ] [ -C CALFILE ] [ -n NUM ] [ -S SHOWPROG ] [ START ]
     Show events in the calendar.

     With no arguments, show events from the start of today until the
     end of the next working day after today.  In other words, if today
     is Friday, Saturday, or Sunday, show up to the end of the following
     Monday, otherwise show today and tomorrow.

     If END is given, show events from the start of today up to the time
     and date given, which is in the format described in the previous
     section.  Note that if this is a date the time is assumed to be
     midnight at the start of the date, so that effectively this shows
     all events before the given date.

     END may start with a +, in which case the remainder of the
     specification is a relative time format as described in the
     previous section indicating the range of time from the start time
     that is to be included.

     If START is also given, show events starting from that time and
     date.  The word now can be used to indicate the current time.

     To implement an alert when events are due, include calendar -s in
     your ~/.zshrc file.

     Options:

     -a
          Show all items in the calendar, regardless of the start and
          end.

     -b
          Brief: don't display continuation lines (i.e.  indented lines
          following the line with the date/time), just the first line.

     -B LINES
          Brief: display at most the first LINES lines of the calendar
          entry.  '-B 1' is equivalent to '-b'.

     -C CALFILE
          Explicitly specify a calendar file instead of the value of the
          calendar-file style or the default ~/calendar.

     -d
          Move any events that have passed from the calendar file to the
          "done" file, as given by the done-file style or the default
          which is the calendar file with .done appended.  This option
          is implied by the -s option.

     -D
          Turns off the option -d, even if the -s option is also
          present.

     -n NUM, -NUM
          Show at least NUM events, if present in the calendar file,
          regardless of the start and end.

     -r
          Show all the remaining options in the calendar, ignoring the
          given end time.  The start time is respected; any argument
          given is treated as a start time.

     -s
          Use the shell's sched command to schedule a timed event that
          will warn the user when an event is due.  Note that the sched
          command only runs if the shell is at an interactive prompt; a
          foreground task blocks the scheduled task from running until
          it is finished.

          The timed event usually runs the programme calendar_show to
          show the event, as described in *note Calendar Utility
          Functions::.

          By default, a warning of the event is shown five minutes
          before it is due.  The warning period can be configured by the
          style warn-time or for a single calendar entry by including
          WARN RELTIME in the first line of the entry, where RELTIME is
          one of the usual relative time formats.

          A repeated event may be indicated by including RPT RELDATE in
          the first line of the entry.  After the scheduled event has
          been displayed it will be re-entered into the calendar file at
          a time RELDATE after the existing event.  Note that this is
          currently the only use made of the repeat count, so that it is
          not possible to query the schedule for a recurrence of an
          event in the calendar until the previous event has passed.

          If RPT is used, it is also possible to specify that certain
          recurrences of an event are rescheduled or cancelled.  This is
          done with the OCCURRENCE keyword, followed by whitespace and
          the date and time of the occurrence in the regular sequence,
          followed by whitespace and either the date and time of the
          rescheduled event or the exact string CANCELLED.  In this case
          the date and time must be in exactly the "date with local
          time" format used by the text/calendar MIME type (RFC 2445),
          <YYYY><MM><DD>T<HH><MM><SS> (note the presence of the literal
          character T).  The first word (the regular recurrence) may be
          something other than a proper date/time to indicate that the
          event is additional to the normal sequence; a convention that
          retains the formatting appearance is XXXXXXXXTXXXXXX.

          Furthermore, it is useful to record the next regular
          recurrence (as then the displayed date may be for a
          rescheduled event so cannot be used for calculating the
          regular sequence).  This is specified by RECURRENCE and a time
          or date in the same format.  calendar_add adds such an
          indication when it encounters a recurring event that does not
          include one, based on the headline date/time.

          If calendar_add is used to update occurrences the UID keyword
          described there should be present in both the existing entry
          and the added occurrence in order to identify recurring event
          sequences.

          For example,

               Thu May 6, 2010 11:00 Informal chat RPT 1 week
                 # RECURRENCE 20100506T110000
                 # OCCURRENCE 20100513T110000 20100513T120000
                 # OCCURRENCE 20100520T110000 CANCELLED

          The event that occurs at 11:00 on 13th May 2010 is rescheduled
          an hour later.  The event that occurs a week later is
          cancelled.  The occurrences are given on a continuation line
          starting with a # character so will not usually be displayed
          as part of the event.  As elsewhere, no account of time zones
          is taken with the times.  After the next event occurs the
          headline date/time will be 'Thu May 13, 2010 12:00' while the
          RECURRENCE date/time will be '20100513T110000' (note that
          cancelled and moved events are not taken account of in the
          RECURRENCE, which records what the next regular recurrence is,
          but they are accounted for in the headline date/time).

          It is safe to run calendar -s to reschedule an existing event
          (if the calendar file has changed, for example), and also to
          have it running in multiples instances of the shell since the
          calendar file is locked when in use.

          By default, expired events are moved to the "done" file; see
          the -d option.  Use -D to prevent this.

     -S SHOWPROG
          Explicitly specify a programme to be used for showing events
          instead of the value of the show-prog style or the default
          calendar_show.

     -v
          Verbose: show more information about stages of processing.
          This is useful for confirming that the function has
          successfully parsed the dates in the calendar file.

calendar_add [ -BL ] EVENT ...
     Adds a single event to the calendar in the appropriate location.
     The event can contain multiple lines, as described in *note
     Calendar File and Date Formats::.  Using this function ensures that
     the calendar file is sorted in date and time order.  It also makes
     special arrangements for locking the file while it is altered.  The
     old calendar is left in a file with the suffix .old.

     The option -B indicates that backing up the calendar file will be
     handled by the caller and should not be performed by calendar_add.
     The option -L indicates that calendar_add does not need to lock the
     calendar file as it is already locked.  These options will not
     usually be needed by users.

     If the style reformat-date is true, the date and time of the new
     entry will be rewritten into the standard date format: see the
     descriptions of this style and the style date-format.

     The function can use a unique identifier stored with each event to
     ensure that updates to existing events are treated correctly.  The
     entry should contain the word UID, followed by whitespace, followed
     by a word consisting entirely of hexadecimal digits of arbitrary
     length (all digits are significant, including leading zeroes).  As
     the UID is not directly useful to the user, it is convenient to
     hide it on an indented continuation line starting with a #, for
     example:

          Aug 31, 2007 09:30  Celebrate the end of the holidays
            # UID 045B78A0

     The second line will not be shown by the calendar function.

     It is possible to specify the RPT keyword followed by CANCELLED
     instead of a relative time.  This causes any matched event or
     series of events to be cancelled (the original event does not have
     to be marked as recurring in order to be cancelled by this method).
     A UID is required in order to match an existing event in the
     calendar.

     calendar_add will attempt to manage recurrences and occurrences of
     repeating events as described for event scheduling by calendar -s
     above.  To reschedule or cancel a single event calendar_add should
     be called with an entry that includes the correct UID but does
     _not_ include the RPT keyword as this is taken to mean the entry
     applies to a series of repeating events and hence replaces all
     existing information.  Each rescheduled or cancelled occurrence
     must have an OCCURRENCE keyword in the entry passed to calendar_add
     which will be merged into the calendar file.  Any existing
     reference to the occurrence is replaced.  An occurrence that does
     not refer to a valid existing event is added as a one-off
     occurrence to the same calendar entry.

calendar_edit
     This calls the user's editor to edit the calendar file.  If there
     are arguments, they are taken as the editor to use (the file name
     is appended to the commands); otherwise, the editor is given by the
     variable VISUAL, if set, else the variable EDITOR.

     If the calendar scheduler was running, then after editing the file
     calendar -s is called to update it.

     This function locks out the calendar system during the edit.  Hence
     it should be used to edit the calendar file if there is any
     possibility of a calendar event occurring meanwhile.  Note this can
     lead to another shell with calendar functions enabled hanging
     waiting for a lock, so it is necessary to quit the editor as soon
     as possible.

calendar_parse CALENDAR-ENTRY
     This is the internal function that analyses the parts of a calendar
     entry, which is passed as the only argument.  The function returns
     status 1 if the argument could not be parsed as a calendar entry
     and status 2 if the wrong number of arguments were passed; it also
     sets the parameter reply to an empty associative array.  Otherwise,
     it returns status 0 and sets elements of the associative array
     reply as follows:

     time
          The time as a string of digits in the same units as
          $EPOCHSECONDS
     schedtime
          The regularly scheduled time.  This may differ from the actual
          event time time if this is a recurring event and the next
          occurrence has been rescheduled.  Then time gives the actual
          time and schedtime the time of the regular recurrence before
          modification.
     text1
          The text from the line not including the date and time of the
          event, but including any WARN or RPT keywords and values.
     warntime
          Any warning time given by the WARN keyword as a string of
          digits containing the time at which to warn in the same units
          as $EPOCHSECONDS.  (Note this is an absolute time, not the
          relative time passed down.)  Not set no WARN keyword and value
          were matched.
     warnstr
          The raw string matched after the WARN keyword, else unset.
     rpttime
          Any recurrence time given by the RPT keyword as a string of
          digits containing the time of the recurrence in the same units
          as $EPOCHSECONDS.  (Note this is an absolute time.)  Not set
          if no RPT keyword and value were matched.
     schedrpttime
          The next regularly scheduled occurrence of a recurring event
          before modification.  This may differ from rpttime, which is
          the actual time of the event that may have been rescheduled
          from the regular time.
     rptstr
          The raw string matched after the RPT keyword, else unset.
     text2
          The text from the line after removal of the date and any
          keywords and values.

calendar_showdate [ -r ] [ -f FMT ] DATE-SPEC ...
     The given DATE-SPEC is interpreted and the corresponding date and
     time printed.  If the initial DATE-SPEC begins with a + or - it is
     treated as relative to the current time; DATE-SPECs after the first
     are treated as relative to the date calculated so far and a leading
     + is optional in that case.  This allows one to use the system as a
     date calculator.  For example, calendar_showdate '+1 month, 1st
     Friday' shows the date of the first Friday of next month.

     With the option -r nothing is printed but the value of the date and
     time in seconds since the epoch is stored in the parameter REPLY.

     With the option -f FMT the given date/time conversion format is
     passed to strftime; see notes on the date-format style below.

     In order to avoid ambiguity with negative relative date
     specifications, options must occur in separate words; in other
     words, -r and -f should not be combined in the same word.

calendar_sort
     Sorts the calendar file into date and time order.  The old calendar
     is left in a file with the suffix .old.

23.3.2 Glob qualifiers
----------------------

The function age can be autoloaded and use separately from the calendar
system, although it uses the function calendar_scandate for date
formatting.  It requires the zsh/stat builtin, but uses only the builtin
zstat.

age selects files having a given modification time for use as a glob
qualifier.  The format of the date is the same as that understood by the
calendar system, described in *note Calendar File and Date Formats::.

The function can take one or two arguments, which can be supplied either
directly as command or arguments, or separately as shell parameters.

     print *(e:age 2006/10/04 2006/10/09:)

The example above matches all files modified between the start of those
dates.  The second argument may alternatively be a relative time
introduced by a +:

     print *(e:age 2006/10/04 +5d:)

The example above is equivalent to the previous example.

In addition to the special use of days of the week, today and yesterday,
times with no date may be specified; these apply to today.  Obviously
such uses become problematic around midnight.

     print *(e-age 12:00 13:30-)

The example above shows files modified between 12:00 and 13:00 today.

     print *(e:age 2006/10/04:)

The example above matches all files modified on that date.  If the
second argument is omitted it is taken to be exactly 24 hours after the
first argument (even if the first argument contains a time).

     print *(e-age 2006/10/04:10:15 2006/10/04:10:45-)

The example above supplies times.  Note that whitespace within the time
and date specification must be quoted to ensure age receives the correct
arguments, hence the use of the additional colon to separate the date
and time.

     AGEREF=2006/10/04:10:15
     AGEREF2=2006/10/04:10:45
     print *(+age)

This shows the same example before using another form of argument
passing.  The dates and times in the parameters AGEREF and AGEREF2 stay
in effect until unset, but will be overridden if any argument is passed
as an explicit argument to age.  Any explicit argument causes both
parameters to be ignored.

Instead of an explicit date and time, it's possible to use the
modification time of a file as the date and time for either argument by
introducing the file name with a colon:

     print *(e-age :file1-)

matches all files created on the same day (24 hours starting from
midnight) as file1.

     print *(e-age :file1 :file2-)

matches all files modified no earlier than file1 and no later than
file2; precision here is to the nearest second.


File: zsh.info,  Node: Calendar Styles,  Next: Calendar Utility Functions,  Prev: Calendar System User Functions,  Up: Calendar Function System

23.4 Styles
===========

The zsh style mechanism using the zstyle command is describe in *note
The zsh/zutil Module::.  This is the same mechanism used in the
completion system.

The styles below are all examined in the context :datetime:FUNCTION:,
for example :datetime:calendar:.

calendar-file
     The location of the main calendar.  The default is ~/calendar.

date-format
     A strftime format string (see man page strftime(3)) with the zsh
     extensions providing various numbers with no leading zero or space
     if the number is a single digit as described for the %D{STRING}
     prompt format in *note Prompt Expansion::.

     This is used for outputting dates in calendar, both to support the
     -v option and when adding recurring events back to the calendar
     file, and in calendar_showdate as the final output format.

     If the style is not set, the default used is similar the standard
     system format as output by the date command (also known as 'ctime
     format'): '%a %b %d %H:%M:%S %Z %Y'.

done-file
     The location of the file to which events which have passed are
     appended.  The default is the calendar file location with the
     suffix .done.  The style may be set to an empty string in which
     case a "done" file will not be maintained.

reformat-date
     Boolean, used by calendar_add.  If it is true, the date and time of
     new entries added to the calendar will be reformatted to the format
     given by the style date-format or its default.  Only the date and
     time of the event itself is reformatted; any subsidiary dates and
     times such as those associated with repeat and warning times are
     left alone.

show-prog
     The programme run by calendar for showing events.  It will be
     passed the start time and stop time of the events requested in
     seconds since the epoch followed by the event text.  Note that
     calendar -s uses a start time and stop time equal to one another to
     indicate alerts for specific events.

     The default is the function calendar_show.

warn-time
     The time before an event at which a warning will be displayed, if
     the first line of the event does not include the text EVENT
     RELTIME.  The default is 5 minutes.


File: zsh.info,  Node: Calendar Utility Functions,  Next: Calendar Bugs,  Prev: Calendar Styles,  Up: Calendar Function System

23.5 Utility functions
======================

calendar_lockfiles
     Attempt to lock the files given in the argument.  To prevent
     problems with network file locking this is done in an ad hoc
     fashion by attempting to create a symbolic link to the file with
     the name FILE.lockfile.  No other system level functions are used
     for locking, i.e.  the file can be accessed and modified by any
     utility that does not use this mechanism.  In particular, the user
     is not prevented from editing the calendar file at the same time
     unless calendar_edit is used.

     Three attempts are made to lock the file before giving up.  If the
     module zsh/zselect is available, the times of the attempts are
     jittered so that multiple instances of the calling function are
     unlikely to retry at the same time.

     The files locked are appended to the array lockfiles, which should
     be local to the caller.

     If all files were successfully locked, status zero is returned,
     else status one.

     This function may be used as a general file locking function,
     although this will only work if only this mechanism is used to lock
     files.

calendar_read
     This is a backend used by various other functions to parse the
     calendar file, which is passed as the only argument.  The array
     calendar_entries is set to the list of events in the file; no
     pruning is done except that ampersands are removed from the start
     of the line.  Each entry may contain multiple lines.

calendar_scandate
     This is a generic function to parse dates and times that may be
     used separately from the calendar system.  The argument is a date
     or time specification as described in *note Calendar File and Date
     Formats::.  The parameter REPLY is set to the number of seconds
     since the epoch corresponding to that date or time.  By default,
     the date and time may occur anywhere within the given argument.

     Returns status zero if the date and time were successfully parsed,
     else one.

     Options:
     -a
          The date and time are anchored to the start of the argument;
          they will not be matched if there is preceding text.

     -A
          The date and time are anchored to both the start and end of
          the argument; they will not be matched if the is any other
          text in the argument.

     -d
          Enable additional debugging output.

     -m
          Minus.  When -R ANCHOR_TIME is also given the relative time is
          calculated backwards from ANCHOR_TIME.

     -r
          The argument passed is to be parsed as a relative time.

     -R ANCHOR_TIME
          The argument passed is to be parsed as a relative time.  The
          time is relative to ANCHOR_TIME, a time in seconds since the
          epoch, and the returned value is the absolute time
          corresponding to advancing ANCHOR_TIME by the relative time
          given.  This allows lengths of months to be correctly taken
          into account.  If the final day does not exist in the given
          month, the last day of the final month is given.  For example,
          if the anchor time is during 31st January 2007 and the
          relative time is 1 month, the final time is the same time of
          day during 28th February 2007.

     -s
          In addition to setting REPLY, set REPLY2 to the remainder of
          the argument after the date and time have been stripped.  This
          is empty if the option -A was given.

     -t
          Allow a time with no date specification.  The date is assumed
          to be today.  The behaviour is unspecified if the iron tongue
          of midnight is tolling twelve.

calendar_show
     The function used by default to display events.  It accepts a start
     time and end time for events, both in epoch seconds, and an event
     description.

     The event is always printed to standard output.  If the command
     line editor is active (which will usually be the case) the command
     line will be redisplayed after the output.

     If the parameter DISPLAY is set and the start and end times are the
     same (indicating a scheduled event), the function uses the command
     xmessage to display a window with the event details.


File: zsh.info,  Node: Calendar Bugs,  Prev: Calendar Utility Functions,  Up: Calendar Function System

23.6 Bugs
=========

As the system is based entirely on shell functions (with a little
support from the zsh/datetime module) the mechanisms used are not as
robust as those provided by a dedicated calendar utility.  Consequently
the user should not rely on the shell for vital alerts.

There is no calendar_delete function.

There is no localization support for dates and times, nor any support
for the use of time zones.

Relative periods of months and years do not take into account the
variable number of days.

The calendar_show function is currently hardwired to use xmessage for
displaying alerts on X Window System displays.  This should be
configurable and ideally integrate better with the desktop.

calendar_lockfiles hangs the shell while waiting for a lock on a file.
If called from a scheduled task, it should instead reschedule the event
that caused it.


File: zsh.info,  Node: TCP Function System,  Next: Zftp Function System,  Prev: Calendar Function System,  Up: Top

24 TCP Function System
**********************

24.1 Description
================

A module zsh/net/tcp is provided to provide network I/O over TCP/IP from
within the shell; see its description in *note Zsh Modules:: .  This
manual page describes a function suite based on the module.  If the
module is installed, the functions are usually installed at the same
time, in which case they will be available for autoloading in the
default function search path.  In addition to the zsh/net/tcp module,
the zsh/zselect module is used to implement timeouts on read operations.
For troubleshooting tips, consult the corresponding advice for the zftp
functions described in *note Zftp Function System:: .

There are functions corresponding to the basic I/O operations open,
close, read and send, named tcp_open etc., as well as a function
tcp_expect for pattern match analysis of data read as input.  The system
makes it easy to receive data from and send data to multiple named
sessions at once.  In addition, it can be linked with the shell's line
editor in such a way that input data is automatically shown at the
terminal.  Other facilities available including logging, filtering and
configurable output prompts.

To use the system where it is available, it should be enough to
'autoload -U tcp_open' and run tcp_open as documented below to start a
session.  The tcp_open function will autoload the remaining functions.

* Menu:

* TCP Functions::
* TCP Parameters::
* TCP Examples::
* TCP Bugs::


File: zsh.info,  Node: TCP Functions,  Next: TCP Parameters,  Up: TCP Function System

24.2 TCP User Functions
=======================

24.2.1 Basic I/O
----------------

tcp_open [-qz] HOST PORT [ SESS ]
tcp_open [-qz] [ -s SESS | -l SESS,... ] ... 
tcp_open [-qz] [-a FD | -f FD ] [ SESS ]
     Open a new session.  In the first and simplest form, open a TCP
     connection to host HOST at port PORT; numeric and symbolic forms
     are understood for both.

     If SESS is given, this becomes the name of the session which can be
     used to refer to multiple different TCP connections.  If SESS is
     not given, the function will invent a numeric name value (note this
     is _not_ the same as the file descriptor to which the session is
     attached).  It is recommended that session names not include
     'funny' characters, where funny characters are not well-defined but
     certainly do not include alphanumerics or underscores, and
     certainly do include whitespace.

     In the second case, one or more sessions to be opened are given by
     name.  A single session name is given after -s and a
     comma-separated list after -l; both options may be repeated as many
     times as necessary.  A failure to open any session causes tcp_open
     to abort.  The host and port are read from the file .ztcp_sessions
     in the same directory as the user's zsh initialisation files, i.e.
     usually the home directory, but $ZDOTDIR if that is set.  The file
     consists of lines each giving a session name and the corresponding
     host and port, in that order (note the session name comes first,
     not last), separated by whitespace.

     The third form allows passive and fake TCP connections.  If the
     option -a is used, its argument is a file descriptor open for
     listening for connections.  No function front-end is provided to
     open such a file descriptor, but a call to 'ztcp -l PORT' will
     create one with the file descriptor stored in the parameter $REPLY.
     The listening port can be closed with 'ztcp -c FD'.  A call to
     'tcp_open -a FD' will block until a remote TCP connection is made
     to PORT on the local machine.  At this point, a session is created
     in the usual way and is largely indistinguishable from an active
     connection created with one of the first two forms.

     If the option -f is used, its argument is a file descriptor which
     is used directly as if it were a TCP session.  How well the
     remainder of the TCP function system copes with this depends on
     what actually underlies this file descriptor.  A regular file is
     likely to be unusable; a FIFO (pipe) of some sort will work better,
     but note that it is not a good idea for two different sessions to
     attempt to read from the same FIFO at once.

     If the option -q is given with any of the three forms, tcp_open
     will not print informational messages, although it will in any case
     exit with an appropriate status.

     If the line editor (zle) is in use, which is typically the case if
     the shell is interactive, tcp_open installs a handler inside zle
     which will check for new data at the same time as it checks for
     keyboard input.  This is convenient as the shell consumes no CPU
     time while waiting; the test is performed by the operating system.
     Giving the option -z to any of the forms of tcp_open prevents the
     handler from being installed, so data must be read explicitly.
     Note, however, this is not necessary for executing complete sets of
     send and read commands from a function, as zle is not active at
     this point.  Generally speaking, the handler is only active when
     the shell is waiting for input at a command prompt or in the vared
     builtin.  The option has no effect if zle is not active; '[[ -o
     zle]]' will test for this.

     The first session to be opened becomes the current session and
     subsequent calls to tcp_open do not change it.  The current session
     is stored in the parameter $TCP_SESS; see below for more detail
     about the parameters used by the system.

     The function tcp_on_open, if defined, is called when a session is
     opened.  See the description below.

tcp_close [-qn] [ -a | -l SESS,... | SESS ... ]
     Close the named sessions, or the current session if none is given,
     or all open sessions if -a is given.  The options -l and -s are
     both handled for consistency with tcp_open, although the latter is
     redundant.

     If the session being closed is the current one, $TCP_SESS is unset,
     leaving no current session, even if there are other sessions still
     open.

     If the session was opened with tcp_open -f, the file descriptor is
     closed so long as it is in the range 0 to 9 accessible directly
     from the command line.  If the option -n is given, no attempt will
     be made to close file descriptors in this case.  The -n option is
     not used for genuine ztcp session; the file descriptors are always
     closed with the session.

     If the option -q is given, no informational messages will be
     printed.

tcp_read [-bdq] [ -t TO ] [ -T TO ]
[ -a | -u FD ... | -l SESS,... | -s SESS ...]
     Perform a read operation on the current session, or on a list of
     sessions if any are given with -u, -l or -s, or all open sessions
     if the option -a is given.  Any of the -u, -l or -s options may be
     repeated or mixed together.  The -u option specifies a file
     descriptor directly (only those managed by this system are useful),
     the other two specify sessions as described for tcp_open above.

     The function checks for new data available on all the sessions
     listed.  Unless the -b option is given, it will not block waiting
     for new data.  Any one line of data from any of the available
     sessions will be read, stored in the parameter $TCP_LINE, and
     displayed to standard output unless $TCP_SILENT contains a
     non-empty string.  When printed to standard output the string
     $TCP_PROMPT will be shown at the start of the line; the default
     form for this includes the name of the session being read.  See
     below for more information on these parameters.  In this mode,
     tcp_read can be called repeatedly until it returns status 2 which
     indicates all pending input from all specified sessions has been
     handled.

     With the option -b, equivalent to an infinite timeout, the function
     will block until a line is available to read from one of the
     specified sessions.  However, only a single line is returned.

     The option -d indicates that all pending input should be drained.
     In this case tcp_read may process multiple lines in the manner
     given above; only the last is stored in $TCP_LINE, but the complete
     set is stored in the array $tcp_lines.  This is cleared at the
     start of each call to tcp_read.

     The options -t and -T specify a timeout in seconds, which may be a
     floating point number for increased accuracy.  With -t the timeout
     is applied before each line read.  With -T, the timeout applies to
     the overall operation, possibly including multiple read operations
     if the option -d is present; without this option, there is no
     distinction between -t and -T.

     The function does not print informational messages, but if the
     option -q is given, no error message is printed for a non-existent
     session.

     A return status of 2 indicates a timeout or no data to read.  Any
     other non-zero return status indicates some error condition.

     See tcp_log for how to control where data is sent by tcp_read.

tcp_send [-cnq] [ -s SESS | -l SESS,... ] DATA ...
tcp_send [-cnq] -a DATA ...
     Send the supplied data strings to all the specified sessions in
     turn.  The underlying operation differs little from a 'print -r' to
     the session's file descriptor, although it attempts to prevent the
     shell from dying owing to a SIGPIPE caused by an attempt to write
     to a defunct session.

     The option -c causes tcp_send to behave like cat.  It reads lines
     from standard input until end of input and sends them in turn to
     the specified session(s) exactly as if they were given as DATA
     arguments to individual tcp_send commands.

     The option -n prevents tcp_send from putting a newline at the end
     of the data strings.

     The remaining options all behave as for tcp_read.

     The data arguments are not further processed once they have been
     passed to tcp_send; they are simply passed down to print -r.

     If the parameter $TCP_OUTPUT is a non-empty string and logging is
     enabled then the data sent to each session will be echoed to the
     log file(s) with $TCP_OUTPUT in front where appropriate, much in
     the manner of $TCP_PROMPT.

24.2.2 Session Management
-------------------------

tcp_alias [-q] ALIAS=SESS ...
tcp_alias [-q] [ ALIAS ] ...
tcp_alias -d [-q] ALIAS ...
     This function is not particularly well tested.

     The first form creates an alias for a session name; ALIAS can then
     be used to refer to the existing session SESS.  As many aliases may
     be listed as required.

     The second form lists any aliases specified, or all aliases if
     none.

     The third form deletes all the aliases listed.  The underlying
     sessions are not affected.

     The option -q suppresses an inconsistently chosen subset of error
     messages.

tcp_log [-asc] [ -n | -N ] [ LOGFILE ]
     With an argument LOGFILE, all future input from tcp_read will be
     logged to the named file.  Unless -a (append) is given, this file
     will first be truncated or created empty.  With no arguments, show
     the current status of logging.

     With the option -s, per-session logging is enabled.  Input from
     tcp_read is output to the file LOGFILE.SESS.  As the session is
     automatically discriminated by the filename, the contents are raw
     (no $TCP_PROMPT).  The option -a applies as above.  Per-session
     logging and logging of all data in one file are not mutually
     exclusive.

     The option -c closes all logging, both complete and per-session
     logs.

     The options -n and -N respectively turn off or restore output of
     data read by tcp_read to standard output; hence 'tcp_log -cn' turns
     off all output by tcp_read.

     The function is purely a convenient front end to setting the
     parameters $TCP_LOG, $TCP_LOG_SESS, $TCP_SILENT, which are
     described below.

tcp_rename OLD NEW
     Rename session OLD to session NEW.  The old name becomes invalid.

tcp_sess [ SESS [ COMMAND ... ] ]
     With no arguments, list all the open sessions and associated file
     descriptors.  The current session is marked with a star.  For use
     in functions, direct access to the parameters $tcp_by_name,
     $tcp_by_fd and $TCP_SESS is probably more convenient; see below.

     With a SESS argument, set the current session to SESS.  This is
     equivalent to changing $TCP_SESS directly.

     With additional arguments, temporarily set the current session
     while executing the string command ....  The first argument is
     re-evaluated so as to expand aliases etc., but the remaining
     arguments are passed through as the appear to tcp_sess.  The
     original session is restored when tcp_sess exits.

24.2.3 Advanced I/O
-------------------

tcp_command SEND-OPTIONS ... SEND-ARGUMENTS ...
     This is a convenient front-end to tcp_send.  All arguments are
     passed to tcp_send, then the function pauses waiting for data.
     While data is arriving at least every $TCP_TIMEOUT (default 0.3)
     seconds, data is handled and printed out according to the current
     settings.  Status 0 is always returned.

     This is generally only useful for interactive use, to prevent the
     display becoming fragmented by output returned from the connection.
     Within a programme or function it is generally better to handle
     reading data by a more explicit method.

tcp_expect [ -q ] [ -p VAR | -P VAR ] [ -t TO | -T TO]
[ -a | -s SESS ... | -l SESS,... ] PATTERN ...
     Wait for input matching any of the given PATTERNs from any of the
     specified sessions.  Input is ignored until an input line matches
     one of the given patterns; at this point status zero is returned,
     the matching line is stored in $TCP_LINE, and the full set of lines
     read during the call to tcp_expect is stored in the array
     $tcp_expect_lines.

     Sessions are specified in the same way as tcp_read: the default is
     to use the current session, otherwise the sessions specified by -a,
     -s, or -l are used.

     Each PATTERN is a standard zsh extended-globbing pattern; note that
     it needs to be quoted to avoid it being expanded immediately by
     filename generation.  It must match the full line, so to match a
     substring there must be a '*' at the start and end.  The line
     matched against includes the $TCP_PROMPT added by tcp_read.  It is
     possible to include the globbing flags '#b' or '#m' in the patterns
     to make backreferences available in the parameters $MATCH, $match,
     etc., as described in the base zsh documentation on pattern
     matching.

     Unlike tcp_read, the default behaviour of tcp_expect is to block
     indefinitely until the required input is found.  This can be
     modified by specifying a timeout with -t or -T; these function as
     in tcp_read, specifying a per-read or overall timeout,
     respectively, in seconds, as an integer or floating-point number.
     As tcp_read, the function returns status 2 if a timeout occurs.

     The function returns as soon as any one of the patterns given
     match.  If the caller needs to know which of the patterns matched,
     the option -p VAR can be used; on return, $var is set to the number
     of the pattern using ordinary zsh indexing, i.e.  the first is 1,
     and so on.  Note the absence of a '$' in front of VAR.  To avoid
     clashes, the parameter cannot begin with '_expect'.  The index -1
     is used if there is a timeout and 0 if there is no match.

     The option -P VAR works similarly to -p, but instead of numerical
     indexes the regular arguments must begin with a prefix followed by
     a colon: that prefix is then used as a tag to which VAR is set when
     the argument matches.  The tag timeout is used if there is a
     timeout and the empty string if there is no match.  Note it is
     acceptable for different arguments to start with the same prefix if
     the matches do not need to be distinguished.

     The option -q is passed directly down to tcp_read.

     As all input is done via tcp_read, all the usual rules about output
     of lines read apply.  One exception is that the parameter
     $tcp_lines will only reflect the line actually matched by
     tcp_expect; use $tcp_expect_lines for the full set of lines read
     during the function call.

tcp_proxy
     This is a simple-minded function to accept a TCP connection and
     execute a command with I/O redirected to the connection.  Extreme
     caution should be taken as there is no security whatsoever and this
     can leave your computer open to the world.  Ideally, it should only
     be used behind a firewall.

     The first argument is a TCP port on which the function will listen.

     The remaining arguments give a command and its arguments to execute
     with standard input, standard output and standard error redirected
     to the file descriptor on which the TCP session has been accepted.
     If no command is given, a new zsh is started.  This gives everyone
     on your network direct access to your account, which in many cases
     will be a bad thing.

     The command is run in the background, so tcp_proxy can then accept
     new connections.  It continues to accept new connections until
     interrupted.

tcp_spam [-ertv] [ -a | -s SESS | -l SESS,... ] CMD ...
     Execute 'CMD ...' for each session in turn.  Note this executes the
     command and arguments; it does not send the command line as data
     unless the -t (transmit) option is given.

     The sessions may be selected explicitly with the standard -a, -s or
     -l options, or may be chosen implicitly.  If none of the three
     options is given the rules are: first, if the array $tcp_spam_list
     is set, this is taken as the list of sessions, otherwise all
     sessions are taken.  Second, any sessions given in the array
     $tcp_no_spam_list are removed from the list of sessions.

     Normally, any sessions added by the '-a' flag or when all sessions
     are chosen implicitly are spammed in alphabetic order; sessions
     given by the $tcp_spam_list array or on the command line are
     spammed in the order given.  The -r flag reverses the order however
     it was arrived it.

     The -v flag specifies that a $TCP_PROMPT will be output before each
     session.  This is output after any modification to TCP_SESS by the
     user-defined tcp_on_spam function described below.  (Obviously that
     function is able to generate its own output.)

     If the option -e is present, the line given as CMD ... is executed
     using eval, otherwise it is executed without any further
     processing.

tcp_talk
     This is a fairly simple-minded attempt to force input to the line
     editor to go straight to the default TCP_SESSION.

     An escape string, $TCP_TALK_ESCAPE, default ':', is used to allow
     access to normal shell operation.  If it is on its own at the start
     of the line, or followed only by whitespace, the line editor
     returns to normal operation.  Otherwise, the string and any
     following whitespace are skipped and the remainder of the line
     executed as shell input without any change of the line editor's
     operating mode.

     The current implementation is somewhat deficient in terms of use of
     the command history.  For this reason, many users will prefer to
     use some form of alternative approach for sending data easily to
     the current session.  One simple approach is to alias some special
     character (such as '%') to 'tcp_command --'.

tcp_wait
     The sole argument is an integer or floating point number which
     gives the seconds to delay.  The shell will do nothing for that
     period except wait for input on all TCP sessions by calling
     tcp_read -a.  This is similar to the interactive behaviour at the
     command prompt when zle handlers are installed.

24.2.4 'One-shot' file transfer
-------------------------------

tcp_point PORT
tcp_shoot HOST PORT
     This pair of functions provide a simple way to transfer a file
     between two hosts within the shell.  Note, however, that bulk data
     transfer is currently done using cat.  tcp_point reads any data
     arriving at PORT and sends it to standard output; tcp_shoot
     connects to PORT on HOST and sends its standard input.  Any unused
     PORT may be used; the standard mechanism for picking a port is to
     think of a random four-digit number above 1024 until one works.

     To transfer a file from host woodcock to host springes, on
     springes:

          tcp_point 8091 >output_file

     and on woodcock:

          tcp_shoot springes 8091 <input_file

     As these two functions do not require tcp_open to set up a TCP
     connection first, they may need to be autoloaded separately.

24.3 TCP User-defined Functions
===============================

Certain functions, if defined by the user, will be called by the
function system in certain contexts.  This facility depends on the
module zsh/parameter, which is usually available in interactive shells
as the completion system depends on it.  None of the functions need be
defined; they simply provide convenient hooks when necessary.

Typically, these are called after the requested action has been taken,
so that the various parameters will reflect the new state.

tcp_on_alias ALIAS FD
     When an alias is defined, this function will be called with two
     arguments: the name of the alias, and the file descriptor of the
     corresponding session.

tcp_on_awol SESS FD
     If the function tcp_fd_handler is handling input from the line
     editor and detects that the file descriptor is no longer reusable,
     by default it removes it from the list of file descriptors handled
     by this method and prints a message.  If the function tcp_on_awol
     is defined it is called immediately before this point.  It may
     return status 100, which indicates that the normal handling should
     still be performed; any other return status indicates that no
     further action should be taken and the tcp_fd_handler should return
     immediately with the given status.  Typically the action of
     tcp_on_awol will be to close the session.

     The variable TCP_INVALIDATE_ZLE will be a non-empty string if it is
     necessary to invalidate the line editor display using 'zle -I'
     before printing output from the function.

     ('AWOL' is military jargon for 'absent without leave' or some
     variation.  It has no pre-existing technical meaning known to the
     author.)

tcp_on_close SESS FD
     This is called with the name of a session being closed and the file
     descriptor which corresponded to that session.  Both will be
     invalid by the time the function is called.

tcp_on_open SESS FD
     This is called after a new session has been defined with the
     session name and file descriptor as arguments.  If it returns a
     non-zero status, opening the session is assumed to fail and the
     session is closed again; however, tcp_open will continue to attempt
     to open any remaining sessions given on the command line.

tcp_on_rename OLDSESS FD NEWSESS
     This is called after a session has been renamed with the three
     arguments old session name, file descriptor, new session name.

tcp_on_spam SESS COMMAND ...
     This is called once for each session spammed, just _before_ a
     command is executed for a session by tcp_spam.  The arguments are
     the session name followed by the command list to be executed.  If
     tcp_spam was called with the option -t, the first command will be
     tcp_send.

     This function is called after $TCP_SESS is set to reflect the
     session to be spammed, but before any use of it is made.  Hence it
     is possible to alter the value of $TCP_SESS within this function.
     For example, the session arguments to tcp_spam could include extra
     information to be stripped off and processed in tcp_on_spam.

     If the function sets the parameter $REPLY to 'done', the command
     line is not executed; in addition, no prompt is printed for the -v
     option to tcp_spam.

tcp_on_unalias ALIAS FD
     This is called with the name of an alias and the corresponding
     session's file descriptor after an alias has been deleted.

24.4 TCP Utility Functions
==========================

The following functions are used by the TCP function system but will
rarely if ever need to be called directly.

tcp_fd_handler
     This is the function installed by tcp_open for handling input from
     within the line editor, if that is required.  It is in the format
     documented for the builtin 'zle -F' in *note Zle Builtins:: .

     While active, the function sets the parameter TCP_HANDLER_ACTIVE to
     1.  This allows shell code called internally (for example, by
     setting tcp_on_read) to tell if is being called when the shell is
     otherwise idle at the editor prompt.

tcp_output [ -q ] -P PROMPT -F FD -S SESS
     This function is used for both logging and handling output to
     standard output, from within tcp_read and (if $TCP_OUTPUT is set)
     tcp_send.

     The PROMPT to use is specified by -P; the default is the empty
     string.  It can contain:
     %c
          Expands to 1 if the session is the current session, otherwise
          0.  Used with ternary expressions such as '%(c.-.+)' to output
          '+' for the current session and '-' otherwise.

     %f
          Replaced by the session's file descriptor.

     %s
          Replaced by the session name.

     %%
          Replaced by a single '%'.

     The option -q suppresses output to standard output, but not to any
     log files which are configured.

     The -S and -F options are used to pass in the session name and file
     descriptor for possible replacement in the prompt.


File: zsh.info,  Node: TCP Parameters,  Next: TCP Examples,  Prev: TCP Functions,  Up: TCP Function System

24.5 TCP User Parameters
========================

Parameters follow the usual convention that uppercase is used for
scalars and integers, while lowercase is used for normal and associative
array.  It is always safe for user code to read these parameters.  Some
parameters may also be set; these are noted explicitly.  Others are
included in this group as they are set by the function system for the
user's benefit, i.e.  setting them is typically not useful but is
benign.

It is often also useful to make settable parameters local to a function.
For example, 'local TCP_SILENT=1' specifies that data read during the
function call will not be printed to standard output, regardless of the
setting outside the function.  Likewise, 'local TCP_SESS=SESS' sets a
session for the duration of a function, and 'local TCP_PROMPT='
specifies that no prompt is used for input during the function.

tcp_expect_lines
     Array.  The set of lines read during the last call to tcp_expect,
     including the last ($TCP_LINE).

tcp_filter
     Array.  May be set directly.  A set of extended globbing patterns
     which, if matched in tcp_output, will cause the line not to be
     printed to standard output.  The patterns should be defined as
     described for the arguments to tcp_expect.  Output of line to log
     files is not affected.

TCP_HANDLER_ACTIVE
     Scalar.  Set to 1 within tcp_fd_handler to indicate to functions
     called recursively that they have been called during an editor
     session.  Otherwise unset.

TCP_LINE
     The last line read by tcp_read, and hence also tcp_expect.

TCP_LINE_FD
     The file descriptor from which $TCP_LINE was read.
     ${tcp_by_fd[$TCP_LINE_FD]} will give the corresponding session
     name.

tcp_lines
     Array.  The set of lines read during the last call to tcp_read,
     including the last ($TCP_LINE).

TCP_LOG
     May be set directly, although it is also controlled by tcp_log.
     The name of a file to which output from all sessions will be sent.
     The output is proceeded by the usual $TCP_PROMPT.  If it is not an
     absolute path name, it will follow the user's current directory.

TCP_LOG_SESS
     May be set directly, although it is also controlled by tcp_log.
     The prefix for a set of files to which output from each session
     separately will be sent; the full filename is ${TCP_LOG_SESS}.SESS.
     Output to each file is raw; no prompt is added.  If it is not an
     absolute path name, it will follow the user's current directory.

tcp_no_spam_list
     Array.  May be set directly.  See tcp_spam for how this is used.

TCP_OUTPUT
     May be set directly.  If a non-empty string, any data sent to a
     session by tcp_send will be logged.  This parameter gives the
     prompt to be used in a file specified by $TCP_LOG but not in a file
     generated from $TCP_LOG_SESS.  The prompt string has the same
     format as TCP_PROMPT and the same rules for its use apply.

TCP_PROMPT
     May be set directly.  Used as the prefix for data read by tcp_read
     which is printed to standard output or to the log file given by
     $TCP_LOG, if any.  Any '%s', '%f' or '%%' occurring in the string
     will be replaced by the name of the session, the session's
     underlying file descriptor, or a single '%', respectively.  The
     expression '%c' expands to 1 if the session being read is the
     current session, else 0; this is most useful in ternary expressions
     such as '%(c.-.+)' which outputs '+' if the session is the current
     one, else '-'.

     If the prompt starts with %P, this is stripped and the complete
     result of the previous stage is passed through standard prompt
     %-style formatting before being output.

TCP_READ_DEBUG
     May be set directly.  If this has non-zero length, tcp_read will
     give some limited diagnostics about data being read.

TCP_SECONDS_START
     This value is created and initialised to zero by tcp_open.

     The functions tcp_read and tcp_expect use the shell's SECONDS
     parameter for their own timing purposes.  If that parameter is not
     of floating point type on entry to one of the functions, it will
     create a local parameter SECONDS which is floating point and set
     the parameter TCP_SECONDS_START to the previous value of $SECONDS.
     If the parameter is already floating point, it is used without a
     local copy being created and TCP_SECONDS_START is not set.  As the
     global value is zero, the shell elapsed time is guaranteed to be
     the sum of $SECONDS and $TCP_SECONDS_START.

     This can be avoided by setting SECONDS globally to a floating point
     value using 'typeset -F SECONDS'; then the TCP functions will never
     make a local copy and never set TCP_SECONDS_START to a non-zero
     value.

TCP_SESS
     May be set directly.  The current session; must refer to one of the
     sessions established by tcp_open.

TCP_SILENT
     May be set directly, although it is also controlled by tcp_log.  If
     of non-zero length, data read by tcp_read will not be written to
     standard output, though may still be written to a log file.

tcp_spam_list
     Array.  May be set directly.  See the description of the function
     tcp_spam for how this is used.

TCP_TALK_ESCAPE
     May be set directly.  See the description of the function tcp_talk
     for how this is used.

TCP_TIMEOUT
     May be set directly.  Currently this is only used by the function
     tcp_command, see above.

24.6 TCP User-defined Parameters
================================

The following parameters are not set by the function system, but have a
special effect if set by the user.

tcp_on_read
     This should be an associative array; if it is not, the behaviour is
     undefined.  Each key is the name of a shell function or other
     command, and the corresponding value is a shell pattern (using
     EXTENDED_GLOB).  Every line read from a TCP session directly or
     indirectly using tcp_read (which includes lines read by tcp_expect)
     is compared against the pattern.  If the line matches, the command
     given in the key is called with two arguments: the name of the
     session from which the line was read, and the line itself.

     If any function called to handle a line returns a non-zero status,
     the line is not output.  Thus a tcp_on_read handler containing only
     the instruction 'return 1' can be used to suppress output of
     particular lines (see, however, tcp_filter above).  However, the
     line is still stored in TCP_LINE and tcp_lines; this occurs after
     all tcp_on_read processing.

24.7 TCP Utility Parameters
===========================

These parameters are controlled by the function system; they may be read
directly, but should not usually be set by user code.

tcp_aliases
     Associative array.  The keys are the names of sessions established
     with tcp_open; each value is a space-separated list of aliases
     which refer to that session.

tcp_by_fd
     Associative array.  The keys are session file descriptors; each
     value is the name of that session.

tcp_by_name
     Associative array.  The keys are the names of sessions; each value
     is the file descriptor associated with that session.


File: zsh.info,  Node: TCP Examples,  Next: TCP Bugs,  Prev: TCP Parameters,  Up: TCP Function System

24.8 TCP Examples
=================

Here is a trivial example using a remote calculator.

TO create a calculator server on port 7337 (see the dc manual page for
quite how infuriating the underlying command is):

     tcp_proxy 7337 dc

To connect to this from the same host with a session also named 'dc':

     tcp_open localhost 7337 dc

To send a command to the remote session and wait a short while for
output (assuming dc is the current session):

     tcp_command 2 4 + p

To close the session:

     tcp_close

The tcp_proxy needs to be killed to be stopped.  Note this will not
usually kill any connections which have already been accepted, and also
that the port is not immediately available for reuse.

The following chunk of code puts a list of sessions into an xterm
header, with the current session followed by a star.

     print -n "\033]2;TCP:" ${(k)tcp_by_name:/$TCP_SESS/$TCP_SESS\*} "\a"


File: zsh.info,  Node: TCP Bugs,  Prev: TCP Examples,  Up: TCP Function System

24.9 TCP Bugs
=============

The function tcp_read uses the shell's normal read builtin.  As this
reads a complete line at once, data arriving without a terminating
newline can cause the function to block indefinitely.

Though the function suite works well for interactive use and for data
arriving in small amounts, the performance when large amounts of data
are being exchanged is likely to be extremely poor.


File: zsh.info,  Node: Zftp Function System,  Next: User Contributions,  Prev: TCP Function System,  Up: Top

25 Zftp Function System
***********************

25.1 Description
================

This describes the set of shell functions supplied with the source
distribution as an interface to the zftp builtin command, allowing you
to perform FTP operations from the shell command line or within
functions or scripts.  The interface is similar to a traditional FTP
client (e.g.  the ftp command itself, see man page ftp(1)), but as it is
entirely done within the shell all the familiar completion, editing and
globbing features, and so on, are present, and macros are particularly
simple to write as they are just ordinary shell functions.

The prerequisite is that the zftp command, as described in *note The
zsh/zftp Module:: , must be available in the version of zsh installed at
your site.  If the shell is configured to load new commands at run time,
it probably is: typing 'zmodload zsh/zftp' will make sure (if that runs
silently, it has worked).  If this is not the case, it is possible zftp
was linked into the shell anyway: to test this, type 'which zftp' and if
zftp is available you will get the message 'zftp: shell built-in
command'.

Commands given directly with zftp builtin may be interspersed between
the functions in this suite; in a few cases, using zftp directly may
cause some of the status information stored in shell parameters to
become invalid.  Note in particular the description of the variables
$ZFTP_TMOUT, $ZFTP_PREFS and $ZFTP_VERBOSE for zftp.

* Menu:

* Installation::
* Zftp Functions::
* Miscellaneous Features::


File: zsh.info,  Node: Installation,  Next: Zftp Functions,  Up: Zftp Function System

25.2 Installation
=================

You should make sure all the functions from the Functions/Zftp directory
of the source distribution are available; they all begin with the two
letters 'zf'.  They may already have been installed on your system;
otherwise, you will need to find them and copy them.  The directory
should appear as one of the elements of the $fpath array (this should
already be the case if they were installed), and at least the function
zfinit should be autoloaded; it will autoload the rest.  Finally, to
initialize the use of the system you need to call the zfinit function.
The following code in your .zshrc will arrange for this; assume the
functions are stored in the directory ~/myfns:

     fpath=(~/myfns $fpath)
     autoload -U zfinit
     zfinit

Note that zfinit assumes you are using the zmodload method to load the
zftp command.  If it is already built into the shell, change zfinit to
zfinit -n.  It is helpful (though not essential) if the call to zfinit
appears after any code to initialize the new completion system, else
unnecessary compctl commands will be given.


File: zsh.info,  Node: Zftp Functions,  Next: Miscellaneous Features,  Prev: Installation,  Up: Zftp Function System

25.3 Functions
==============

The sequence of operations in performing a file transfer is essentially
the same as that in a standard FTP client.  Note that, due to a quirk of
the shell's getopts builtin, for those functions that handle options you
must use '--' rather than '-' to ensure the remaining arguments are
treated literally (a single '-' is treated as an argument).

25.3.1 Opening a connection
---------------------------

zfparams [ HOST [ USER [ PASSWORD ... ] ] ]
     Set or show the parameters for a future zfopen with no arguments.
     If no arguments are given, the current parameters are displayed
     (the password will be shown as a line of asterisks).  If a host is
     given, and either the USER or PASSWORD is not, they will be
     prompted for; also, any parameter given as '?' will be prompted
     for, and if the '?' is followed by a string, that will be used as
     the prompt.  As zfopen calls zfparams to store the parameters, this
     usually need not be called directly.

     A single argument '-' will delete the stored parameters.  This will
     also cause the memory of the last directory (and so on) on the
     other host to be deleted.

zfopen [ -1 ] [ HOST [ USER [ PASSWORD [ ACCOUNT ] ] ] ]
     If HOST is present, open a connection to that host under username
     USER with password PASSWORD (and, on the rare occasions when it is
     necessary, account ACCOUNT).  If a necessary parameter is missing
     or given as '?' it will be prompted for.  If HOST is not present,
     use a previously stored set of parameters.

     If the command was successful, and the terminal is compatible with
     xterm or is sun-cmd, a summary will appear in the title bar, giving
     the local host:directory and the remote host:directory; this is
     handled by the function zftp_chpwd, described below.

     Normally, the HOST, USER and PASSWORD are internally recorded for
     later re-opening, either by a zfopen with no arguments, or
     automatically (see below).  With the option '-1', no information is
     stored.  Also, if an open command with arguments failed, the
     parameters will not be retained (and any previous parameters will
     also be deleted).  A zfopen on its own, or a zfopen -1, never
     alters the stored parameters.

     Both zfopen and zfanon (but not zfparams) understand URLs of the
     form ftp://HOST/PATH... as meaning to connect to the HOST, then
     change directory to PATH (which must be a directory, not a file).
     The 'ftp://' can be omitted; the trailing '/' is enough to trigger
     recognition of the PATH.  Note prefixes other than 'ftp:' are not
     recognized, and that all characters after the first slash beyond
     HOST are significant in PATH.

zfanon [ -1 ] HOST
     Open a connection HOST for anonymous FTP. The username used is
     'anonymous'.  The password (which will be reported the first time)
     is generated as USER@HOST; this is then stored in the shell
     parameter $EMAIL_ADDR which can alternatively be set manually to a
     suitable string.

25.3.2 Directory management
---------------------------

zfcd [ DIR ]
zfcd -
zfcd OLD NEW
     Change the current directory on the remote server: this is
     implemented to have many of the features of the shell builtin cd.

     In the first form with DIR present, change to the directory DIR.
     The command 'zfcd ..' is treated specially, so is guaranteed to
     work on non-UNIX servers (note this is handled internally by zftp).
     If DIR is omitted, has the effect of 'zfcd ~'.

     The second form changes to the directory previously current.

     The third form attempts to change the current directory by
     replacing the first occurrence of the string OLD with the string
     NEW in the current directory.

     Note that in this command, and indeed anywhere a remote filename is
     expected, the string which on the local host corresponds to '~' is
     converted back to a '~' before being passed to the remote machine.
     This is convenient because of the way expansion is performed on the
     command line before zfcd receives a string.  For example, suppose
     the command is 'zfcd ~/foo'.  The shell will expand this to a full
     path such as 'zfcd /home/user2/pws/foo'.  At this stage, zfcd
     recognises the initial path as corresponding to '~' and will send
     the directory to the remote host as ~/foo, so that the '~' will be
     expanded by the server to the correct remote host directory.  Other
     named directories of the form '~name' are not treated in this
     fashion.

zfhere
     Change directory on the remote server to the one corresponding to
     the current local directory, with special handling of '~' as in
     zfcd.  For example, if the current local directory is ~/foo/bar,
     then zfhere performs the effect of 'zfcd ~/foo/bar'.

zfdir [ -rfd ] [ - ] [ DIR-OPTIONS ] [ DIR ]
     Produce a long directory listing.  The arguments DIR-OPTIONS and
     DIR are passed directly to the server and their effect is
     implementation dependent, but specifying a particular remote
     directory DIR is usually possible.  The output is passed through a
     pager given by the environment variable $PAGER, or 'more' if that
     is not set.

     The directory is usually cached for re-use.  In fact, two caches
     are maintained.  One is for use when there is no DIR-OPTIONS or
     DIR, i.e.  a full listing of the current remote directory; it is
     flushed when the current remote directory changes.  The other is
     kept for repeated use of zfdir with the same arguments; for
     example, repeated use of 'zfdir /pub/gnu' will only require the
     directory to be retrieved on the first call.  Alternatively, this
     cache can be re-viewed with the -r option.  As relative directories
     will confuse zfdir, the -f option can be used to force the cache to
     be flushed before the directory is listed.  The option -d will
     delete both caches without showing a directory listing; it will
     also delete the cache of file names in the current remote
     directory, if any.

zfls [ LS-OPTIONS ] [ DIR ]
     List files on the remote server.  With no arguments, this will
     produce a simple list of file names for the current remote
     directory.  Any arguments are passed directly to the server.  No
     pager and no caching is used.

25.3.3 Status commands
----------------------

zftype [ TYPE ]
     With no arguments, show the type of data to be transferred, usually
     ASCII or binary.  With an argument, change the type: the types 'A'
     or 'ASCII' for ASCII data and 'B' or 'BINARY', 'I' or 'IMAGE' for
     binary data are understood case-insensitively.

zfstat [ -v ]
     Show the status of the current or last connection, as well as the
     status of some of zftp's status variables.  With the -v option, a
     more verbose listing is produced by querying the server for its
     version of events, too.

25.3.4 Retrieving files
-----------------------

The commands for retrieving files all take at least two options.  -G
suppresses remote filename expansion which would otherwise be performed
(see below for a more detailed description of that).  -t attempts to set
the modification time of the local file to that of the remote file: see
the description of the function zfrtime below for more information.

zfget [ -Gtc ] FILE1 ...
     Retrieve all the listed files FILE1 ...  one at a time from the
     remote server.  If a file contains a '/', the full name is passed
     to the remote server, but the file is stored locally under the name
     given by the part after the final '/'.  The option -c (cat) forces
     all files to be sent as a single stream to standard output; in this
     case the -t option has no effect.

zfuget [ -Gvst ] FILE1 ...
     As zfget, but only retrieve files where the version on the remote
     server is newer (has a later modification time), or where the local
     file does not exist.  If the remote file is older but the files
     have different sizes, or if the sizes are the same but the remote
     file is newer, the user will usually be queried.  With the option
     -s, the command runs silently and will always retrieve the file in
     either of those two cases.  With the option -v, the command prints
     more information about the files while it is working out whether or
     not to transfer them.

zfcget [ -Gt ] FILE1 ...
     As zfget, but if any of the local files exists, and is shorter than
     the corresponding remote file, the command assumes that it is the
     result of a partially completed transfer and attempts to transfer
     the rest of the file.  This is useful on a poor connection which
     keeps failing.

     Note that this requires a commonly implemented, but non-standard,
     version of the FTP protocol, so is not guaranteed to work on all
     servers.

zfgcp [ -Gt ] REMOTE-FILE LOCAL-FILE
zfgcp [ -Gt ] RFILE1 ... LDIR
     This retrieves files from the remote server with arguments behaving
     similarly to the cp command.

     In the first form, copy REMOTE-FILE from the server to the local
     file LOCAL-FILE.

     In the second form, copy all the remote files RFILE1 ...  into the
     local directory LDIR retaining the same basenames.  This assumes
     UNIX directory semantics.

25.3.5 Sending files
--------------------

zfput [ -r ] FILE1 ...
     Send all the FILE1 ...  given separately to the remote server.  If
     a filename contains a '/', the full filename is used locally to
     find the file, but only the basename is used for the remote file
     name.

     With the option -r, if any of the FILES are directories they are
     sent recursively with all their subdirectories, including files
     beginning with '.'.  This requires that the remote machine
     understand UNIX file semantics, since '/' is used as a directory
     separator.

zfuput [ -vs ] FILE1 ...
     As zfput, but only send files which are newer than their local
     equivalents, or if the remote file does not exist.  The logic is
     the same as for zfuget, but reversed between local and remote
     files.

zfcput FILE1 ...
     As zfput, but if any remote file already exists and is shorter than
     the local equivalent, assume it is the result of an incomplete
     transfer and send the rest of the file to append to the existing
     part.  As the FTP append command is part of the standard set, this
     is in principle more likely to work than zfcget.

zfpcp LOCAL-FILE REMOTE-FILE
zfpcp LFILE1 ... RDIR
     This sends files to the remote server with arguments behaving
     similarly to the cp command.

     With two arguments, copy LOCAL-FILE to the server as REMOTE-FILE.

     With more than two arguments, copy all the local files LFILE1 ...
     into the existing remote directory RDIR retaining the same
     basenames.  This assumes UNIX directory semantics.

     A problem arises if you attempt to use zfpcp LFILE1 RDIR, i.e.  the
     second form of copying but with two arguments, as the command has
     no simple way of knowing if RDIR corresponds to a directory or a
     filename.  It attempts to resolve this in various ways.  First, if
     the RDIR argument is '.' or '..' or ends in a slash, it is assumed
     to be a directory.  Secondly, if the operation of copying to a
     remote file in the first form failed, and the remote server sends
     back the expected failure code 553 and a reply including the string
     'Is a directory', then zfpcp will retry using the second form.

25.3.6 Closing the connection
-----------------------------

zfclose
     Close the connection.

25.3.7 Session management
-------------------------

zfsession [ -lvod ] [ SESSNAME ]
     Allows you to manage multiple FTP sessions at once.  By default,
     connections take place in a session called 'default'; by giving the
     command 'zfsession SESSNAME' you can change to a new or existing
     session with a name of your choice.  The new session remembers its
     own connection, as well as associated shell parameters, and also
     the host/user parameters set by zfparams.  Hence you can have
     different sessions set up to connect to different hosts, each
     remembering the appropriate host, user and password.

     With no arguments, zfsession prints the name of the current
     session; with the option -l it lists all sessions which currently
     exist, and with the option -v it gives a verbose list showing the
     host and directory for each session, where the current session is
     marked with an asterisk.  With -o, it will switch to the most
     recent previous session.

     With -d, the given session (or else the current one) is removed;
     everything to do with it is completely forgotten.  If it was the
     only session, a new session called 'default' is created and made
     current.  It is safest not to delete sessions while background
     commands using zftp are active.

zftransfer SESS1:FILE1 SESS2:FILE2
     Transfer files between two sessions; no local copy is made.  The
     file is read from the session SESS1 as FILE1 and written to session
     SESS2 as file FILE2; FILE1 and FILE2 may be relative to the current
     directories of the session.  Either SESS1 or SESS2 may be omitted
     (though the colon should be retained if there is a possibility of a
     colon appearing in the file name) and defaults to the current
     session; FILE2 may be omitted or may end with a slash, in which
     case the basename of FILE1 will be added.  The sessions SESS1 and
     SESS2 must be distinct.

     The operation is performed using pipes, so it is required that the
     connections still be valid in a subshell, which is not the case
     under versions of some operating systems, presumably due to a
     system bug.

25.3.8 Bookmarks
----------------

The two functions zfmark and zfgoto allow you to 'bookmark' the present
location (host, user and directory) of the current FTP connection for
later use.  The file to be used for storing and retrieving bookmarks is
given by the parameter $ZFTP_BMFILE; if not set when one of the two
functions is called, it will be set to the file .zfbkmarks in the
directory where your zsh startup files live (usually ~).

zfmark [ BOOKMARK ]
     If given an argument, mark the current host, user and directory
     under the name BOOKMARK for later use by zfgoto.  If there is no
     connection open, use the values for the last connection immediately
     before it was closed; it is an error if there was none.  Any
     existing bookmark under the same name will be silently replaced.

     If not given an argument, list the existing bookmarks and the
     points to which they refer in the form USER@HOST:DIRECTORY; this is
     the format in which they are stored, and the file may be edited
     directly.

zfgoto [ -n ] BOOKMARK
     Return to the location given by BOOKMARK, as previously set by
     zfmark.  If the location has user 'ftp' or 'anonymous', open the
     connection with zfanon, so that no password is required.  If the
     user and host parameters match those stored for the current
     session, if any, those will be used, and again no password is
     required.  Otherwise a password will be prompted for.

     With the option -n, the bookmark is taken to be a nickname stored
     by the ncftp program in its bookmark file, which is assumed to be
     ~/.ncftp/bookmarks.  The function works identically in other ways.
     Note that there is no mechanism for adding or modifying ncftp
     bookmarks from the zftp functions.

25.3.9 Other functions
----------------------

Mostly, these functions will not be called directly (apart from zfinit),
but are described here for completeness.  You may wish to alter
zftp_chpwd and zftp_progress, in particular.

zfinit [ -n ]
     As described above, this is used to initialize the zftp function
     system.  The -n option should be used if the zftp command is
     already built into the shell.

zfautocheck [ -dn ]
     This function is called to implement automatic reopening behaviour,
     as described in more detail below.  The options must appear in the
     first argument; -n prevents the command from changing to the old
     directory, while -d prevents it from setting the variable do_close,
     which it otherwise does as a flag for automatically closing the
     connection after a transfer.  The host and directory for the last
     session are stored in the variable $zflastsession, but the internal
     host/user/password parameters must also be correctly set.

zfcd_match PREFIX SUFFIX
     This performs matching for completion of remote directory names.
     If the remote server is UNIX, it will attempt to persuade the
     server to list the remote directory with subdirectories marked,
     which usually works but is not guaranteed.  On other hosts it
     simply calls zfget_match and hence completes all files, not just
     directories.  On some systems, directories may not even look like
     filenames.

zfget_match PREFIX SUFFIX
     This performs matching for completion of remote filenames.  It
     caches files for the current directory (only) in the shell
     parameter $zftp_fcache.  It is in the form to be called by the -K
     option of compctl, but also works when called from a widget-style
     completion function with PREFIX and SUFFIX set appropriately.

zfrglob VARNAME
     Perform remote globbing, as describes in more detail below.
     VARNAME is the name of a variable containing the pattern to be
     expanded; if there were any matches, the same variable will be set
     to the expanded set of filenames on return.

zfrtime LFILE RFILE [ TIME ]
     Set the local file LFILE to have the same modification time as the
     remote file RFILE, or the explicit time TIME in FTP format
     CCYYMMDDhhmmSS for the GMT timezone.  This uses the shell's
     zsh/datetime module to perform the conversion from GMT to local
     time.

zftp_chpwd
     This function is called every time a connection is opened, or
     closed, or the remote directory changes.  This version alters the
     title bar of an xterm-compatible or sun-cmd terminal emulator to
     reflect the local and remote hostnames and current directories.  It
     works best when combined with the function chpwd.  In particular, a
     function of the form

          chpwd() {
            if [[ -n $ZFTP_USER ]]; then
              zftp_chpwd
            else
              # usual chpwd e.g put host:directory in title bar
            fi
          }

     fits in well.

zftp_progress
     This function shows the status of the transfer.  It will not write
     anything unless the output is going to a terminal; however, if you
     transfer files in the background, you should turn off progress
     reports by hand using 'zstyle ':zftp:*' progress none'.  Note also
     that if you alter it, any output _must_ be to standard error, as
     standard output may be a file being received.  The form of the
     progress meter, or whether it is used at all, can be configured
     without altering the function, as described in the next section.

zffcache
     This is used to implement caching of files in the current directory
     for each session separately.  It is used by zfget_match and
     zfrglob.


File: zsh.info,  Node: Miscellaneous Features,  Prev: Zftp Functions,  Up: Zftp Function System

25.4 Miscellaneous Features
===========================

25.4.1 Configuration
--------------------

Various styles are available using the standard shell style mechanism,
described in *note The zsh/zutil Module::.  Briefly, the command 'zstyle
':zftp:*' STYLE VALUE ...'.  defines the STYLE to have value VALUE; more
than one value may be given, although that is not useful in the cases
described here.  These values will then be used throughout the zftp
function system.  For more precise control, the first argument, which
gives a context in which the style applies, can be modified to include a
particular function, as for example ':zftp:zfget': the style will then
have the given value only in the zfget function.  Values for the same
style in different contexts may be set; the most specific function will
be used, where strings are held to be more specific than patterns, and
longer patterns and shorter patterns.  Note that only the top level
function name, as called by the user, is used; calling of lower level
functions is transparent to the user.  Hence modifications to the title
bar in zftp_chpwd use the contexts :zftp:zfopen, :zftp:zfcd, etc.,
depending where it was called from.  The following styles are
understood:

progress
     Controls the way that zftp_progress reports on the progress of a
     transfer.  If empty, unset, or 'none', no progress report is made;
     if 'bar' a growing bar of inverse video is shown; if 'percent' (or
     any other string, though this may change in future), the percentage
     of the file transferred is shown.  The bar meter requires that the
     width of the terminal be available via the $COLUMNS parameter
     (normally this is set automatically).  If the size of the file
     being transferred is not available, bar and percent meters will
     simply show the number of bytes transferred so far.

     When zfinit is run, if this style is not defined for the context
     :zftp:*, it will be set to 'bar'.

update
     Specifies the minimum time interval between updates of the progress
     meter in seconds.  No update is made unless new data has been
     received, so the actual time interval is limited only by
     $ZFTP_TIMEOUT.

     As described for progress, zfinit will force this to default to 1.

remote-glob
     If set to '1', 'yes' or 'true', filename generation (globbing) is
     performed on the remote machine instead of by zsh itself; see
     below.

titlebar
     If set to '1', 'yes' or 'true', zftp_chpwd will put the remote host
     and remote directory into the titlebar of terminal emulators such
     as xterm or sun-cmd that allow this.

     As described for progress, zfinit will force this to default to 1.

chpwd
     If set to '1' 'yes' or 'true', zftp_chpwd will call the function
     chpwd when a connection is closed.  This is useful if the remote
     host details were put into the terminal title bar by zftp_chpwd and
     your usual chpwd also modifies the title bar.

     When zfinit is run, it will determine whether chpwd exists and if
     so it will set the default value for the style to 1 if none exists
     already.

Note that there is also an associative array zfconfig which contains
values used by the function system.  This should not be modified or
overwritten.

25.4.2 Remote globbing
----------------------

The commands for retrieving files usually perform filename generation
(globbing) on their arguments; this can be turned off by passing the
option -G to each of the commands.  Normally this operates by retrieving
a complete list of files for the directory in question, then matching
these locally against the pattern supplied.  This has the advantage that
the full range of zsh patterns (respecting the setting of the option
EXTENDED_GLOB) can be used.  However, it means that the directory part
of a filename will not be expanded and must be given exactly.  If the
remote server does not support the UNIX directory semantics, directory
handling is problematic and it is recommended that globbing only be used
within the current directory.  The list of files in the current
directory, if retrieved, will be cached, so that subsequent globs in the
same directory without an intervening zfcd are much faster.

If the remote-glob style (see above) is set, globbing is instead
performed on the remote host: the server is asked for a list of matching
files.  This is highly dependent on how the server is implemented,
though typically UNIX servers will provide support for basic glob
patterns.  This may in some cases be faster, as it avoids retrieving the
entire list of directory contents.

25.4.3 Automatic and temporary reopening
----------------------------------------

As described for the zfopen command, a subsequent zfopen with no
parameters will reopen the connection to the last host (this includes
connections made with the zfanon command).  Opened in this fashion, the
connection starts in the default remote directory and will remain open
until explicitly closed.

Automatic re-opening is also available.  If a connection is not
currently open and a command requiring a connection is given, the last
connection is implicitly reopened.  In this case the directory which was
current when the connection was closed again becomes the current
directory (unless, of course, the command given changes it).  Automatic
reopening will also take place if the connection was close by the remote
server for whatever reason (e.g.  a timeout).  It is not available if
the -1 option to zfopen or zfanon was used.

Furthermore, if the command issued is a file transfer, the connection
will be closed after the transfer is finished, hence providing a
one-shot mode for transfers.  This does not apply to directory changing
or listing commands; for example a zfdir may reopen a connection but
will leave it open.  Also, automatic closure will only ever happen in
the same command as automatic opening, i.e a zfdir directly followed by
a zfget will never close the connection automatically.

Information about the previous connection is given by the zfstat
function.  So, for example, if that reports:

     Session:        default
     Not connected.
     Last session:   ftp.bar.com:/pub/textfiles

then the command zfget file.txt will attempt to reopen a connection to
ftp.bar.com, retrieve the file /pub/textfiles/file.txt, and immediately
close the connection again.  On the other hand, zfcd .. will open the
connection in the directory /pub and leave it open.

Note that all the above is local to each session; if you return to a
previous session, the connection for that session is the one which will
be reopened.

25.4.4 Completion
-----------------

Completion of local and remote files, directories, sessions and
bookmarks is supported.  The older, compctl-style completion is defined
when zfinit is called; support for the new widget-based completion
system is provided in the function Completion/Zsh/Command/_zftp, which
should be installed with the other functions of the completion system
and hence should automatically be available.


File: zsh.info,  Node: User Contributions,  Prev: Zftp Function System,  Up: Top

26 User Contributions
*********************

26.1 Description
================

The Zsh source distribution includes a number of items contributed by
the user community.  These are not inherently a part of the shell, and
some may not be available in every zsh installation.  The most
significant of these are documented here.  For documentation on other
contributed items such as shell functions, look for comments in the
function source files.

* Menu:

* Utilities::
* Recent Directories::
* Version Control Information::
* Prompt Themes::
* ZLE Functions::
* Exception Handling::
* MIME Functions::
* Mathematical Functions::
* User Configuration Functions::
* Other Functions::


File: zsh.info,  Node: Utilities,  Next: Recent Directories,  Up: User Contributions

26.2 Utilities
==============

26.2.1 Accessing On-Line Help
-----------------------------

The key sequence ESC h is normally bound by ZLE to execute the run-help
widget (see *note Zsh Line Editor::).  This invokes the run-help command
with the command word from the current input line as its argument.  By
default, run-help is an alias for the man command, so this often fails
when the command word is a shell builtin or a user-defined function.  By
redefining the run-help alias, one can improve the on-line help provided
by the shell.

The helpfiles utility, found in the Util directory of the distribution,
is a Perl program that can be used to process the zsh manual to produce
a separate help file for each shell builtin and for many other shell
features as well.  The autoloadable run-help function, found in
Functions/Misc, searches for these helpfiles and performs several other
tests to produce the most complete help possible for the command.

Help files are installed by default to a subdirectory of /usr/share/zsh
or /usr/local/share/zsh.

To create your own help files with helpfiles, choose or create a
directory where the individual command help files will reside.  For
example, you might choose ~/zsh_help.  If you unpacked the zsh
distribution in your home directory, you would use the commands:

     mkdir ~/zsh_help
     perl ~/zsh-5.0.6/Util/helpfiles ~/zsh_help

The HELPDIR parameter tells run-help where to look for the help files.
When unset, it uses the default installation path.  To use your own set
of help files, set this to the appropriate path in one of your startup
files:

     HELPDIR=~/zsh_help

To use the run-help function, you need to add lines something like the
following to your .zshrc or equivalent startup file:

     unalias run-help
     autoload run-help

Note that in order for 'autoload run-help' to work, the run-help file
must be in one of the directories named in your fpath array (see *note
Parameters Used By The Shell::).  This should already be the case if you
have a standard zsh installation; if it is not, copy
Functions/Misc/run-help to an appropriate directory.

26.2.2 Recompiling Functions
----------------------------

If you frequently edit your zsh functions, or periodically update your
zsh installation to track the latest developments, you may find that
function digests compiled with the zcompile builtin are frequently out
of date with respect to the function source files.  This is not usually
a problem, because zsh always looks for the newest file when loading a
function, but it may cause slower shell startup and function loading.
Also, if a digest file is explicitly used as an element of fpath, zsh
won't check whether any of its source files has changed.

The zrecompile autoloadable function, found in Functions/Misc, can be
used to keep function digests up to date.

zrecompile [ -qt ] [ NAME ... ]
zrecompile [ -qt ] -p ARGS [ -- ARGS ... ]
     This tries to find *.zwc files and automatically re-compile them if
     at least one of the original files is newer than the compiled file.
     This works only if the names stored in the compiled files are full
     paths or are relative to the directory that contains the .zwc file.

     In the first form, each NAME is the name of a compiled file or a
     directory containing *.zwc files that should be checked.  If no
     arguments are given, the directories and *.zwc files in fpath are
     used.

     When -t is given, no compilation is performed, but a return status
     of zero (true) is set if there are files that need to be
     re-compiled and non-zero (false) otherwise.  The -q option quiets
     the chatty output that describes what zrecompile is doing.

     Without the -t option, the return status is zero if all files that
     needed re-compilation could be compiled and non-zero if compilation
     for at least one of the files failed.

     If the -p option is given, the ARGS are interpreted as one or more
     sets of arguments for zcompile, separated by '--'.  For example:

          zrecompile -p \
                     -R ~/.zshrc -- \
                     -M ~/.zcompdump -- \
                     ~/zsh/comp.zwc ~/zsh/Completion/*/_*

     This compiles ~/.zshrc into ~/.zshrc.zwc if that doesn't exist or
     if it is older than ~/.zshrc.  The compiled file will be marked for
     reading instead of mapping.  The same is done for ~/.zcompdump and
     ~/.zcompdump.zwc, but this compiled file is marked for mapping.
     The last line re-creates the file ~/zsh/comp.zwc if any of the
     files matching the given pattern is newer than it.

     Without the -p option, zrecompile does not create function digests
     that do not already exist, nor does it add new functions to the
     digest.

The following shell loop is an example of a method for creating function
digests for all functions in your fpath, assuming that you have write
permission to the directories:

     for ((i=1; i <= $#fpath; ++i)); do
       dir=$fpath[i]
       zwc=${dir:t}.zwc
       if [[ $dir == (.|..) || $dir == (.|..)/* ]]; then
         continue
       fi
       files=($dir/*(N-.))
       if [[ -w $dir:h && -n $files ]]; then
         files=(${${(M)files%/*/*}#/})
         if ( cd $dir:h &&
              zrecompile -p -U -z $zwc $files ); then
           fpath[i]=$fpath[i].zwc
         fi
       fi
     done

The -U and -z options are appropriate for functions in the default zsh
installation fpath; you may need to use different options for your
personal function directories.

Once the digests have been created and your fpath modified to refer to
them, you can keep them up to date by running zrecompile with no
arguments.

26.2.3 Keyboard Definition
--------------------------

The large number of possible combinations of keyboards, workstations,
terminals, emulators, and window systems makes it impossible for zsh to
have built-in key bindings for every situation.  The zkbd utility, found
in Functions/Misc, can help you quickly create key bindings for your
configuration.

Run zkbd either as an autoloaded function, or as a shell script:

     zsh -f ~/zsh-5.0.6/Functions/Misc/zkbd

When you run zkbd, it first asks you to enter your terminal type; if the
default it offers is correct, just press return.  It then asks you to
press a number of different keys to determine characteristics of your
keyboard and terminal; zkbd warns you if it finds anything out of the
ordinary, such as a Delete key that sends neither ^H nor ^?.

The keystrokes read by zkbd are recorded as a definition for an
associative array named key, written to a file in the subdirectory .zkbd
within either your HOME or ZDOTDIR directory.  The name of the file is
composed from the TERM, VENDOR and OSTYPE parameters, joined by hyphens.

You may read this file into your .zshrc or another startup file with the
'source' or '.' commands, then reference the key parameter in bindkey
commands, like this:

     source ${ZDOTDIR:-$HOME}/.zkbd/$TERM-$VENDOR-$OSTYPE
     [[ -n ${key[Left]} ]] && bindkey "${key[Left]}" backward-char
     [[ -n ${key[Right]} ]] && bindkey "${key[Right]}" forward-char
     # etc.

Note that in order for 'autoload zkbd' to work, the zkdb file must be in
one of the directories named in your fpath array (see *note Parameters
Used By The Shell::).  This should already be the case if you have a
standard zsh installation; if it is not, copy Functions/Misc/zkbd to an
appropriate directory.

26.2.4 Dumping Shell State
--------------------------

Occasionally you may encounter what appears to be a bug in the shell,
particularly if you are using a beta version of zsh or a development
release.  Usually it is sufficient to send a description of the problem
to one of the zsh mailing lists (see *note Mailing Lists::), but
sometimes one of the zsh developers will need to recreate your
environment in order to track the problem down.

The script named reporter, found in the Util directory of the
distribution, is provided for this purpose.  (It is also possible to
autoload reporter, but reporter is not installed in fpath by default.)
This script outputs a detailed dump of the shell state, in the form of
another script that can be read with 'zsh -f' to recreate that state.

To use reporter, read the script into your shell with the '.' command
and redirect the output into a file:

     . ~/zsh-5.0.6/Util/reporter > zsh.report

You should check the zsh.report file for any sensitive information such
as passwords and delete them by hand before sending the script to the
developers.  Also, as the output can be voluminous, it's best to wait
for the developers to ask for this information before sending it.

You can also use reporter to dump only a subset of the shell state.
This is sometimes useful for creating startup files for the first time.
Most of the output from reporter is far more detailed than usually is
necessary for a startup file, but the aliases, options, and zstyles
states may be useful because they include only changes from the
defaults.  The bindings state may be useful if you have created any of
your own keymaps, because reporter arranges to dump the keymap creation
commands as well as the bindings for every keymap.

As is usual with automated tools, if you create a startup file with
reporter, you should edit the results to remove unnecessary commands.
Note that if you're using the new completion system, you should _not_
dump the functions state to your startup files with reporter; use the
compdump function instead (see *note Completion System::).

reporter [ STATE ... ]
     Print to standard output the indicated subset of the current shell
     state.  The STATE arguments may be one or more of:

     all
          Output everything listed below.
     aliases
          Output alias definitions.
     bindings
          Output ZLE key maps and bindings.
     completion
          Output old-style compctl commands.  New completion is covered
          by functions and zstyles.
     functions
          Output autoloads and function definitions.
     limits
          Output limit commands.
     options
          Output setopt commands.
     styles
          Same as zstyles.
     variables
          Output shell parameter assignments, plus export commands for
          any environment variables.
     zstyles
          Output zstyle commands.

     If the STATE is omitted, all is assumed.

     With the exception of 'all', every STATE can be abbreviated by any
     prefix, even a single letter; thus a is the same as aliases, z is
     the same as zstyles, etc.

26.2.5 Manipulating Hook Functions
----------------------------------

add-zsh-hook [-dD] HOOK FUNCTION
     Several functions are special to the shell, as described in the
     section Special Functions, *note Functions::, in that they are
     automatic called at a specific point during shell execution.  Each
     has an associated array consisting of names of functions to be
     called at the same point; these are so-called 'hook functions'.
     The shell function add-zsh-hook provides a simple way of adding or
     removing functions from the array.

     HOOK is one of chpwd, periodic, precmd, preexec, zshaddhistory,
     zshexit, or zsh_directory_name, the special functions in question.
     Note that zsh_directory_name is called in a different way from the
     other functions, but may still be manipulated as a hook.

     FUNCTION is name of an ordinary shell function.  If no options are
     given this will be added to the array of functions to be executed
     in the given context.

     If the option -d is given, the FUNCTION is removed from the array
     of functions to be executed.

     If the option -D is given, the FUNCTION is treated as a pattern and
     any matching names of functions are removed from the array of
     functions to be executed.

     The options -U, -z and -k are passed as arguments to autoload for
     FUNCTION.  For functions contributed with zsh, the options -Uz are
     appropriate.


File: zsh.info,  Node: Recent Directories,  Next: Version Control Information,  Prev: Utilities,  Up: User Contributions

26.3 Remembering Recent Directories
===================================

The function cdr allows you to change the working directory to a
previous working directory from a list maintained automatically.  It is
similar in concept to the directory stack controlled by the pushd, popd
and dirs builtins, but is more configurable, and as it stores all
entries in files it is maintained across sessions and (by default)
between terminal emulators in the current session.  (The pushd directory
stack is not actually modified or used by cdr unless you configure it to
do so as described in the configuration section below.)

26.3.1 Installation
-------------------

The system works by means of a hook function that is called every time
the directory changes.  To install the system, autoload the required
functions and use the add-zsh-hook function described above:

     autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
     add-zsh-hook chpwd chpwd_recent_dirs

Now every time you change directly interactively, no matter which
command you use, the directory to which you change will be remembered in
most-recent-first order.

26.3.2 Use
----------

All direct user interaction is via the cdr function.

The argument to cdr is a number N corresponding to the Nth most recently
changed-to directory.  1 is the immediately preceding directory; the
current directory is remembered but is not offered as a destination.
Note that if you have multiple windows open 1 may refer to a directory
changed to in another window; you can avoid this by having per-terminal
files for storing directory as described for the recent-dirs-file style
below.

If you set the recent-dirs-default style described below cdr will behave
the same as cd if given a non-numeric argument, or more than one
argument.  The recent directory list is updated just the same however
you change directory.

If the argument is omitted, 1 is assumed.  This is similar to pushd's
behaviour of swapping the two most recent directories on the stack.

Completion for the argument to cdr is available if compinit has been
run; menu selection is recommended, using:

     zstyle ':completion:*:*:cdr:*:*' menu selection

to allow you to cycle through recent directories; the order is
preserved, so the first choice is the most recent directory before the
current one.  The verbose style is also recommended to ensure the
directory is shown; this style is on by default so no action is required
unless you have changed it.

26.3.3 Options
--------------

The behaviour of cdr may be modified by the following options.

-l
     lists the numbers and the corresponding directories in abbreviated
     form (i.e.  with ~ substitution reapplied), one per line.  The
     directories here are not quoted (this would only be an issue if a
     directory name contained a newline).  This is used by the
     completion system.

-r
     sets the variable reply to the current set of directories.  Nothing
     is printed and the directory is not changed.

-e
     allows you to edit the list of directories, one per line.  The list
     can be edited to any extent you like; no sanity checking is
     performed.  Completion is available.  No quoting is necessary
     (except for newlines, where I have in any case no sympathy);
     directories are in unabbreviated from and contain an absolute path,
     i.e.  they start with /.  Usually the first entry should be left as
     the current directory.

26.3.4 Configuration
--------------------

Configuration is by means of the styles mechanism that should be
familiar from completion; if not, see the description of the zstyle
command in *note The zsh/zutil Module::.  The context for setting styles
should be ':chpwd:*' in case the meaning of the context is extended in
future, for example:

     zstyle ':chpwd:*' recent-dirs-max 0

sets the value of the recent-dirs-max style to 0.  In practice the style
name is specific enough that a context of '*' should be fine.

An exception is recent-dirs-insert, which is used exclusively by the
completion system and so has the usual completion system context
(':completion:*' if nothing more specific is needed), though again '*'
should be fine in practice.

recent-dirs-default
     If true, and the command is expecting a recent directory index, and
     either there is more than one argument or the argument is not an
     integer, then fall through to "cd".  This allows the lazy to use
     only one command for directory changing.  Completion recognises
     this, too; see recent-dirs-insert for how to control completion
     when this option is in use.

recent-dirs-file
     The file where the list of directories is saved.  The default is
     ${ZDOTDIR:-$HOME}/.chpwd-recent-dirs, i.e.  this is in your home
     directory unless you have set the variable ZDOTDIR to point
     somewhere else.  Directory names are saved in $'...' quoted form,
     so each line in the file can be supplied directly to the shell as
     an argument.

     The value of this style may be an array.  In this case, the first
     file in the list will always be used for saving directories while
     any other files are left untouched.  When reading the recent
     directory list, if there are fewer than the maximum number of
     entries in the first file, the contents of later files in the array
     will be appended with duplicates removed from the list shown.  The
     contents of the two files are not sorted together, i.e.  all the
     entries in the first file are shown first.  The special value + can
     appear in the list to indicate the default file should be read at
     that point.  This allows effects like the following:

          zstyle ':chpwd:*' recent-dirs-file \
          ~/.chpwd-recent-dirs-${TTY##*/} +

     Recent directories are read from a file numbered according to the
     terminal.  If there are insufficient entries the list is
     supplemented from the default file.

     It is possible to use zstyle -e to make the directory configurable
     at run time:

          zstyle -e ':chpwd:*' recent-dirs-file pick-recent-dirs-file
          pick-recent-dirs-file() {
            if [[ $PWD = ~/text/writing(|/*) ]]; then
              reply=(~/.chpwd-recent-dirs-writing)
            else
              reply=(+)
            fi
          }

     In this example, if the current directory is ~/text/writing or a
     directory under it, then use a special file for saving recent
     directories, else use the default.

recent-dirs-insert
     Used by completion.  If recent-dirs-default is true, then setting
     this to true causes the actual directory, rather than its index, to
     be inserted on the command line; this has the same effect as using
     the corresponding index, but makes the history clearer and the line
     easier to edit.  With this setting, if part of an argument was
     already typed, normal directory completion rather than recent
     directory completion is done; this is because recent directory
     completion is expected to be done by cycling through entries menu
     fashion.

     If the value of the style is always, then only recent directories
     will be completed; in that case, use the cd command when you want
     to complete other directories.

     If the value is fallback, recent directories will be tried first,
     then normal directory completion is performed if recent directory
     completion failed to find a match.

     Finally, if the value is both then both sets of completions are
     presented; the usual tag mechanism can be used to distinguish
     results, with recent directories tagged as recent-dirs.  Note that
     the recent directories inserted are abbreviated with directory
     names where appropriate.

recent-dirs-max
     The maximum number of directories to save to the file.  If this is
     zero or negative there is no maximum.  The default is 20.  Note
     this includes the current directory, which isn't offered, so the
     highest number of directories you will be offered is one less than
     the maximum.

recent-dirs-prune
     This style is an array determining what directories should (or
     should not) be added to the recent list.  Elements of the array can
     include:

     parent
          Prune parents (more accurately, ancestors) from the recent
          list.  If present, changing directly down by any number of
          directories causes the current directory to be overwritten.
          For example, changing from ~pws to ~pws/some/other/dir causes
          ~pws not to be left on the recent directory stack.  This only
          applies to direct changes to descendant directories; earlier
          directories on the list are not pruned.  For example, changing
          from ~pws/yet/another to ~pws/some/other/dir does not cause
          ~pws to be pruned.

     pattern:PATTERN
          Gives a zsh pattern for directories that should not be added
          to the recent list (if not already there).  This element can
          be repeated to add different patterns.  For example,
          'pattern:/tmp(|/*)' stops /tmp or its descendants from being
          added.  The EXTENDED_GLOB option is always turned on for these
          patterns.

recent-dirs-pushd
     If set to true, cdr will use pushd instead of cd to change the
     directory, so the directory is saved on the directory stack.  As
     the directory stack is completely separate from the list of files
     saved by the mechanism used in this file there is no obvious reason
     to do this.

26.3.5 Use with dynamic directory naming
----------------------------------------

It is possible to refer to recent directories using the dynamic
directory name syntax by using the supplied function
zsh_directory_name_cdr a hook:

     autoload -Uz add-zsh-hook
     add-zsh-hook -Uz zsh_directory_name zsh_directory_name_cdr

When this is done, ~[1] will refer to the most recent directory other
than $PWD, and so on.  Completion after ~[... also works.

26.3.6 Details of directory handling
------------------------------------

This section is for the curious or confused; most users will not need to
know this information.

Recent directories are saved to a file immediately and hence are
preserved across sessions.  Note currently no file locking is applied:
the list is updated immediately on interactive commands and nowhere else
(unlike history), and it is assumed you are only going to change
directory in one window at once.  This is not safe on shared accounts,
but in any case the system has limited utility when someone else is
changing to a different set of directories behind your back.

To make this a little safer, only directory changes instituted from the
command line, either directly or indirectly through shell function calls
(but not through subshells, evals, traps, completion functions and the
like) are saved.  Shell functions should use cd -q or pushd -q to avoid
side effects if the change to the directory is to be invisible at the
command line.  See the contents of the function chpwd_recent_dirs for
more details.


File: zsh.info,  Node: Version Control Information,  Next: Prompt Themes,  Prev: Recent Directories,  Up: User Contributions

26.4 Gathering information from version control systems
=======================================================

In a lot of cases, it is nice to automatically retrieve information from
version control systems (VCSs), such as subversion, CVS or git, to be
able to provide it to the user; possibly in the user's prompt.  So that
you can instantly tell which branch you are currently on, for example.

In order to do that, you may use the vcs_info function.

The following VCSs are supported, showing the abbreviated name by which
they are referred to within the system:
Bazaar (bzr)
     http://bazaar-vcs.org/
Codeville (cdv)
     http://codeville.org/
Concurrent Versioning System (cvs)
     http://www.nongnu.org/cvs/
Darcs (darcs)
     http://darcs.net/
Fossil (fossil)
     http://fossil-scm.org/
Git (git)
     http://git-scm.com/
GNU arch (tla)
     http://www.gnu.org/software/gnu-arch/
Mercurial (hg)
     http://mercurial.selenic.com/
Monotone (mtn)
     http://monotone.ca/
Perforce (p4)
     http://www.perforce.com/
Subversion (svn)
     http://subversion.tigris.org/
SVK (svk)
     http://svk.bestpractical.com/

There is also support for the patch management system quilt
(http://savannah.nongnu.org/projects/quilt).  See Quilt Support below
for details.

To load vcs_info:

     autoload -Uz vcs_info

It can be used in any existing prompt, because it does not require any
specific $psvar entries to be available.

26.4.1 Quickstart
-----------------

To get this feature working quickly (including colors), you can do the
following (assuming, you loaded vcs_info properly - see above):

     zstyle ':vcs_info:*' actionformats \
         '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{3}|%F{1}%a%F{5}]%f '
     zstyle ':vcs_info:*' formats       \
         '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{5}]%f '
     zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F{1}:%F{3}%r'
     precmd () { vcs_info }
     PS1='%F{5}[%F{2}%n%F{5}] %F{3}%3~ ${vcs_info_msg_0_}%f%# '

Obviously, the last two lines are there for demonstration.  You need to
call vcs_info from your precmd function.  Once that is done you need a
single quoted '${vcs_info_msg_0_}' in your prompt.

To be able to use '${vcs_info_msg_0_}' directly in your prompt like
this, you will need to have the PROMPT_SUBST option enabled.

Now call the vcs_info_printsys utility from the command line:

     % vcs_info_printsys
     ## list of supported version control backends:
     ## disabled systems are prefixed by a hash sign (#)
     bzr
     cdv
     cvs
     darcs
     fossil
     git
     hg
     mtn
     p4
     svk
     svn
     tla
     ## flavours (cannot be used in the enable or disable styles; they
     ## are enabled and disabled with their master [git-svn -> git])
     ## they *can* be used in contexts: ':vcs_info:git-svn:*'.
     git-p4
     git-svn
     hg-git
     hg-hgsubversion
     hg-hgsvn

You may not want all of these because there is no point in running the
code to detect systems you do not use.  So there is a way to disable
some backends altogether:

     zstyle ':vcs_info:*' disable bzr cdv darcs mtn svk tla

You may also pick a few from that list and enable only those:

     zstyle ':vcs_info:*' enable git cvs svn

If you rerun vcs_info_printsys after one of these commands, you will see
the backends listed in the disable style (or backends not in the enable
style - if you used that) marked as disabled by a hash sign.  That means
the detection of these systems is skipped _completely_.  No wasted time
there.

26.4.2 Configuration
--------------------

The vcs_info feature can be configured via zstyle.

First, the context in which we are working:
     :vcs_info:VCS-STRING:USER-CONTEXT:REPO-ROOT-NAME

VCS-STRING
     is one of: 'git', 'git-svn', 'git-p4', 'hg', 'hg-git',
     'hg-hgsubversion', 'hg-hgsvn', 'darcs', 'bzr', 'cdv', 'mtn', 'svn',
     'cvs', 'svk', 'tla', 'p4' or 'fossil'.  When hooks are active the
     hooks name is added after a '+'.  (See 'Hooks in vcs_info' below.)

USER-CONTEXT
     is a freely configurable string, assignable by the user as the
     first argument to vcs_info (see its description below).

REPO-ROOT-NAME
     is the name of a repository in which you want a style to match.
     So, if you want a setting specific to /usr/src/zsh, with that being
     a CVS checkout, you can set REPO-ROOT-NAME to zsh to make it so.

There are three special values for VCS-STRING: The first is named
-init-, that is in effect as long as there was no decision what VCS
backend to use.  The second is -preinit-; it is used _before_ vcs_info
is run, when initializing the data exporting variables.  The third
special value is formats and is used by the vcs_info_lastmsg for looking
up its styles.

The initial value of REPO-ROOT-NAME is -all- and it is replaced with the
actual name, as soon as it is known.  Only use this part of the context
for defining the formats, actionformats or branchformat styles, as it is
guaranteed that REPO-ROOT-NAME is set up correctly for these only.  For
all other styles, just use '*' instead.

There are two pre-defined values for USER-CONTEXT:
default
     the one used if none is specified
command
     used by vcs_info_lastmsg to lookup its styles

You can of course use ':vcs_info:*' to match all VCSs in all
user-contexts at once.

This is a description of all styles that are looked up.

formats
     A list of formats, used when actionformats is not used (which is
     most of the time).

actionformats
     A list of formats, used if there is a special action going on in
     your current repository; like an interactive rebase or a merge
     conflict.

branchformat
     Some backends replace %b in the formats and actionformats styles
     above, not only by a branch name but also by a revision number.
     This style lets you modify how that string should look.

nvcsformats
     These "formats" are exported when we didn't detect a version
     control system for the current directory or vcs_info was disabled.
     This is useful if you want vcs_info to completely take over the
     generation of your prompt.  You would do something like
     PS1='${vcs_info_msg_0_}' to accomplish that.

hgrevformat
     hg uses both a hash and a revision number to reference a specific
     changeset in a repository.  With this style you can format the
     revision string (see branchformat) to include either or both.  It's
     only useful when get-revision is true.  Note, the full 40-character
     revision id is not available (except when using the use-simple
     option) because executing hg more than once per prompt is too slow;
     you may customize this behavior using hooks.

max-exports
     Defines the maximum number of vcs_info_msg_*_ variables vcs_info
     will export.

enable
     A list of backends you want to use.  Checked in the -init- context.
     If this list contains an item called NONE no backend is used at all
     and vcs_info will do nothing.  If this list contains ALL, vcs_info
     will use all known backends.  Only with ALL in enable will the
     disable style have any effect.  ALL and NONE are case insensitive.

disable
     A list of VCSs you don't want vcs_info to test for repositories
     (checked in the -init- context, too).  Only used if enable contains
     ALL.

disable-patterns
     A list of patterns that are checked against $PWD.  If a pattern
     matches, vcs_info will be disabled.  This style is checked in the
     :vcs_info:-init-:*:-all- context.

     Say, ~/.zsh is a directory under version control, in which you do
     not want vcs_info to be active, do:
          zstyle ':vcs_info:*' disable-patterns "$HOME/.zsh(|/*)"

use-quilt
     If enabled, the quilt support code is active in 'addon' mode.  See
     Quilt Support for details.

quilt-standalone
     If enabled, 'standalone' mode detection is attempted if no VCS is
     active in a given directory.  See Quilt Support for details.

quilt-patch-dir
     Overwrite the value of the $QUILT_PATCHES environment variable.
     See Quilt Support for details.

quiltcommand
     When quilt itself is called in quilt support the value of this
     style is used as the command name.

check-for-changes
     If enabled, this style causes the %c and %u format escapes to show
     when the working directory has uncommitted changes.  The strings
     displayed by these escapes can be controlled via the stagedstr and
     unstagedstr styles.  The only backends that currently support this
     option are git, hg, and bzr (the latter two only support unstaged).

     For this style to be evaluated with the hg backend, the
     get-revision style needs to be set and the use-simple style needs
     to be unset.  The latter is the default; the former is not.

     With the bzr backend, _lightweight checkouts_ only honor this style
     if the use-server style is set.

     Note, the actions taken if this style is enabled are potentially
     expensive (read: they may be slow, depending on how big the current
     repository is).  Therefore, it is disabled by default.

check-for-staged-changes
     This style is like check-for-changes, but it never checks the
     worktree files, only the metadata in the .${vcs} dir.  Therefore,
     this style initializes only the %c escape (with stagedstr) but not
     the %u escape.  This style is faster than check-for-changes.

     In the git backend, this style checks for changes in the index.
     Other backends do not currently implement this style.

     This style is disabled by default.

stagedstr
     This string will be used in the %c escape if there are staged
     changes in the repository.

unstagedstr
     This string will be used in the %u escape if there are unstaged
     changes in the repository.

command
     This style causes vcs_info to use the supplied string as the
     command to use as the VCS's binary.  Note, that setting this in
     ':vcs_info:*' is not a good idea.

     If the value of this style is empty (which is the default), the
     used binary name is the name of the backend in use (e.g.  svn is
     used in an svn repository).

     The repo-root-name part in the context is always the default -all-
     when this style is looked up.

     For example, this style can be used to use binaries from
     non-default installation directories.  Assume, git is installed in
     /usr/bin but your sysadmin installed a newer version in
     /usr/local/bin.  Instead of changing the order of your $PATH
     parameter, you can do this:
          zstyle ':vcs_info:git:*:-all-' command /usr/local/bin/git

use-server
     This is used by the Perforce backend (p4) to decide if it should
     contact the Perforce server to find out if a directory is managed
     by Perforce.  This is the only reliable way of doing this, but runs
     the risk of a delay if the server name cannot be found.  If the
     server (more specifically, the host:port pair describing the
     server) cannot be contacted, its name is put into the associative
     array vcs_info_p4_dead_servers and is not contacted again during
     the session until it is removed by hand.  If you do not set this
     style, the p4 backend is only usable if you have set the
     environment variable P4CONFIG to a file name and have corresponding
     files in the root directories of each Perforce client.  See
     comments in the function VCS_INFO_detect_p4 for more detail.

     The Bazaar backend (bzr) uses this to permit contacting the server
     about lightweight checkouts, see the check-for-changes style.

use-simple
     If there are two different ways of gathering information, you can
     select the simpler one by setting this style to true; the default
     is to use the not-that-simple code, which is potentially a lot
     slower but might be more accurate in all possible cases.  This
     style is used by the bzr and hg backends.  In the case of hg it
     will invoke the external hexdump program to parse the binary
     dirstate cache file; this method will not return the local revision
     number.

get-revision
     If set to true, vcs_info goes the extra mile to figure out the
     revision of a repository's work tree (currently for the git and hg
     backends, where this kind of information is not always vital).  For
     git, the hash value of the currently checked out commit is
     available via the %i expansion.  With hg, the local revision number
     and the corresponding global hash are available via %i.

get-mq
     If set to true, the hg backend will look for a Mercurial Queue (mq)
     patch directory.  Information will be available via the '%m'
     replacement.

get-bookmarks
     If set to true, the hg backend will try to get a list of current
     bookmarks.  They will be available via the '%m' replacement.

use-prompt-escapes
     Determines if we assume that the assembled string from vcs_info
     includes prompt escapes.  (Used by vcs_info_lastmsg.)

debug
     Enable debugging output to track possible problems.  Currently this
     style is only used by vcs_info's hooks system.

hooks
     A list style that defines hook-function names.  See 'Hooks in
     vcs_info' below for details.

The default values for these styles in all contexts are:

formats
     " (%s)-[%b]%u%c-"
actionformats
     " (%s)-[%b|%a]%u%c-"
branchformat
     "%b:%r" (for bzr, svn, svk and hg)
nvcsformats
     ""
hgrevformat
     "%r:%h"
max-exports
     2
enable
     ALL
disable
     (empty list)
disable-patterns
     (empty list)
check-for-changes
     false
check-for-staged-changes
     false
stagedstr
     (string: "S")
unstagedstr
     (string: "U")
command
     (empty string)
use-server
     false
use-simple
     false
get-revision
     false
get-mq
     true
get-bookmarks
     false
use-prompt-escapes
     true
debug
     false
hooks
     (empty list)
use-quilt
     false
quilt-standalone
     false
quilt-patch-dir
     empty - use $QUILT_PATCHES
quiltcommand
     quilt

In normal formats and actionformats the following replacements are done:

%s
     The VCS in use (git, hg, svn, etc.).
%b
     Information about the current branch.
%a
     An identifier that describes the action.  Only makes sense in
     actionformats.
%i
     The current revision number or identifier.  For hg the hgrevformat
     style may be used to customize the output.
%c
     The string from the stagedstr style if there are staged changes in
     the repository.
%u
     The string from the unstagedstr style if there are unstaged changes
     in the repository.
%R
     The base directory of the repository.
%r
     The repository name.  If %R is /foo/bar/repoXY, %r is repoXY.
%S
     A subdirectory within a repository.  If $PWD is
     /foo/bar/repoXY/beer/tasty, %S is beer/tasty.
%m
     A "misc" replacement.  It is at the discretion of the backend to
     decide what this replacement expands to.  It is currently used by
     the hg and git backends to display patch information from the mq
     and stgit extensions.

In branchformat these replacements are done:

%b
     The branch name.
%r
     The current revision number or the hgrevformat style for hg.

In hgrevformat these replacements are done:

%r
     The current local revision number.
%h
     The current global revision identifier.

In patch-format and nopatch-format these replacements are done:

%p
     The name of the top-most applied patch (applied-string).
%u
     The number of unapplied patches (unapplied-string).
%n
     The number of applied patches.
%c
     The number of unapplied patches.
%a
     The number of all patches.
%g
     The names of active mq guards (hg backend).
%G
     The number of active mq guards (hg backend).

Not all VCS backends have to support all replacements.  For nvcsformats
no replacements are performed at all, it is just a string.

26.4.3 Oddities
---------------

If you want to use the %b (bold off) prompt expansion in formats, which
expands %b itself, use %%b.  That will cause the vcs_info expansion to
replace %%b with %b, so that zsh's prompt expansion mechanism can handle
it.  Similarly, to hand down %b from branchformat, use %%%%b.  Sorry for
this inconvenience, but it cannot be easily avoided.  Luckily we do not
clash with a lot of prompt expansions and this only needs to be done for
those.

26.4.4 Quilt Support
--------------------

'Quilt' is not a version control system, therefore this is not
implemented as a backend.  It can help keeping track of a series of
patches.  People use it to keep a set of changes they want to use on top
of software packages (which is tightly integrated into the package build
process - the Debian project does this for a large number of packages).
Quilt can also help individual developers keep track of their own
patches on top of real version control systems.

The vcs_info integration tries to support both ways of using quilt by
having two slightly different modes of operation: 'addon' mode and
'standalone' mode).

For 'addon' mode to become active vcs_info must have already detected a
real version control system controlling the directory.  If that is the
case, a directory that holds quilt's patches needs to be found.  That
directory is configurable via the 'QUILT_PATCHES' environment variable.
If that variable exists its value is used, otherwise the value 'patches'
is assumed.  The value from $QUILT_PATCHES can be overwritten using the
`quilt-patches' style.  (Note: you can use vcs_info to keep the value of
$QUILT_PATCHES correct all the time via the post-quilt hook).

When the directory in question is found, quilt is assumed to be active.
To gather more information, vcs_info looks for a directory called '.pc';
Quilt uses that directory to track its current state.  If this directory
does not exist we know that quilt has not done anything to the working
directory (read: no patches have been applied yet).

If patches are applied, vcs_info will try to find out which.  If you
want to know which patches of a series are not yet applied, you need to
activate the get-unapplied style in the appropriate context.

vcs_info allows for very detailed control over how the gathered
information is presented (see the below sections, 'Styles' and 'Hooks in
vcs_info'), all of which are documented below.  Note there are a number
of other patch tracking systems that work on top of a certain version
control system (like stgit for 'git', or mq for 'hg'); the configuration
for systems like that are generally configured the same way as the
'quilt' support.

If the 'quilt' support is working in 'addon' mode, the produced string
is available as a simple format replacement (%Q to be precise), which
can be used in formats and actionformats; see below for details).

If, on the other hand, the support code is working in 'standalone' mode,
vcs_info will pretend as if quilt were an actual version control system.
That means that the version control system identifier (which otherwise
would be something like 'svn' or 'cvs') will be set to '-quilt-'.  This
has implications on the used style context where this identifier is the
second element.  vcs_info will have filled in a proper value for the
"repository's" root directory and the string containing the information
about quilt's state will be available as the 'misc' replacement (and %Q
for compatibility with 'addon' mode.

What is left to discuss is how 'standalone' mode is detected.  The
detection itself is a series of searches for directories.  You can have
this detection enabled all the time in every directory that is not
otherwise under version control.  If you know there is only a limited
set of trees where you would like vcs_info to try and look for Quilt in
'standalone' mode to minimise the amount of searching on every call to
vcs_info, there are a number of ways to do that:

Essentially, 'standalone' mode detection is controlled by a style called
'quilt-standalone'.  It is a string style and its value can have
different effects.  The simplest values are: 'always' to run detection
every time vcs_info is run, and 'never' to turn the detection off
entirely.

If the value of quilt-standalone is something else, it is interpreted
differently.  If the value is the name of a scalar variable the value of
that variable is checked and that value is used in the same
'always'/'never' way as described above.

If the value of quilt-standalone is an array, the elements of that array
are used as directory names under which you want the detection to be
active.

If quilt-standalone is an associative array, the keys are taken as
directory names under which you want the detection to be active, but
only if the corresponding value is the string 'true'.

Last, but not least, if the value of quilt-standalone is the name of a
function, the function is called without arguments and the return value
decides whether detection should be active.  A '0' return value is true;
a non-zero return value is interpreted as false.

Note, if there is both a function and a variable by the name of
quilt-standalone, the function will take precedence.

26.4.5 Function Descriptions (Public API)
-----------------------------------------

vcs_info [USER-CONTEXT]
     The main function, that runs all backends and assembles all data
     into ${vcs_info_msg_*_}.  This is the function you want to call
     from precmd if you want to include up-to-date information in your
     prompt (see Variable description below).  If an argument is given,
     that string will be used instead of default in the USER-CONTEXT
     field of the style context.

vcs_info_hookadd
     Statically registers a number of functions to a given hook.  The
     hook needs to be given as the first argument; what follows is a
     list of hook-function names to register to the hook.  The '+vi-'
     prefix needs to be left out here.  See 'Hooks in vcs_info' below
     for details.

vcs_info_hookdel
     Remove hook-functions from a given hook.  The hook needs to be
     given as the first non-option argument; what follows is a list of
     hook-function names to un-register from the hook.  If '-a' is used
     as the first argument, all occurances of the functions are
     unregistered.  Otherwise only the last occurance is removed (if a
     function was registered to a hook more than once) .  The '+vi-'
     prefix needs to be left out here.  See 'Hooks in vcs_info' below
     for details.

vcs_info_lastmsg
     Outputs the last ${vcs_info_msg_*_} value.  Takes into account the
     value of the use-prompt-escapes style in
     ':vcs_info:formats:command:-all-'.  It also only prints max-exports
     values.

vcs_info_printsys [USER-CONTEXT]
     Prints a list of all supported version control systems.  Useful to
     find out possible contexts (and which of them are enabled) or
     values for the disable style.

vcs_info_setsys
     Initializes vcs_info's internal list of available backends.  With
     this function, you can add support for new VCSs without restarting
     the shell.

All functions named VCS_INFO_* are for internal use only.

26.4.6 Variable Description
---------------------------

${vcs_info_msg_N_} (Note the trailing underscore)
     Where N is an integer, e.g., vcs_info_msg_0_.  These variables are
     the storage for the informational message the last vcs_info call
     has assembled.  These are strongly connected to the formats,
     actionformats and nvcsformats styles described above.  Those styles
     are lists.  The first member of that list gets expanded into
     ${vcs_info_msg_0_}, the second into ${vcs_info_msg_1_} and the Nth
     into ${vcs_info_msg_N-1_}.  These parameters are exported into the
     environment.  (See the max-exports style above.)

All variables named VCS_INFO_* are for internal use only.

26.4.7 Hooks in vcs_info
------------------------

Hooks are places in vcs_info where you can run your own code.  That code
can communicate with the code that called it and through that, change
the system's behaviour.

For configuration, hooks change the style context:
     :vcs_info:VCS-STRING+HOOK-NAME:USER-CONTEXT:REPO-ROOT-NAME

To register functions to a hook, you need to list them in the hooks
style in the appropriate context.

Example:
     zstyle ':vcs_info:*+foo:*' hooks bar baz

This registers functions to the hook 'foo' for all backends.  In order
to avoid namespace problems, all registered function names are prepended
by a '+vi-', so the actual functions called for the 'foo' hook are
'+vi-bar' and '+vi-baz'.

If you would like to register a function to a hook regardless of the
current context, you may use the vcs_info_hookadd function.  To remove a
function that was added like that, the vcs_info_hookdel function can be
used.

If something seems weird, you can enable the 'debug' boolean style in
the proper context and the hook-calling code will print what it tried to
execute and whether the function in question existed.

When you register more than one function to a hook, all functions are
executed one after another until one function returns non-zero or until
all functions have been called.  Context-sensitive hook functions are
executed before statically registered ones (the ones added by
vcs_info_hookadd).

You may pass data between functions via an associative array, user_data.
For example:

     +vi-git-myfirsthook(){
         user_data[myval]=$myval
     }
     +vi-git-mysecondhook(){
         # do something with ${user_data[myval]}
     }

There are a number of variables that are special in hook contexts:

ret
     The return value that the hooks system will return to the caller.
     The default is an integer 'zero'.  If and how a changed ret value
     changes the execution of the caller depends on the specific hook.
     See the hook documentation below for details.

hook_com
     An associated array which is used for bidirectional communication
     from the caller to hook functions.  The used keys depend on the
     specific hook.

context
     The active context of the hook.  Functions that wish to change this
     variable should make it local scope first.

vcs
     The current VCS after it was detected.  The same values as in the
     enable/disable style are used.  Available in all hooks except
     start-up.

Finally, the full list of currently available hooks:

start-up
     Called after starting vcs_info but before the VCS in this directory
     is determined.  It can be used to deactivate vcs_info temporarily
     if necessary.  When ret is set to 1, vcs_info aborts and does
     nothing; when set to 2, vcs_info sets up everything as if no
     version control were active and exits.

pre-get-data
     Same as start-up but after the VCS was detected.

gen-hg-bookmark-string
     Called in the Mercurial backend when a bookmark string is
     generated; the get-revision and get-bookmarks styles must be true.

     This hook gets the names of the Mercurial bookmarks that vcs_info
     collected from 'hg'.

     When setting ret to non-zero, the string in
     ${hook_com[hg-bookmark-string]} will be used in the %m escape in
     formats and actionformats and will be availabe in the global
     backend_misc array as ${backend_misc[bookmarks]}.

gen-applied-string
     Called in the git (with stgit), and hg (with mq) backends and in
     quilt support when the applied-string is generated; the use-quilt
     zstyle must be true for quilt (the mq and stgit backends are active
     by default).

     This hook gets the names of all applied patches which vcs_info
     collected so far in the opposite order, which means that the first
     argument is the top-most patch and so forth.

     When setting ret to non-zero, the string in
     ${hook_com[applied-string]} will be used in the %m escape in
     formats and actionformats; it will be available in the global
     backend_misc array as $backend_misc[patches]}; and it will be
     available as %p in the patch-format and nopatch-format styles.

gen-unapplied-string
     Called in the git (with stgit), and hg (with mq) backend and in
     quilt support when the unapplied-string is generated; the
     get-unapplied style must be true.

     This hook gets the names of all unapplied patches which vcs_info
     collected so far in the opposite order, which mean that the first
     argument is the patch next-in-line to be applied and so forth.

     When setting ret to non-zero, the string in
     ${hook_com[unapplied-string]} will be available as %u in the
     patch-format and nopatch-format styles.

gen-mqguards-string
     Called in the hg backend when guards-string is generated; the
     get-mq style must be true (default).

     This hook gets the names of any active mq guards.

     When setting ret to non-zero, the string in
     ${hook_com[guards-string]} will be used in the %g escape in the
     patch-format and nopatch-format styles.

no-vcs
     This hooks is called when no version control system was detected.

     The 'hook_com' parameter is not used.

post-backend
     Called as soon as the backend has finished collecting information.

     The 'hook_com' keys available are as for the set-message hook.

post-quilt
     Called after the quilt support is done.  The following information
     is passed as arguments to the hook: 1.  the quilt-support mode
     ('addon' or 'standalone'); 2.  the directory that contains the
     patch series; 3.  the directory that holds quilt's status
     information (the '.pc' directory) or the string "-nopc-" if that
     directory wasn't found.

     The 'hook_com' parameter is not used.

set-branch-format
     Called before 'branchformat' is set.  The only argument to the hook
     is the format that is configured at this point.

     The 'hook_com' keys considered are 'branch' and 'revision'.  They
     are set to the values figured out so far by vcs_info and any change
     will be used directly when the actual replacement is done.

     If ret is set to non-zero, the string in
     ${hook_com[branch-replace]} will be used unchanged as the '%b'
     replacement in the variables set by vcs_info.

set-hgrev-format
     Called before a 'hgrevformat' is set.  The only argument to the
     hook is the format that is configured at this point.

     The 'hook_com' keys considered are 'hash' and 'localrev'.  They are
     set to the values figured out so far by vcs_info and any change
     will be used directly when the actual replacement is done.

     If ret is set to non-zero, the string in ${hook_com[rev-replace]}
     will be used unchanged as the '%i' replacement in the variables set
     by vcs_info.

set-message
     Called each time before a 'vcs_info_msg_N_' message is set.  It
     takes two arguments; the first being the 'N' in the message
     variable name, the second is the currently configured formats or
     actionformats.

     There are a number of 'hook_com' keys, that are used here:
     'action', 'branch', 'base', 'base-name', 'subdir', 'staged',
     'unstaged', 'revision', 'misc', 'vcs' and one 'miscN' entry for
     each backend-specific data field (N starting at zero).  They are
     set to the values figured out so far by vcs_info and any change
     will be used directly when the actual replacement is done.

     Since this hook is triggered multiple times (once for each
     configured formats or actionformats), each of the 'hook_com' keys
     mentioned above (except for the miscN entries) has an '_orig'
     counterpart, so even if you changed a value to your liking you can
     still get the original value in the next run.  Changing the '_orig'
     values is probably not a good idea.

     If ret is set to non-zero, the string in ${hook_com[message]} will
     be used unchanged as the message by vcs_info.

If all of this sounds rather confusing, take a look at the Examples
section below and also in the Misc/vcs_info-examples file in the Zsh
source.  They contain some explanatory code.

26.4.8 Examples
---------------

Don't use vcs_info at all (even though it's in your prompt):
     zstyle ':vcs_info:*' enable NONE

Disable the backends for bzr and svk:
     zstyle ':vcs_info:*' disable bzr svk

Disable everything _but_ bzr and svk:
     zstyle ':vcs_info:*' enable bzr svk

Provide a special formats for git:
     zstyle ':vcs_info:git:*' formats       ' GIT, BABY! [%b]'
     zstyle ':vcs_info:git:*' actionformats ' GIT ACTION! [%b|%a]'

All %x expansion in all sorts of formats ("formats", "actionformats",
branchformat, you name it) are done using the 'zformat' builtin from the
'zsh/zutil' module.  That means you can do everything with these %x
items what zformat supports.  In particular, if you want something that
is really long to have a fixed width, like a hash in a mercurial
branchformat, you can do this: %12.12i.  That'll shrink the 40 character
hash to its 12 leading characters.  The form is actually '%MIN.MAXx'.
More is possible.  See *note The zsh/zutil Module:: for details.

Use the quicker bzr backend
     zstyle ':vcs_info:bzr:*' use-simple true

If you do use use-simple, please report if it does
'the-right-thing[tm]'.

Display the revision number in yellow for bzr and svn:
     zstyle ':vcs_info:(svn|bzr):*' branchformat '%b%{'${fg[yellow]}'%}:%r'

If you want colors, make sure you enclose the color codes in %{...%} if
you want to use the string provided by vcs_info in prompts.

Here is how to print the VCS information as a command (not in a prompt):
     alias vcsi='vcs_info command; vcs_info_lastmsg'

This way, you can even define different formats for output via
vcs_info_lastmsg in the ':vcs_info:*:command:*' namespace.

Now as promised, some code that uses hooks: say, you'd like to replace
the string 'svn' by 'subversion' in vcs_info's %s formats replacement.

First, we will tell vcs_info to call a function when populating the
message variables with the gathered information:
     zstyle ':vcs_info:*+set-message:*' hooks svn2subversion

Nothing happens.  Which is reasonable, since we didn't define the actual
function yet.  To see what the hooks subsystem is trying to do, enable
the 'debug' style:
     zstyle ':vcs_info:*+*:*' debug true

That should give you an idea what is going on.  Specifically, the
function that we are looking for is '+vi-svn2subversion'.  Note, the
'+vi-' prefix.  So, everything is in order, just as documented.  When
you are done checking out the debugging output, disable it again:
     zstyle ':vcs_info:*+*:*' debug false

Now, let's define the function:

     function +vi-svn2subversion() {
         [[ ${hook_com[vcs_orig]} == svn ]] && hook_com[vcs]=subversion
     }

Simple enough.  And it could have even been simpler, if only we had
registered our function in a less generic context.  If we do it only in
the 'svn' backend's context, we don't need to test which the active
backend is:
     zstyle ':vcs_info:svn+set-message:*' hooks svn2subversion

     function +vi-svn2subversion() {
         hook_com[vcs]=subversion
     }

And finally a little more elaborate example, that uses a hook to create
a customised bookmark string for the hg backend.

Again, we start off by registering a function:
     zstyle ':vcs_info:hg+gen-hg-bookmark-string:*' hooks hgbookmarks

And then we define the '+vi-hgbookmarks function:

     function +vi-hgbookmarks() {
         # The default is to connect all bookmark names by
         # commas. This mixes things up a little.
         # Imagine, there's one type of bookmarks that is
         # special to you. Say, because it's *your* work.
         # Those bookmarks look always like this: "sh/*"
         # (because your initials are sh, for example).
         # This makes the bookmarks string use only those
         # bookmarks. If there's more than one, it
         # concatenates them using commas.
         # The bookmarks returned by `hg' are available in
         # the function's positional parameters.
         local s="${(Mj:,:)@:#sh/*}"
         # Now, the communication with the code that calls
         # the hook functions is done via the hook_com[]
         # hash. The key at which the `gen-hg-bookmark-string'
         # hook looks is `hg-bookmark-string'. So:
         hook_com[hg-bookmark-string]=$s
         # And to signal that we want to use the string we
         # just generated, set the special variable `ret' to
         # something other than the default zero:
         ret=1
         return 0
     }


Some longer examples and code snippets which might be useful are
available in the examples file located at Misc/vcs_info-examples in the
Zsh source directory.

This concludes our guided tour through zsh's vcs_info.


File: zsh.info,  Node: Prompt Themes,  Next: ZLE Functions,  Prev: Version Control Information,  Up: User Contributions

26.5 Prompt Themes
==================

26.5.1 Installation
-------------------

You should make sure all the functions from the Functions/Prompts
directory of the source distribution are available; they all begin with
the string 'prompt_' except for the special function'promptinit'.  You
also need the 'colors' function from Functions/Misc.  All of these
functions may already have been installed on your system; if not, you
will need to find them and copy them.  The directory should appear as
one of the elements of the fpath array (this should already be the case
if they were installed), and at least the function promptinit should be
autoloaded; it will autoload the rest.  Finally, to initialize the use
of the system you need to call the promptinit function.  The following
code in your .zshrc will arrange for this; assume the functions are
stored in the directory ~/myfns:

     fpath=(~/myfns $fpath)
     autoload -U promptinit
     promptinit

26.5.2 Theme Selection
----------------------

Use the prompt command to select your preferred theme.  This command may
be added to your .zshrc following the call to promptinit in order to
start zsh with a theme already selected.

prompt [ -c | -l ]
prompt [ -p | -h ] [ THEME ... ]
prompt [ -s ] THEME [ ARG ... ]
     Set or examine the prompt theme.  With no options and a THEME
     argument, the theme with that name is set as the current theme.
     The available themes are determined at run time; use the -l option
     to see a list.  The special THEME 'random' selects at random one of
     the available themes and sets your prompt to that.

     In some cases the THEME may be modified by one or more arguments,
     which should be given after the theme name.  See the help for each
     theme for descriptions of these arguments.

     Options are:

     -c
          Show the currently selected theme and its parameters, if any.
     -l
          List all available prompt themes.
     -p
          Preview the theme named by THEME, or all themes if no THEME is
          given.
     -h
          Show help for the theme named by THEME, or for the prompt
          function if no THEME is given.
     -s
          Set THEME as the current theme and save state.

prompt_THEME_setup
     Each available THEME has a setup function which is called by the
     prompt function to install that theme.  This function may define
     other functions as necessary to maintain the prompt, including
     functions used to preview the prompt or provide help for its use.
     You should not normally call a theme's setup function directly.


File: zsh.info,  Node: ZLE Functions,  Next: Exception Handling,  Prev: Prompt Themes,  Up: User Contributions

26.6 ZLE Functions
==================

26.6.1 Widgets
--------------

These functions all implement user-defined ZLE widgets (see *note Zsh
Line Editor::) which can be bound to keystrokes in interactive shells.
To use them, your .zshrc should contain lines of the form

     autoload FUNCTION
     zle -N FUNCTION

followed by an appropriate bindkey command to associate the function
with a key sequence.  Suggested bindings are described below.

bash-style word functions
     If you are looking for functions to implement moving over and
     editing words in the manner of bash, where only alphanumeric
     characters are considered word characters, you can use the
     functions described in the next section.  The following is
     sufficient:

          autoload -U select-word-style
          select-word-style bash

forward-word-match, backward-word-match
kill-word-match, backward-kill-word-match
transpose-words-match, capitalize-word-match
up-case-word-match, down-case-word-match
select-word-style, match-word-context, match-words-by-style
     The eight '-match' functions are drop-in replacements for the
     builtin widgets without the suffix.  By default they behave in a
     similar way.  However, by the use of styles and the function
     select-word-style, the way words are matched can be altered.

     The simplest way of configuring the functions is to use
     select-word-style, which can either be called as a normal function
     with the appropriate argument, or invoked as a user-defined widget
     that will prompt for the first character of the word style to be
     used.  The first time it is invoked, the eight -match functions
     will automatically replace the builtin versions, so they do not
     need to be loaded explicitly.

     The word styles available are as follows.  Only the first character
     is examined.

     bash
          Word characters are alphanumeric characters only.

     normal
          As in normal shell operation: word characters are alphanumeric
          characters plus any characters present in the string given by
          the parameter $WORDCHARS.

     shell
          Words are complete shell command arguments, possibly including
          complete quoted strings, or any tokens special to the shell.

     whitespace
          Words are any set of characters delimited by whitespace.

     default
          Restore the default settings; this is usually the same as
          'normal'.

     All but 'default' can be input as an upper case character, which
     has the same effect but with subword matching turned on.  In this
     case, words with upper case characters are treated specially: each
     separate run of upper case characters, or an upper case character
     followed by any number of other characters, is considered a word.
     The style subword-range can supply an alternative character range
     to the default '[:upper:]'; the value of the style is treated as
     the contents of a '[...]' pattern (note that the outer brackets
     should not be supplied, only those surrounding named ranges).

     More control can be obtained using the zstyle command, as described
     in *note The zsh/zutil Module::.  Each style is looked up in the
     context :zle:WIDGET where WIDGET is the name of the user-defined
     widget, not the name of the function implementing it, so in the
     case of the definitions supplied by select-word-style the
     appropriate contexts are :zle:forward-word, and so on.  The
     function select-word-style itself always defines styles for the
     context ':zle:*' which can be overridden by more specific (longer)
     patterns as well as explicit contexts.

     The style word-style specifies the rules to use.  This may have the
     following values.

     normal
          Use the standard shell rules, i.e.  alphanumerics and
          $WORDCHARS, unless overridden by the styles word-chars or
          word-class.

     specified
          Similar to normal, but _only_ the specified characters, and
          not also alphanumerics, are considered word characters.

     unspecified
          The negation of specified.  The given characters are those
          which will _not_ be considered part of a word.

     shell
          Words are obtained by using the syntactic rules for generating
          shell command arguments.  In addition, special tokens which
          are never command arguments such as '()' are also treated as
          words.

     whitespace
          Words are whitespace-delimited strings of characters.

     The first three of those rules usually use $WORDCHARS, but the
     value in the parameter can be overridden by the style word-chars,
     which works in exactly the same way as $WORDCHARS.  In addition,
     the style word-class uses character class syntax to group
     characters and takes precedence over word-chars if both are set.
     The word-class style does not include the surrounding brackets of
     the character class; for example, '-:[:alnum:]' is a valid
     word-class to include all alphanumerics plus the characters '-' and
     ':'.  Be careful including ']', '^' and '-' as these are special
     inside character classes.

     word-style may also have '-subword' appended to its value to turn
     on subword matching, as described above.

     The style skip-chars is mostly useful for transpose-words and
     similar functions.  If set, it gives a count of characters starting
     at the cursor position which will not be considered part of the
     word and are treated as space, regardless of what they actually
     are.  For example, if

          zstyle ':zle:transpose-words' skip-chars 1

     has been set, and transpose-words-match is called with the cursor
     on the X of fooXbar, where X can be any character, then the
     resulting expression is barXfoo.

     Finer grained control can be obtained by setting the style
     word-context to an array of pairs of entries.  Each pair of entries
     consists of a PATTERN and a SUBCONTEXT.  The shell argument the
     cursor is on is matched against each PATTERN in turn until one
     matches; if it does, the context is extended by a colon and the
     corresponding SUBCONTEXT.  Note that the test is made against the
     original word on the line, with no stripping of quotes.  Special
     handling is done between words: the current context is examined and
     if it contains the string back, the word before the cursor is
     considered, else the word after cursor is considered.  Some
     examples are given below.

     The style skip-whitespace-first is only used with the forward-word
     widget.  If it is set to true, then forward-word skips any
     non-word-characters, followed by any non-word-characters: this is
     similar to the behaviour of other word-orientated widgets, and also
     that used by other editors, however it differs from the standard
     zsh behaviour.  When using select-word-style the widget is set in
     the context :zle:* to true if the word style is bash and false
     otherwise.  It may be overridden by setting it in the more specific
     context :zle:forward-word*.

     Here are some examples of use of the styles, actually taken from
     the simplified interface in select-word-style:

          zstyle ':zle:*' word-style standard
          zstyle ':zle:*' word-chars ''

     Implements bash-style word handling for all widgets, i.e.  only
     alphanumerics are word characters; equivalent to setting the
     parameter WORDCHARS empty for the given context.

          style ':zle:*kill*' word-style space

     Uses space-delimited words for widgets with the word 'kill' in the
     name.  Neither of the styles word-chars nor word-class is used in
     this case.

     Here are some examples of use of the word-context style to extend
     the context.

          zstyle ':zle:*' word-context "*/*" file "[[:space:]]" whitespace
          zstyle ':zle:transpose-words:whitespace' word-style shell
          zstyle ':zle:transpose-words:filename' word-style normal
          zstyle ':zle:transpose-words:filename' word-chars ''

     This provides two different ways of using transpose-words depending
     on whether the cursor is on whitespace between words or on a
     filename, here any word containing a /.  On whitespace, complete
     arguments as defined by standard shell rules will be transposed.
     In a filename, only alphanumerics will be transposed.  Elsewhere,
     words will be transposed using the default style for
     :zle:transpose-words.

     The word matching and all the handling of zstyle settings is
     actually implemented by the function match-words-by-style.  This
     can be used to create new user-defined widgets.  The calling
     function should set the local parameter curcontext to :zle:WIDGET,
     create the local parameter matched_words and call
     match-words-by-style with no arguments.  On return, matched_words
     will be set to an array with the elements: (1) the start of the
     line (2) the word before the cursor (3) any non-word characters
     between that word and the cursor (4) any non-word character at the
     cursor position plus any remaining non-word characters before the
     next word, including all characters specified by the skip-chars
     style, (5) the word at or following the cursor (6) any non-word
     characters following that word (7) the remainder of the line.  Any
     of the elements may be an empty string; the calling function should
     test for this to decide whether it can perform its function.

     It is possible to pass options with arguments to
     match-words-by-style to override the use of styles.  The options
     are:
     -w
          WORD-STYLE
     -s
          SKIP-CHARS
     -c
          WORD-CLASS
     -C
          WORD-CHARS
     -r
          SUBWORD-RANGE

     For example, match-words-by-style -w shell -c 0 may be used to
     extract the command argument around the cursor.

     The word-context style is implemented by the function
     match-word-context.  This should not usually need to be called
     directly.

copy-earlier-word
     This widget works like a combination of insert-last-word and
     copy-prev-shell-word.  Repeated invocations of the widget retrieve
     earlier words on the relevant history line.  With a numeric
     argument N, insert the Nth word from the history line; N may be
     negative to count from the end of the line.

     If insert-last-word has been used to retrieve the last word on a
     previous history line, repeated invocations will replace that word
     with earlier words from the same line.

     Otherwise, the widget applies to words on the line currently being
     edited.  The widget style can be set to the name of another widget
     that should be called to retrieve words.  This widget must accept
     the same three arguments as insert-last-word.

cycle-completion-positions
     After inserting an unambiguous string into the command line, the
     new function based completion system may know about multiple places
     in this string where characters are missing or differ from at least
     one of the possible matches.  It will then place the cursor on the
     position it considers to be the most interesting one, i.e.  the one
     where one can disambiguate between as many matches as possible with
     as little typing as possible.

     This widget allows the cursor to be easily moved to the other
     interesting spots.  It can be invoked repeatedly to cycle between
     all positions reported by the completion system.

delete-whole-word-match
     This is another function which works like the -match functions
     described immediately above, i.e.  using styles to decide the word
     boundaries.  However, it is not a replacement for any existing
     function.

     The basic behaviour is to delete the word around the cursor.  There
     is no numeric prefix handling; only the single word around the
     cursor is considered.  If the widget contains the string kill, the
     removed text will be placed in the cutbuffer for future yanking.
     This can be obtained by defining kill-whole-word-match as follows:

          zle -N kill-whole-word-match delete-whole-word-match

     and then binding the widget kill-whole-word-match.

up-line-or-beginning-search, down-line-or-beginning-search
     These widgets are similar to the builtin functions
     up-line-or-search and down-line-or-search: if in a multiline buffer
     they move up or down within the buffer, otherwise they search for a
     history line matching the start of the current line.  In this case,
     however, they search for a line which matches the current line up
     to the current cursor position, in the manner of
     history-beginning-search-backward and -forward, rather than the
     first word on the line.

edit-command-line
     Edit the command line using your visual editor, as in ksh.

          bindkey -M vicmd v edit-command-line

expand-absolute-path
     Expand the file name under the cursor to an absolute path,
     resolving symbolic links.  Where possible, the initial path segment
     is turned into a named directory or reference to a user's home
     directory.

history-search-end
     This function implements the widgets
     history-beginning-search-backward-end and
     history-beginning-search-forward-end.  These commands work by first
     calling the corresponding builtin widget (see *note History
     Control::) and then moving the cursor to the end of the line.  The
     original cursor position is remembered and restored before calling
     the builtin widget a second time, so that the same search is
     repeated to look farther through the history.

     Although you autoload only one function, the commands to use it are
     slightly different because it implements two widgets.

          zle -N history-beginning-search-backward-end \
                 history-search-end
          zle -N history-beginning-search-forward-end \
                 history-search-end
          bindkey '\e^P' history-beginning-search-backward-end
          bindkey '\e^N' history-beginning-search-forward-end

history-beginning-search-menu
     This function implements yet another form of history searching.
     The text before the cursor is used to select lines from the
     history, as for history-beginning-search-backward except that all
     matches are shown in a numbered menu.  Typing the appropriate
     digits inserts the full history line.  Note that leading zeroes
     must be typed (they are only shown when necessary for removing
     ambiguity).  The entire history is searched; there is no
     distinction between forwards and backwards.

     With a prefix argument, the search is not anchored to the start of
     the line; the string typed by the use may appear anywhere in the
     line in the history.

     If the widget name contains '-end' the cursor is moved to the end
     of the line inserted.  If the widget name contains '-space' any
     space in the text typed is treated as a wildcard and can match
     anything (hence a leading space is equivalent to giving a prefix
     argument).  Both forms can be combined, for example:

          zle -N history-beginning-search-menu-space-end \
                 history-beginning-search-menu

history-pattern-search
     The function history-pattern-search implements widgets which prompt
     for a pattern with which to search the history backwards or
     forwards.  The pattern is in the usual zsh format, however the
     first character may be ^ to anchor the search to the start of the
     line, and the last character may be $ to anchor the search to the
     end of the line.  If the search was not anchored to the end of the
     line the cursor is positioned just after the pattern found.

     The commands to create bindable widgets are similar to those in the
     example immediately above:

          autoload -U history-pattern-search
          zle -N history-pattern-search-backward history-pattern-search
          zle -N history-pattern-search-forward history-pattern-search

incarg
     Typing the keystrokes for this widget with the cursor placed on or
     to the left of an integer causes that integer to be incremented by
     one.  With a numeric prefix argument, the number is incremented by
     the amount of the argument (decremented if the prefix argument is
     negative).  The shell parameter incarg may be set to change the
     default increment to something other than one.

          bindkey '^X+' incarg

incremental-complete-word
     This allows incremental completion of a word.  After starting this
     command, a list of completion choices can be shown after every
     character you type, which you can delete with ^H or DEL.  Pressing
     return accepts the completion so far and returns you to normal
     editing (that is, the command line is _not_ immediately executed).
     You can hit TAB to do normal completion, ^G to abort back to the
     state when you started, and ^D to list the matches.

     This works only with the new function based completion system.

          bindkey '^Xi' incremental-complete-word

insert-composed-char
     This function allows you to compose characters that don't appear on
     the keyboard to be inserted into the command line.  The command is
     followed by two keys corresponding to ASCII characters (there is no
     prompt).  For accented characters, the two keys are a base
     character followed by a code for the accent, while for other
     special characters the two characters together form a mnemonic for
     the character to be inserted.  The two-character codes are a subset
     of those given by RFC 1345 (see for example
     http://www.faqs.org/rfcs/rfc1345.html).

     The function may optionally be followed by up to two characters
     which replace one or both of the characters read from the keyboard;
     if both characters are supplied, no input is read.  For example,
     insert-composed-char a: can be used within a widget to insert an a
     with umlaut into the command line.  This has the advantages over
     use of a literal character that it is more portable.

     For best results zsh should have been built with support for
     multibyte characters (configured with --enable-multibyte); however,
     the function works for the limited range of characters available in
     single-byte character sets such as ISO-8859-1.

     The character is converted into the local representation and
     inserted into the command line at the cursor position.  (The
     conversion is done within the shell, using whatever facilities the
     C library provides.)  With a numeric argument, the character and
     its code are previewed in the status line

     The function may be run outside zle in which case it prints the
     character (together with a newline) to standard output.  Input is
     still read from keystrokes.

     See insert-unicode-char for an alternative way of inserting Unicode
     characters using their hexadecimal character number.

     The set of accented characters is reasonably complete up to Unicode
     character U+0180, the set of special characters less so.  However,
     it is very sporadic from that point.  Adding new characters is
     easy, however; see the function define-composed-chars.  Please send
     any additions to zsh-workers@zsh.org.

     The codes for the second character when used to accent the first
     are as follows.  Note that not every character can take every
     accent.
     !
          Grave.
     '
          Acute.
     >
          Circumflex.
     ?
          Tilde.  (This is not ~ as RFC 1345 does not assume that
          character is present on the keyboard.)
     -
          Macron.  (A horizontal bar over the base character.)
     (
          Breve.  (A shallow dish shape over the base character.)
     .
          Dot above the base character, or in the case of i no dot, or
          in the case of L and l a centered dot.
     :
          Diaeresis (Umlaut).
     c
          Cedilla.
     _
          Underline, however there are currently no underlined
          characters.
     /
          Stroke through the base character.
     "
          Double acute (only supported on a few letters).
     ;
          Ogonek.  (A little forward facing hook at the bottom right of
          the character.)
     <
          Caron.  (A little v over the letter.)
     0
          Circle over the base character.
     2
          Hook over the base character.
     9
          Horn over the base character.

     The most common characters from the Arabic, Cyrillic, Greek and
     Hebrew alphabets are available; consult RFC 1345 for the
     appropriate sequences.  In addition, a set of two letter codes not
     in RFC 1345 are available for the double-width characters
     corresponding to ASCII characters from ! to ~ (0x21 to 0x7e) by
     preceding the character with ^, for example ^A for a double-width
     A.

     The following other two-character sequences are understood.

     ASCII characters
          These are already present on most keyboards:
          <(
               Left square bracket
          //
               Backslash (solidus)
          )>
               Right square bracket
          (!
               Left brace (curly bracket)
          !!
               Vertical bar (pipe symbol)
          !)
               Right brace (curly bracket)
          '?
               Tilde

     Special letters
          Characters found in various variants of the Latin alphabet:
          ss
               Eszett (scharfes S)
          D-, d-
               Eth
          TH, th
               Thorn
          kk
               Kra
          'n
               'n
          NG, ng
               Ng
          OI, oi
               Oi
          yr
               yr
          ED
               ezh

     Currency symbols
          Ct
               Cent
          Pd
               Pound sterling (also lira and others)
          Cu
               Currency
          Ye
               Yen
          Eu
               Euro (N.B. not in RFC 1345)

     Punctuation characters
          References to "right" quotes indicate the shape (like a 9
          rather than 6) rather than their grammatical use.  (For
          example, a "right" low double quote is used to open quotations
          in German.)
          !I
               Inverted exclamation mark
          BB
               Broken vertical bar
          SE
               Section
          Co
               Copyright
          -a
               Spanish feminine ordinal indicator
          <<
               Left guillemet
          --
               Soft hyphen
          Rg
               Registered trade mark
          PI
               Pilcrow (paragraph)
          -o
               Spanish masculine ordinal indicator
          >>
               Right guillemet
          ?I
               Inverted question mark
          -1
               Hyphen
          -N
               En dash
          -M
               Em dash
          -3
               Horizontal bar
          :3
               Vertical ellipsis
          .3
               Horizontal midline ellipsis
          !2
               Double vertical line
          =2
               Double low line
          '6
               Left single quote
          '9
               Right single quote
          .9
               "Right" low quote
          9'
               Reversed "right" quote
          "6
               Left double quote
          "9
               Right double quote
          :9
               "Right" low double quote
          9"
               Reversed "right" double quote
          /-
               Dagger
          /=
               Double dagger

     Mathematical symbols
          DG
               Degree
          -2, +-, -+
               - sign, +/- sign, -/+ sign
          2S
               Superscript 2
          3S
               Superscript 3
          1S
               Superscript 1
          My
               Micro
          .M
               Middle dot
          14
               Quarter
          12
               Half
          34
               Three quarters
          *X
               Multiplication
          -:
               Division
          %0
               Per mille
          FA, TE, /0
               For all, there exists, empty set
          dP, DE, NB
               Partial derivative, delta (increment), del (nabla)
          (-, -)
               Element of, contains
          *P, +Z
               Product, sum
          *-, Ob, Sb
               Asterisk, ring, bullet
          RT, 0(, 00
               Root sign, proportional to, infinity

     Other symbols
          cS, cH, cD, cC
               Card suits: spades, hearts, diamonds, clubs
          Md, M8, M2, Mb, Mx, MX
               Musical notation: crotchet (quarter note), quaver (eighth
               note), semiquavers (sixteenth notes), flag sign, natural
               sign, sharp sign
          Fm, Ml
               Female, male

     Accents on their own
          '>
               Circumflex (same as caret, ^)
          '!
               Grave (same as backtick, `)
          ',
               Cedilla
          ':
               Diaeresis (Umlaut)
          'm
               Macron
          ''
               Acute

insert-files
     This function allows you type a file pattern, and see the results
     of the expansion at each step.  When you hit return, all expansions
     are inserted into the command line.

          bindkey '^Xf' insert-files

insert-unicode-char
     When first executed, the user inputs a set of hexadecimal digits.
     This is terminated with another call to insert-unicode-char.  The
     digits are then turned into the corresponding Unicode character.
     For example, if the widget is bound to ^XU, the character sequence
     '^XU 4 c ^XU' inserts L (Unicode U+004c).

     See insert-composed-char for a way of inserting characters using a
     two-character mnemonic.

narrow-to-region [ -p PRE ] [ -P POST ]
[ -S STATEPM | -R STATEPM ] [ -n ] [ START END ])
narrow-to-region-invisible
     Narrow the editable portion of the buffer to the region between the
     cursor and the mark, which may be in either order.  The region may
     not be empty.

     narrow-to-region may be used as a widget or called as a function
     from a user-defined widget; by default, the text outside the
     editable area remains visible.  A recursive-edit is performed and
     the original widening status is then restored.  Various options and
     arguments are available when it is called as a function.

     The options -p PRETEXT and -P POSTTEXT may be used to replace the
     text before and after the display for the duration of the function;
     either or both may be an empty string.

     If the option -n is also given, PRETEXT or POSTTEXT will only be
     inserted if there is text before or after the region respectively
     which will be made invisible.

     Two numeric arguments may be given which will be used instead of
     the cursor and mark positions.

     The option -S STATEPM is used to narrow according to the other
     options while saving the original state in the parameter with name
     STATEPM, while the option -R STATEPM is used to restore the state
     from the parameter; note in both cases the _name_ of the parameter
     is required.  In the second case, other options and arguments are
     irrelevant.  When this method is used, no recursive-edit is
     performed; the calling widget should call this function with the
     option -S, perform its own editing on the command line or pass
     control to the user via 'zle recursive-edit', then call this
     function with the option -R.  The argument STATEPM must be a
     suitable name for an ordinary parameter, except that parameters
     beginning with the prefix _ntr_ are reserved for use within
     narrow-to-region.  Typically the parameter will be local to the
     calling function.

     narrow-to-region-invisible is a simple widget which calls
     narrow-to-region with arguments which replace any text outside the
     region with '...'.

     The display is restored (and the widget returns) upon any zle
     command which would usually cause the line to be accepted or
     aborted.  Hence an additional such command is required to accept or
     abort the current line.

     The return status of both widgets is zero if the line was accepted,
     else non-zero.

     Here is a trivial example of a widget using this feature.
          local state
          narrow-to-region -p $'Editing restricted region\n' \
            -P '' -S state
          zle recursive-edit
          narrow-to-region -R state

predict-on
     This set of functions implements predictive typing using history
     search.  After predict-on, typing characters causes the editor to
     look backward in the history for the first line beginning with what
     you have typed so far.  After predict-off, editing returns to
     normal for the line found.  In fact, you often don't even need to
     use predict-off, because if the line doesn't match something in the
     history, adding a key performs standard completion, and then
     inserts itself if no completions were found.  However, editing in
     the middle of a line is liable to confuse prediction; see the
     toggle style below.

     With the function based completion system (which is needed for
     this), you should be able to type TAB at almost any point to
     advance the cursor to the next ''interesting'' character position
     (usually the end of the current word, but sometimes somewhere in
     the middle of the word).  And of course as soon as the entire line
     is what you want, you can accept with return, without needing to
     move the cursor to the end first.

     The first time predict-on is used, it creates several additional
     widget functions:

     delete-backward-and-predict
          Replaces the backward-delete-char widget.  You do not need to
          bind this yourself.
     insert-and-predict
          Implements predictive typing by replacing the self-insert
          widget.  You do not need to bind this yourself.
     predict-off
          Turns off predictive typing.

     Although you autoload only the predict-on function, it is necessary
     to create a keybinding for predict-off as well.

          zle -N predict-on
          zle -N predict-off
          bindkey '^X^Z' predict-on
          bindkey '^Z' predict-off

read-from-minibuffer
     This is most useful when called as a function from inside a widget,
     but will work correctly as a widget in its own right.  It prompts
     for a value below the current command line; a value may be input
     using all of the standard zle operations (and not merely the
     restricted set available when executing, for example,
     execute-named-cmd).  The value is then returned to the calling
     function in the parameter $REPLY and the editing buffer restored to
     its previous state.  If the read was aborted by a keyboard break
     (typically ^G), the function returns status 1 and $REPLY is not
     set.

     If one argument is supplied to the function it is taken as a
     prompt, otherwise '? ' is used.  If two arguments are supplied,
     they are the prompt and the initial value of $LBUFFER, and if a
     third argument is given it is the initial value of $RBUFFER.  This
     provides a default value and starting cursor placement.  Upon
     return the entire buffer is the value of $REPLY.

     One option is available: '-k NUM' specifies that NUM characters are
     to be read instead of a whole line.  The line editor is not invoked
     recursively in this case, so depending on the terminal settings the
     input may not be visible, and only the input keys are placed in
     $REPLY, not the entire buffer.  Note that unlike the read builtin
     NUM must be given; there is no default.

     The name is a slight misnomer, as in fact the shell's own
     minibuffer is not used.  Hence it is still possible to call
     executed-named-cmd and similar functions while reading a value.

replace-argument, replace-argument-edit
     The function replace-argument can be used to replace a command line
     argument in the current command line or, if the current command
     line is empty, in the last command line executed (the new command
     line is not executed).  Arguments are as delimited by standard
     shell syntax,

     If a numeric argument is given, that specifies the argument to be
     replaced.  0 means the command name, as in history expansion.  A
     negative numeric argument counts backward from the last word.

     If no numeric argument is given, the current argument is replaced;
     this is the last argument if the previous history line is being
     used.

     The function prompts for a replacement argument.

     If the widget contains the string edit, for example is defined as

          zle -N replace-argument-edit replace-argument

     then the function presents the current value of the argument for
     editing, otherwise the editing buffer for the replacement is
     initially empty.

replace-string, replace-pattern
replace-string-again, replace-pattern-again
     The function replace-string implements three widgets.  If defined
     under the same name as the function, it prompts for two strings;
     the first (source) string will be replaced by the second everywhere
     it occurs in the line editing buffer.

     If the widget name contains the word 'pattern', for example by
     defining the widget using the command 'zle -N replace-pattern
     replace-string', then the matching is performed using zsh patterns.
     All zsh extended globbing patterns can be used in the source
     string; note that unlike filename generation the pattern does not
     need to match an entire word, nor do glob qualifiers have any
     effect.  In addition, the replacement string can contain parameter
     or command substitutions.  Furthermore, a '&' in the replacement
     string will be replaced with the matched source string, and a
     backquoted digit '\N' will be replaced by the Nth parenthesised
     expression matched.  The form '\{N}' may be used to protect the
     digit from following digits.

     If the widget instead contains the word 'regex' (or 'regexp'), then
     the matching is performed using regular expressions, respecting the
     setting of the option RE_MATCH_PCRE (see the description of the
     function regexp-replace below).  The special replacement facilities
     described above for pattern matching are available.

     By default the previous source or replacement string will not be
     offered for editing.  However, this feature can be activated by
     setting the style edit-previous in the context :zle:WIDGET (for
     example, :zle:replace-string) to true.  In addition, a positive
     numeric argument forces the previous values to be offered, a
     negative or zero argument forces them not to be.

     The function replace-string-again can be used to repeat the
     previous replacement; no prompting is done.  As with
     replace-string, if the name of the widget contains the word
     'pattern' or 'regex', pattern or regular expression matching is
     performed, else a literal string replacement.  Note that the
     previous source and replacement text are the same whether pattern,
     regular expression or string matching is used.

     In addition, replace-string shows the previous replacement above
     the prompt, so long as there was one during the current session; if
     the source string is empty, that replacement will be repeated
     without the widget prompting for a replacement string.

     For example, starting from the line:

          print This line contains fan and fond

     and invoking replace-pattern with the source string 'f(?)n' and the
     replacement string 'c\1r' produces the not very useful line:

          print This line contains car and cord

     The range of the replacement string can be limited by using the
     narrow-to-region-invisible widget.  One limitation of the current
     version is that undo will cycle through changes to the replacement
     and source strings before undoing the replacement itself.

send-invisible
     This is similar to read-from-minibuffer in that it may be called as
     a function from a widget or as a widget of its own, and
     interactively reads input from the keyboard.  However, the input
     being typed is concealed and a string of asterisks ('*') is shown
     instead.  The value is saved in the parameter $INVISIBLE to which a
     reference is inserted into the editing buffer at the restored
     cursor position.  If the read was aborted by a keyboard break
     (typically ^G) or another escape from editing such as push-line,
     $INVISIBLE is set to empty and the original buffer is restored
     unchanged.

     If one argument is supplied to the function it is taken as a
     prompt, otherwise 'Non-echoed text: ' is used (as in emacs).  If a
     second and third argument are supplied they are used to begin and
     end the reference to $INVISIBLE that is inserted into the buffer.
     The default is to open with ${, then INVISIBLE, and close with },
     but many other effects are possible.

smart-insert-last-word
     This function may replace the insert-last-word widget, like so:

          zle -N insert-last-word smart-insert-last-word

     With a numeric prefix, or when passed command line arguments in a
     call from another widget, it behaves like insert-last-word, except
     that words in comments are ignored when INTERACTIVE_COMMENTS is
     set.

     Otherwise, the rightmost ''interesting'' word from the previous
     command is found and inserted.  The default definition of
     ''interesting'' is that the word contains at least one alphabetic
     character, slash, or backslash.  This definition may be overridden
     by use of the match style.  The context used to look up the style
     is the widget name, so usually the context is :insert-last-word.
     However, you can bind this function to different widgets to use
     different patterns:

          zle -N insert-last-assignment smart-insert-last-word
          zstyle :insert-last-assignment match '[[:alpha:]][][[:alnum:]]#=*'
          bindkey '\e=' insert-last-assignment

     If no interesting word is found and the auto-previous style is set
     to a true value, the search continues upward through the history.
     When auto-previous is unset or false (the default), the widget must
     be invoked repeatedly in order to search earlier history lines.

transpose-lines
     Only useful with a multi-line editing buffer; the lines here are
     lines within the current on-screen buffer, not history lines.  The
     effect is similar to the function of the same name in Emacs.

     Transpose the current line with the previous line and move the
     cursor to the start of the next line.  Repeating this (which can be
     done by providing a positive numeric prefix argument) has the
     effect of moving the line above the cursor down by a number of
     lines.

     With a negative numeric prefix argument, requires two lines above
     the cursor.  These two lines are transposed and the cursor moved to
     the start of the previous line.  Using a numeric prefix less than
     -1 has the effect of moving the line above the cursor up by minus
     that number of lines.

which-command
     This function is a drop-in replacement for the builtin widget
     which-command.  It has enhanced behaviour, in that it correctly
     detects whether or not the command word needs to be expanded as an
     alias; if so, it continues tracing the command word from the
     expanded alias until it reaches the command that will be executed.

     The style whence is available in the context :zle:$WIDGET; this may
     be set to an array to give the command and options that will be
     used to investigate the command word found.  The default is whence
     -c.

zcalc-auto-insert
     This function is useful together with the zcalc function described
     in *note Mathematical Functions::.  It should be bound to a key
     representing a binary operator such as '+', '-', '*' or '/'.  When
     running in zcalc, if the key occurs at the start of the line or
     immediately following an open parenthesis, the text "ans " is
     inserted before the representation of the key itself.  This allows
     easy use of the answer from the previous calculation in the current
     line.  The text to be inserted before the symbol typed can be
     modified by setting the variable ZCALC_AUTO_INSERT_PREFIX.

     Hence, for example, typing '+12' followed by return adds 12 to the
     previous result.

     When not in zcalc, the key simply inserts the symbol itself.

26.6.2 Utility Functions
------------------------

These functions are useful in constructing widgets.  They should be
loaded with 'autoload -U FUNCTION' and called as indicated from
user-defined widgets.

split-shell-arguments
     This function splits the line currently being edited into shell
     arguments and whitespace.  The result is stored in the array reply.
     The array contains all the parts of the line in order, starting
     with any whitespace before the first argument, and finishing with
     any whitespace after the last argument.  Hence (so long as the
     option KSH_ARRAYS is not set) whitespace is given by odd indices in
     the array and arguments by even indices.  Note that no stripping of
     quotes is done; joining together all the elements of reply in order
     is guaranteed to produce the original line.

     The parameter REPLY is set to the index of the word in reply which
     contains the character after the cursor, where the first element
     has index 1.  The parameter REPLY2 is set to the index of the
     character under the cursor in that word, where the first character
     has index 1.

     Hence reply, REPLY and REPLY2 should all be made local to the
     enclosing function.

     See the function modify-current-argument, described below, for an
     example of how to call this function.

modify-current-argument [ EXPR-USING-$ARG | FUNC ]
     This function provides a simple method of allowing user-defined
     widgets to modify the command line argument under the cursor (or
     immediately to the left of the cursor if the cursor is between
     arguments).

     The argument can be an expression which when evaluated operates on
     the shell parameter ARG, which will have been set to the command
     line argument under the cursor.  The expression should be suitably
     quoted to prevent it being evaluated too early.

     Alternatively, if the argument does not contain the string ARG, it
     is assumed to be a shell function, to which the current command
     line argument is passed as the only argument.  The function should
     set the variable REPLY to the new value for the command line
     argument.  If the function returns non-zero status, so does the
     calling function.

     For example, a user-defined widget containing the following code
     converts the characters in the argument under the cursor into all
     upper case:

          modify-current-argument '${(U)ARG}'

     The following strips any quoting from the current word (whether
     backslashes or one of the styles of quotes), and replaces it with
     single quoting throughout:

          modify-current-argument '${(qq)${(Q)ARG}}'

     The following performs directory expansion on the command line
     argument and replaces it by the absolute path:

          expand-dir() {
            REPLY=${~1}
            REPLY=${REPLY:a}
          }
          modify-current-argument expand-dir

     In practice the function expand-dir would probably not be defined
     within the widget where modify-current-argument is called.

26.6.3 Styles
-------------

The behavior of several of the above widgets can be controlled by the
use of the zstyle mechanism.  In particular, widgets that interact with
the completion system pass along their context to any completions that
they invoke.

break-keys
     This style is used by the incremental-complete-word widget.  Its
     value should be a pattern, and all keys matching this pattern will
     cause the widget to stop incremental completion without the key
     having any further effect.  Like all styles used directly by
     incremental-complete-word, this style is looked up using the
     context ':incremental'.

completer
     The incremental-complete-word and insert-and-predict widgets set up
     their top-level context name before calling completion.  This
     allows one to define different sets of completer functions for
     normal completion and for these widgets.  For example, to use
     completion, approximation and correction for normal completion,
     completion and correction for incremental completion and only
     completion for prediction one could use:

          zstyle ':completion:*' completer \
                  _complete _correct _approximate
          zstyle ':completion:incremental:*' completer \
                  _complete _correct
          zstyle ':completion:predict:*' completer \
                  _complete

     It is a good idea to restrict the completers used in prediction,
     because they may be automatically invoked as you type.  The _list
     and _menu completers should never be used with prediction.  The
     _approximate, _correct, _expand, and _match completers may be used,
     but be aware that they may change characters anywhere in the word
     behind the cursor, so you need to watch carefully that the result
     is what you intended.

cursor
     The insert-and-predict widget uses this style, in the context
     ':predict', to decide where to place the cursor after completion
     has been tried.  Values are:

     complete
          The cursor is left where it was when completion finished, but
          only if it is after a character equal to the one just inserted
          by the user.  If it is after another character, this value is
          the same as 'key'.

     key
          The cursor is left after the Nth occurrence of the character
          just inserted, where N is the number of times that character
          appeared in the word before completion was attempted.  In
          short, this has the effect of leaving the cursor after the
          character just typed even if the completion code found out
          that no other characters need to be inserted at that position.

     Any other value for this style unconditionally leaves the cursor at
     the position where the completion code left it.

list
     When using the incremental-complete-word widget, this style says if
     the matches should be listed on every key press (if they fit on the
     screen).  Use the context prefix ':completion:incremental'.

     The insert-and-predict widget uses this style to decide if the
     completion should be shown even if there is only one possible
     completion.  This is done if the value of this style is the string
     always.  In this case the context is ':predict' (_not_
     ':completion:predict').

match
     This style is used by smart-insert-last-word to provide a pattern
     (using full EXTENDED_GLOB syntax) that matches an interesting word.
     The context is the name of the widget to which
     smart-insert-last-word is bound (see above).  The default behavior
     of smart-insert-last-word is equivalent to:

          zstyle :insert-last-word match '*[[:alpha:]/\\]*'

     However, you might want to include words that contain spaces:

          zstyle :insert-last-word match '*[[:alpha:][:space:]/\\]*'

     Or include numbers as long as the word is at least two characters
     long:

          zstyle :insert-last-word match '*([[:digit:]]?|[[:alpha:]/\\])*'

     The above example causes redirections like "2>" to be included.

prompt
     The incremental-complete-word widget shows the value of this style
     in the status line during incremental completion.  The string value
     may contain any of the following substrings in the manner of the
     PS1 and other prompt parameters:

     %c
          Replaced by the name of the completer function that generated
          the matches (without the leading underscore).

     %l
          When the list style is set, replaced by '...' if the list of
          matches is too long to fit on the screen and with an empty
          string otherwise.  If the list style is 'false' or not set,
          '%l' is always removed.

     %n
          Replaced by the number of matches generated.

     %s
          Replaced by '-no match-', '-no prefix-', or an empty string if
          there is no completion matching the word on the line, if the
          matches have no common prefix different from the word on the
          line, or if there is such a common prefix, respectively.

     %u
          Replaced by the unambiguous part of all matches, if there is
          any, and if it is different from the word on the line.

     Like 'break-keys', this uses the ':incremental' context.

stop-keys
     This style is used by the incremental-complete-word widget.  Its
     value is treated similarly to the one for the break-keys style (and
     uses the same context: ':incremental').  However, in this case all
     keys matching the pattern given as its value will stop incremental
     completion and will then execute their usual function.

toggle
     This boolean style is used by predict-on and its related widgets in
     the context ':predict'.  If set to one of the standard 'true'
     values, predictive typing is automatically toggled off in
     situations where it is unlikely to be useful, such as when editing
     a multi-line buffer or after moving into the middle of a line and
     then deleting a character.  The default is to leave prediction
     turned on until an explicit call to predict-off.

verbose
     This boolean style is used by predict-on and its related widgets in
     the context ':predict'.  If set to one of the standard 'true'
     values, these widgets display a message below the prompt when the
     predictive state is toggled.  This is most useful in combination
     with the toggle style.  The default does not display these
     messages.

widget
     This style is similar to the command style: For widget functions
     that use zle to call other widgets, this style can sometimes be
     used to override the widget which is called.  The context for this
     style is the name of the calling widget (_not_ the name of the
     calling function, because one function may be bound to multiple
     widget names).

          zstyle :copy-earlier-word widget smart-insert-last-word

     Check the documentation for the calling widget or function to
     determine whether the widget style is used.

